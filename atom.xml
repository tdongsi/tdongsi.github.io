<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2017-07-12T02:37:35-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Groovy Code in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/blog/2017/06/16/troubleshooting-groovy-scripts-in-jenkinsfile/"/>
    <updated>2017-06-16T23:52:44-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/06/16/troubleshooting-groovy-scripts-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>In this post, we look into some troubleshooting tips when <a href="http://tdongsi.github.io/blog/2017/04/18/groovy-code-in-jenkins-pipeline/">using independent Groovy scripts in Jenkins pipeline</a> and how to work around those.</p>

<!--more-->


<h3>Cannot load a Groovy script in Declarative Pipeline</h3>

<p><strong>Problem</strong>: Loading Groovy methods from a file with <code>load</code> step does not work inside Declarative Pipeline step, as reported in <a href="https://issues.jenkins-ci.org/browse/JENKINS-43455">this issue</a>.</p>

<p><strong>Workaround</strong>: There are a few work-arounds. The most straight-forward one is to use <a href="https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline"><code>script</code> step</a>.</p>

<figure class='code'><figcaption><span>Loading Groovy script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>    <span class="nf">withCredentials</span><span class="o">([</span>
</span><span class='line'>        <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUserName&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUserName&#39;</span><span class="o">],</span>
</span><span class='line'>        <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">script</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">myScript</span> <span class="o">=</span> <span class="n">load</span> <span class="s1">&#39;jenkins/xml.groovy&#39;</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">myFile</span> <span class="o">=</span> <span class="n">myScript</span><span class="o">.</span><span class="na">transformXml</span><span class="o">(</span><span class="n">settingsFile</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUserName</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>            <span class="n">sh</span> <span class="s2">&quot;mvn -B -s ${myFile} clean compile&quot;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sh</span> <span class="s2">&quot;rm ${myFile}&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> You can also define Groovy methods from inside the Jenkinsfile.</p>

<figure class='code'><figcaption><span>Example Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">xmlTransform</span><span class="o">(</span><span class="n">txt</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="n">xmlRoot</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">txt</span><span class="o">)</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>    <span class="n">xmlRoot</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>       <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TRICKY: FileWriter does NOT work</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>    <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xmlRoot</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>        <span class="nf">withCredentials</span><span class="o">([</span>
</span><span class='line'>            <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUserName&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUserName&#39;</span><span class="o">],</span>
</span><span class='line'>            <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">script</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">myScript</span> <span class="o">=</span> <span class="n">load</span> <span class="s1">&#39;jenkins/xml.groovy&#39;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">myFile</span> <span class="o">=</span> <span class="n">xmlTransform</span><span class="o">(</span><span class="n">settingsFile</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUserName</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>                <span class="n">sh</span> <span class="s2">&quot;mvn -B -s ${myFile} clean compile&quot;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">sh</span> <span class="s2">&quot;rm ${myFile}&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Declarative Pipeline, to reuse the code from a Groovy script, you must use Shared Libraries.
Shared Libraries are not specific to Declarative; they were released some time ago and were seen in Scripted Pipeline.
<a href="http://tdongsi.github.io/blog/2017/03/17/jenkins-pipeline-shared-libraries/">This blog post</a> discusses an older mechanism for Shared Library.
For the newer mechanism of importing library, please check out <a href="https://jenkins.io/blog/2017/02/15/declarative-notifications/">this blog post</a>.
Due to Declarative Pipeline’s lack of support for defining methods, Shared Libraries definitely take on a vital role for code-reuse in Jenkinsfile.</p>

<h3><code>File</code> reading and writing not supported</h3>

<p>Java/Grooy reading and writing using &ldquo;java.io.File&rdquo; class is not directly supported.</p>

<figure class='code'><figcaption><span>Using File class does NOT work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">myFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s1">&#39;/home/data/myfile.xml&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, using that class in Jenkinsfile must go through &ldquo;In-Process Script Approval&rdquo; with this warning.</p>

<blockquote><p>new java.io.File java.lang.String Approving this signature may introduce a security vulnerability! You are advised to deny it.</p></blockquote>


<p>Even then, &ldquo;java.io.File&rdquo; will refer to <strong>files on the master</strong> (where Jenkins is running), not the current workspace on Jenkins slave (or slave container).
As a result, it will report the following error even though the file is present in filesystem (<a href="https://stackoverflow.com/questions/41739468/groovy-reports-that-a-file-doesnt-exists-when-it-really-is-present-in-the-syste">relevant Stackoverflow</a>) on slave:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.io.FileNotFoundException: /home/data/myfile.xml (No such file or directory)
</span><span class='line'>  at java.io.FileInputStream.open0(Native Method)</span></code></pre></td></tr></table></div></figure>


<p>That also means related class such as FileWriter will NOT work as expected.
It reports no error during execution but you will find no file since those files are created on Jenkins master.</p>

<p><strong>Workaround</strong>:</p>

<ul>
<li>For file reading, use <a href="https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#readfile-read-file-from-workspace"><code>readFile</code> step</a>.</li>
<li>For file writing, use <code>writeFile</code> step. However, Pipeline steps (such as <code>writeFile</code>) are NOT allowed in <code>@NonCPS</code> methods. For more complex file writing, you might want to export the file content as String and use the following code snippet:</li>
</ul>


<figure class='code'><figcaption><span>Shell command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TRICKY: FileWriter does NOT work in xmlTransform</span>
</span><span class='line'><span class="kt">def</span> <span class="n">mCommand</span> <span class="o">=</span> <span class="s2">&quot;cat &gt;${settingsFile} &lt;&lt;EOF&quot;</span>
</span><span class='line'><span class="n">mCommand</span> <span class="o">+=</span> <span class="s2">&quot;\n${xmlFile}\nEOF&quot;</span>
</span><span class='line'><span class="n">sh</span> <span class="n">mCommand</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code snippet above, we construct a <a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells"><em>here document</em>-formatted</a> command for writing multi-line string in <code>mCommand</code> before passing to <code>sh</code> step for executing.</p>

<figure class='code'><figcaption><span>heredoc example to explain mCommand</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &gt;output.txt &lt;&lt;EOF
</span><span class='line'>SELECT foo, bar FROM db
</span><span class='line'>WHERE foo='baz'
</span><span class='line'>More line from xmlFile
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>$ cat output.txt
</span><span class='line'>SELECT foo, bar FROM db
</span><span class='line'>WHERE foo='baz'
</span><span class='line'>More line from xmlFile</span></code></pre></td></tr></table></div></figure>


<h3>Serialization errors</h3>

<p>You often encounter this type of errors when using non-serialiable classes from Groovy/Java libraries.</p>

<figure class='code'><figcaption><span>Error in Jenkins log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.io.NotSerializableException: org.codehaus.groovy.control.ErrorCollector
</span><span class='line'>  at org.jboss.marshalling.river.RiverMarshaller.doWriteObject(RiverMarshaller.java:860)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Related error in Jenkins log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.lang.UnsupportedOperationException: Calling public static java.lang.Iterable 
</span><span class='line'>org.codehaus.groovy.runtime.DefaultGroovyMethods.each(java.lang.Iterable,groovy.lang.Closure) on a
</span><span class='line'>CPS-transformed closure is not yet supported (JENKINS-26481); 
</span><span class='line'>encapsulate in a @NonCPS method, or use Java-style loops
</span><span class='line'>  at org.jenkinsci.plugins.workflow.cps.GroovyClassLoaderWhitelist.checkJenkins26481
</span><span class='line'>    (GroovyClassLoaderWhitelist.java:90)</span></code></pre></td></tr></table></div></figure>


<p>There is also some known <a href="https://issues.jenkins-ci.org/browse/JENKINS-35140">issue about JsonSlurper</a>.
These problems come from the fact that variables in Jenkins pipelines must be serializable.
Since pipeline must survive a Jenkins restart, the state of the running program is periodically saved to disk for possible resume later.
Any &ldquo;live&rdquo; objects such as a network connection is not serializble.</p>

<p><strong>Workaround</strong>:
Explicitly discard non-serializable objects or use <a href="https://support.cloudbees.com/hc/en-us/articles/230612967-Pipeline-The-pipeline-even-if-successful-ends-with-java-io-NotSerializableException">@NonCPS</a> methods.</p>

<p>Quoted from <a href="https://github.com/jenkinsci/workflow-cps-plugin/blob/master/README.md">here</a>: <code>@NonCPS</code> methods may safely use non-<code>Serializable</code> objects as local variables, though they should NOT accept nonserializable parameters or return or store nonserializable values.
You may NOT call regular (CPS-transformed) methods, or Pipeline steps, from a <code>@NonCPS</code> method, so they are best used for performing some calculations before passing a summary back to the main script.</p>

<h3>References</h3>

<ul>
<li><a href="https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline">Declarative syntax</a></li>
<li><a href="https://jenkins.io/blog/2017/02/15/declarative-notifications/">Shared Libraries for Declarative Pipeline</a></li>
<li>Here document

<ul>
<li><a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells">Theory</a></li>
<li><a href="https://stackoverflow.com/questions/2500436/how-does-cat-eof-work-in-bash">Common usage from Stackoverflow</a></li>
<li><a href="http://www.guguncube.com/2140/unix-set-a-multi-line-text-to-a-string-variable-or-file-in-bash">Heredoc with and without variable expansion</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Emails From Docker Containers]]></title>
    <link href="http://tdongsi.github.io/blog/2017/05/25/sending-emails-from-docker-containers/"/>
    <updated>2017-05-25T13:42:45-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/05/25/sending-emails-from-docker-containers</id>
    <content type="html"><![CDATA[<p>In this post, we looks into how to set up notification emails at the end of CI pipelines in a containerized Jenkins system.
First, we look into conventional Jenkins system (directly hosted) that has direct communication to the SMTP server.
After that, we will look into adjustments required for a containerized Jenkins system to run in the same environment.</p>

<!--more-->


<h3>Sending emails in standard Jenkins setup</h3>

<p>We first look at a typical Jenkins setup, where the Jenkins instance is installed directly on a host machine (VM or bare-metal) and has direct communication to the SMTP server.
For corporate network, you may have to use an SMTP relay server instead.
For those cases, you can configure SMTP communication by <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-ubuntu-14-04">setting up Postfix</a>.
Its typical settings is defined in <em>/etc/postfix/main.cf</em> file like this:</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># See /usr/share/postfix/main.cf.bak for a commented, more complete version
</span><span class='line'>
</span><span class='line'>myhostname = dev-worker-1.example.com
</span><span class='line'>smtpd_banner = $myhostname ESMTP $mail_name
</span><span class='line'>biff = no
</span><span class='line'>
</span><span class='line'># appending .domain is the MUA's job.
</span><span class='line'>append_dot_mydomain = no
</span><span class='line'>
</span><span class='line'># Uncomment the next line to generate "delayed mail" warnings
</span><span class='line'>#delay_warning_time = 4h
</span><span class='line'>
</span><span class='line'>readme_directory = no
</span><span class='line'>
</span><span class='line'># TLS parameters
</span><span class='line'>smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
</span><span class='line'>smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
</span><span class='line'>smtpd_use_tls=yes
</span><span class='line'>
</span><span class='line'># See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for
</span><span class='line'># information on enabling SSL in the smtp client.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>alias_maps = hash:/etc/aliases
</span><span class='line'>alias_database = hash:/etc/aliases
</span><span class='line'>myorigin = dev-worker-1.example.com
</span><span class='line'>mydestination = dev-worker-1.example.com, localhost.example.com, localhost
</span><span class='line'>relayhost = smtprelay-prd.example.com
</span><span class='line'>mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
</span><span class='line'>mailbox_size_limit = 0
</span><span class='line'>recipient_delimiter = +
</span><span class='line'>inet_interfaces = localhost
</span><span class='line'>inet_protocols = all</span></code></pre></td></tr></table></div></figure>


<p>We can test the setup by sending a test email with the following command:</p>

<figure class='code'><figcaption><span>Send a test email</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[tdongsi@dev-worker-1 ~]# echo "Test localhost" | mailx -s Test tdongsi@example.com
</span><span class='line'>send-mail: warning: inet_protocols: disabling IPv6 name/address support: Address family not supported by protocol
</span><span class='line'>postdrop: warning: inet_protocols: disabling IPv6 name/address support: Address family not supported by protocol</span></code></pre></td></tr></table></div></figure>


<p>After the <code>postfix</code> service is up, Jenkins can be configured to send email with <a href="https://wiki.jenkins-ci.org/display/JENKINS/Mailer">Mailer plugin</a>.
Mail server can be configured in <strong>Manage Jenkins</strong> page, <strong>E-mail Notification</strong> section.
Please visit <a href="http://www.nailedtothex.org/roller/kyle/entry/articles-jenkins-email">this post</a> for more detailed instructions and screenshots.
We can also test the configuration by sending test e-mail in the same <strong>E-mail Notification</strong> section.</p>

<h3>Sending email from container</h3>

<p>Many Jenkins-based CI systems have been containerized and deployed on Kubernetes cluster (in conjunction with <a href="https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin">Kubernetes plugin</a>).
For email notifications in such CI systems, one option is to reuse <code>postfix</code> service, which is usually configured and ready on the Kubernetes nodes, and expose it to the Docker containers.</p>

<p>There are two changes need to be made on Postfix to expose it to Docker containers on one host.</p>

<ol>
<li>Exposing Postfix to the docker network, that is, Postfix must be configured to bind to localhost as well as the docker network.</li>
<li>Accepting all incoming connections which come from any Docker containers.</li>
</ol>


<p>Docker bridge (<code>docker0</code>) acts a a bridge between your ethernet port and docker containers so that data can go back and forth.
We achieve the first requirement by adding the IP of <code>docker0</code> to <code>inet_iterfaces</code>.</p>

<figure class='code'><figcaption><span>ifconfig example output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@dev-worker-1 ~]$ ifconfig
</span><span class='line'>docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1472
</span><span class='line'>        inet 172.22.91.1  netmask 255.255.255.0  broadcast 0.0.0.0
</span><span class='line'>        ether 02:42:88:5f:24:28  txqueuelen 0  (Ethernet)
</span><span class='line'>        RX packets 8624183  bytes 18891507332 (17.5 GiB)
</span><span class='line'>        RX errors 0  dropped 0  overruns 0  frame 0
</span><span class='line'>        TX packets 15891332  bytes 16911210191 (15.7 GiB)
</span><span class='line'>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</span><span class='line'>
</span><span class='line'>flannel0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472
</span><span class='line'>        inet 172.22.91.0  netmask 255.255.0.0  destination 172.22.91.0
</span><span class='line'>        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)
</span><span class='line'>        RX packets 10508237  bytes 7051646109 (6.5 GiB)
</span><span class='line'>        RX errors 0  dropped 0  overruns 0  frame 0
</span><span class='line'>        TX packets 15511583  bytes 18744591891 (17.4 GiB)
</span><span class='line'>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span></code></pre></td></tr></table></div></figure>


<p>For the second requirement, the whole docker network as well as localhost should be added to <code>mynetworks</code>.
In our kubernetes setup, the docker network should be <code>flannel0</code> and its subnet&rsquo;s CIDR notation is added to the <code>mynetworks</code> line:</p>

<figure class='code'><figcaption><span>Modified "/etc/postfix/main.cf"</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># See /usr/share/postfix/main.cf.bak for a commented, more complete version
</span><span class='line'>
</span><span class='line'>myhostname = dev-worker-1.example.com
</span><span class='line'>smtpd_banner = $myhostname ESMTP $mail_name
</span><span class='line'>biff = no
</span><span class='line'>
</span><span class='line'># appending .domain is the MUA's job.
</span><span class='line'>append_dot_mydomain = no
</span><span class='line'>
</span><span class='line'># Uncomment the next line to generate "delayed mail" warnings
</span><span class='line'>#delay_warning_time = 4h
</span><span class='line'>
</span><span class='line'>readme_directory = no
</span><span class='line'>
</span><span class='line'># TLS parameters
</span><span class='line'>smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
</span><span class='line'>smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
</span><span class='line'>smtpd_use_tls=yes
</span><span class='line'>
</span><span class='line'># See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for
</span><span class='line'># information on enabling SSL in the smtp client.
</span><span class='line'>
</span><span class='line'>alias_maps = hash:/etc/aliases
</span><span class='line'>alias_database = hash:/etc/aliases
</span><span class='line'>myorigin = dev-worker-1.example.com
</span><span class='line'>mydestination = dev-worker-1.example.com, localhost.example.com, localhost
</span><span class='line'>relayhost = smtprelay-prd.example.com
</span><span class='line'>mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 172.22.0.0/16
</span><span class='line'>mailbox_size_limit = 0
</span><span class='line'>recipient_delimiter = +
</span><span class='line'>inet_interfaces = localhost, 172.22.91.1
</span><span class='line'>inet_protocols = all</span></code></pre></td></tr></table></div></figure>


<p>Note the differences in <code>inet_interfaces</code> and <code>mynetworks</code> from the last section.
One can simply enter the Docker container/Kubernetes pod to verify such setup.
Note that application <code>mailx</code> maybe not available in a container since we tend to keep the containers light-weight.
Instead, prepare a <code>sendmail.txt</code> file (based on <a href="http://docs.blowb.org/setup-host/postfix.html">this</a>) with the following SMTP commands and use <code>nc</code> to send out the email as shown below.</p>

<figure class='code'><figcaption><span>Send test email from container</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:k8s tdongsi$ kubectl --kubeconfig kubeconfig --namespace jenkins exec -it jenkins-8hgsn -- bash -il
</span><span class='line'>
</span><span class='line'>jenkins@jenkins-8hgsn:~/test$ cat sendmail.txt
</span><span class='line'>HELO x
</span><span class='line'>MAIL FROM: test@example.com
</span><span class='line'>RCPT TO: tdongsi@example.com
</span><span class='line'>DATA
</span><span class='line'>From: test@example.com
</span><span class='line'>To: $YOUR_EMAIL
</span><span class='line'>Subject: This is a test
</span><span class='line'>
</span><span class='line'>The test is successful
</span><span class='line'>
</span><span class='line'>.
</span><span class='line'>quit
</span><span class='line'>
</span><span class='line'>jenkins@jenkins-8hgsn:~/test$ nc 172.22.91.1 25 &lt;sendmail.txt
</span><span class='line'>220 dev-worker-1.eng.sfdc.net ESMTP Postfix
</span><span class='line'>250 dev-worker-1.eng.sfdc.net
</span><span class='line'>250 2.1.0 Ok
</span><span class='line'>250 2.1.5 Ok
</span><span class='line'>354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
</span><span class='line'>250 2.0.0 Ok: queued as 1EF9E60C34
</span><span class='line'>221 2.0.0 Bye</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>For containerized Jenkins system, mail server can also be configured in same <strong>Manage Jenkins</strong> page, <strong>E-mail Notification</strong> section.
The only difference is the IP/hostname provided to <strong>SMTP server</strong> option.
Instead of providing the known SMTP server&rsquo;s IP and host, one should use the IP of <code>docker0</code>, as explained above.
In the case of many nodes in Kubernetes cluster with different <code>docker0</code> IP, the Docker container of Jenkins master should reside only on one host and <code>docker0</code>&rsquo;s IP on that host should be used.</p>

<h3>References</h3>

<ul>
<li><a href="http://www.nailedtothex.org/roller/kyle/entry/articles-jenkins-email">Standard email setup in Jenkins</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-ubuntu-14-04">Setup Postfix</a></li>
<li><a href="http://docs.blowb.org/setup-host/postfix.html">Configure Postfix for Docker Containers</a></li>
<li><a href="http://satishgandham.com/2016/12/sending-email-from-docker-through-postfix-installed-on-the-host/">More on Postfix for Docker Containers</a></li>
</ul>


<figure class='code'><figcaption><span>postfix version used in this post</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[tdongsi@dev-worker-1 ~]$ postconf -v | grep mail_version
</span><span class='line'>mail_version = 2.10.1</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven and Gradle Builds in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/"/>
    <updated>2017-05-20T23:27:08-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>In this post, we will look into how to securely authenticate with Nexus for Maven and Gradle builds in Jenkins pipelines.
Nexus username and password should NOT be stored in plain text on Jenkins slaves or Docker images.
Instead, those credentials should be passed into Jenkins pipeline using <code>withCredentials</code> step.</p>

<!--more-->


<h3>Maven</h3>

<p>Maven builds in corporates usually use private repositories on Nexus, instead of public ones in Maven Central Repository.
To do that, we usually configure Maven to check Nexus instead of the default, built-in connection to Maven Central.
These configurations is stored in <em>~/.m2/settings.xml</em> file.</p>

<p>For authentication with Nexus and for deployment, we must <a href="https://books.sonatype.com/nexus-book/reference/_adding_credentials_to_your_maven_settings.html">provide credentials accordingly</a>.
We usually add the credentials into our Maven Settings in <em>settings.xml</em> file.</p>

<figure class='code'><figcaption><span>Example Credentials in settings.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;settings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;server&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>nexus<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>deployment<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>      <span class="nt">&lt;password&gt;</span>deployment123<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/server&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servers&gt;</span>
</span><span class='line'><span class="nt">&lt;/settings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, for automated build and deployment in Jenkins pipelines, it is not safe to store credentials in plain text files.
Instead, one should store Nexus credentials as <a href="https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin">secrets in Jenkins</a> and pass them into Jenkinsfile using their IDs (<code>credentialsId</code>).
See <a href="https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs">this article</a> for the full picture of related plugins used for storing and passing secrets in Jenkins.</p>

<figure class='code'><figcaption><span>Nexus authentication for Maven in Jenkinsfile.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="n">withCredentials</span><span class="o">([</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withEnv</span><span class="o">([</span>
</span><span class='line'>      <span class="s1">&#39;nexusPublic=https://nexus.example.com/nexus/content/groups/public/&#39;</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">def</span> <span class="n">xmlTemplate</span> <span class="o">=</span> <span class="n">readFile</span> <span class="n">templateFile</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="n">transformXml</span><span class="o">(</span><span class="n">xmlTemplate</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUsername</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">String</span> <span class="n">tempFile</span> <span class="o">=</span> <span class="s1">&#39;temp.xml&#39;</span>
</span><span class='line'>      <span class="n">writeFile</span> <span class="nl">file:</span> <span class="n">tempFile</span><span class="o">,</span> <span class="nl">text:</span> <span class="n">xmlFile</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">sh</span> <span class="s2">&quot;mvn -B clean build -s ${tempFile}&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://jenkins.io/doc/pipeline/steps/credentials-binding/">step <code>withCredentials</code></a> will not only provide a secure way of injecting secrets (e.g., Nexus credentials) into Jenkins pipeline, but also scrub away such sensitive information if we happen to print them out in log files.
<code>transformXml</code> is my Groovy function that generates the <code>settings.xml</code> from the redacted Maven settings.xml template (no credentials) and the provided Nexus credentials.</p>

<h4>Maven 3.0</h4>

<p>Since <strong>Maven 3.0</strong>, the above problem is made much easier since environment variables can be referred inside <code>settings.xml</code> file by using special expression <code>${env.VAR_NAME}</code>, based on <a href="https://maven.apache.org/settings.html">this doc</a>.
Nexus authentication for Maven 3.0 in Jenkins pipeline can be done as follows:</p>

<figure class='code'><figcaption><span>settings.xml in Maven 3.0</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;settings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;server&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>nexus<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;username&gt;</span>${env.MVN_SETTINGS_nexusUsername}<span class="nt">&lt;/username&gt;</span>
</span><span class='line'>      <span class="nt">&lt;password&gt;</span>${env.MVN_SETTINGS_nexusPassword}<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/server&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servers&gt;</span>
</span><span class='line'><span class="nt">&lt;/settings&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Passing Nexus credentials for Maven 3.0 in Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="n">withCredentials</span><span class="o">([</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;MVN_SETTINGS_nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;MVN_SETTINGS_nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withEnv</span><span class="o">([</span>
</span><span class='line'>      <span class="s1">&#39;nexusPublic=https://nexus.example.com/nexus/content/groups/public/&#39;</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">sh</span> <span class="s1">&#39;mvn -s settings.xml clean build&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, note that it is still tricky even in Maven 3.0 since this is not always applicable, as noted in <a href="https://maven.apache.org/settings.html">the same doc</a>.</p>

<blockquote><p>Note that properties defined in profiles within the settings.xml cannot be used for interpolation.</p></blockquote>


<h3>Gradle</h3>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<figure class='code'><figcaption><span>Example build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>            <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">nexusUsername</span><span class="o">=</span><span class="s">myUsername</span>
</span><span class='line'><span class="na">nexusPassword</span><span class="o">=</span><span class="s">password123</span>
</span><span class='line'><span class="na">nexusPublic</span><span class="o">=</span><span class="s">https://nexus.example.com/nexus/content/groups/public/</span>
</span></code></pre></td></tr></table></div></figure>


<p>The default location of the <code>gradle.properties</code> file is <code>~/.gradle</code>.
This is due to the environment variable <code>GRADLE_USER_HOME</code> usually set to <code>~/.gradle</code>.
For custom location of <code>gradle.properties</code> (i.e., other than <code>~/.gradle</code>), ensure that the variable <code>GRADLE_USER_HOME</code> is set accordingly.</p>

<p>However, similar to Maven, for Jenkins pipeline automation, it is not safe to store credentials in plain text file <code>gradle.properties</code>, no matter how &ldquo;hidden&rdquo; its location is.
For that purpose, you should use the following Groovy code:</p>

<figure class='code'><figcaption><span>Nexus authentication for Gradle in Jenkinsfile.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="n">withCredentials</span><span class="o">([</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withEnv</span><span class="o">([</span>
</span><span class='line'>      <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusPublic=https://nexus.example.com/nexus/content/groups/public/&#39;</span><span class="o">,</span>
</span><span class='line'>      <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusReleases=https://nexus.example.com/nexus/content/repositories/releases&#39;</span><span class="o">,</span>
</span><span class='line'>      <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusSnapshots=https://nexus.example.com/nexus/content/repositories/snapshots&#39;</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">sh</span> <span class="s1">&#39;./gradlew jenkinsBuild&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that, in Gradle, the solution is much simpler because Gradle respects properies set through environment variales.
Based on <a href="https://docs.gradle.org/current/userguide/build_environment.html">its doc</a>, if the environment variable name looks like <strong><em>ORG_GRADLE_PROJECT_prop=somevalue</em></strong>, then Gradle will set a <code>prop</code> property on your project object, with the value of <code>somevalue</code>.
Therefore, in <code>withCredentials</code> step, we specifically bind the secrets <code>nexusUsername</code> and <code>nexusPassword</code> to the environment variables <em>ORG_GRADLE_PROJECT_nexusUsername</em> and <em>ORG_GRADLE_PROJECT_nexusPassword</em> and not some arbitrary variable names.
These environment variables should match the ones used in <code>builde.gradle</code> and, in the following Closure, we simply call the standard Gradle wrapper command <code>./gradlew &lt;target&gt;</code>.
Compared with Maven solution in the last section, there is no intermediate step to generate <code>settings.xml</code> based on the provided secrets.</p>

<h3>More Tips</h3>

<p>If Maven/Gradle build is used in multiple repositories across organization, it is recommended to move the above Groovy code into shared Jenkins library, as shown in <a href="http://tdongsi.github.io/blog/2017/03/17/jenkins-pipeline-shared-libraries/">last post</a>.
For example, the Gradle builds can be simplified by defining <code>useNexus</code> step (see <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/#defining-steps">here</a>) and adding it into the <a href="http://tdongsi.github.io/blog/2017/03/17/jenkins-pipeline-shared-libraries/">shared library <em>workflow-lib</em></a>.</p>

<figure class='code'><figcaption><span>vars/useNexus.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="nf">call</span><span class="o">(</span><span class="n">Closure</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">withCredentials</span><span class="o">([</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withEnv</span><span class="o">([</span>
</span><span class='line'>      <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusPublic=https://nexus.example.com/nexus/content/groups/public/&#39;</span><span class="o">,</span>
</span><span class='line'>      <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusReleases=https://nexus.example.com/nexus/content/repositories/releases&#39;</span><span class="o">,</span>
</span><span class='line'>      <span class="s1">&#39;ORG_GRADLE_PROJECT_nexusSnapshots=https://nexus.example.com/nexus/content/repositories/snapshots&#39;</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">body</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, all the Gradle builds with Nexus authentication in Jenkinsfile will now be reduced to simply this:</p>

<figure class='code'><figcaption><span>Simplified Nexus authentication for Gradle in Jenkinsfile.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">useNexus</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;./gradlew jenkinsBuild&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above, it will reduce lots of redundant codes for Gradle builds, repeated again and again in Jenkinsfiles across multiple repositories in an organizaiton.</p>

<h3>References</h3>

<ul>
<li><a href="https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs">Secrets in Jenkins build jobs</a></li>
<li><a href="https://docs.gradle.org/current/userguide/build_environment.html">Gradle build environment</a></li>
<li><a href="https://stackoverflow.com/questions/12749225/where-to-put-gradle-configuration-i-e-credentials-that-should-not-be-committe">Stackoverflow dicussion</a>: for older versions of Gradle.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes: Kube-router]]></title>
    <link href="http://tdongsi.github.io/blog/2017/05/15/kubernetes-kube-router/"/>
    <updated>2017-05-15T10:52:34-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/05/15/kubernetes-kube-router</id>
    <content type="html"><![CDATA[<p>Kubernetes is one of the <a href="http://www.infoworld.com/article/3118345/cloud-computing/why-kubernetes-is-winning-the-container-war.html">most active open-source project</a> right now.
I&rsquo;m trying to keep up with interesting updates from the Kubernetes community.
This <code>kube-router</code> project is one of them although I&rsquo;ve not get an idea how stable or useful it is.</p>

<blockquote><p>Kube-router is a distributed load balancer, firewall and router for Kubernetes. Kube-router can be configured to provide on each cluster node:<br/>* IPVS/LVS based service proxy on each node for ClusterIP and NodePort service types, providing service discovery and load balancing<br/>* an ingress firewall for the pods running on the node as per the defined Kubernetes network policies using iptables and ipset<br/>* a BGP router to advertise and learn the routes to the pod IP's for cross-node pod-to-pod connectivity</p></blockquote>




<!--more-->


<p>A few notes on related works in Kubernetes community:</p>

<ul>
<li>The most obvious one is <code>kube-proxy</code> service, which is included in the standard Kubernetes installations. This <code>kube-router</code> can be a replacement for <code>kube-proxy</code> in the future.</li>
<li>Another related work is <a href="https://github.com/kubernetes/kubernetes/issues/44063">IPVS-based in-cluster service load balancing</a>.
Huawei presented this work at Kubecon 2016.
IIRC, it is implemented as a flag to kube-proxy and considerable performance improvement was reported.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Docker-out-of-Docker]]></title>
    <link href="http://tdongsi.github.io/blog/2017/04/26/troubleshooting-docker-out-of-docker/"/>
    <updated>2017-04-26T16:24:24-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/04/26/troubleshooting-docker-out-of-docker</id>
    <content type="html"><![CDATA[<p>In this blog post, we are using <a href="http://tdongsi.github.io/blog/2017/04/23/docker-out-of-docker/">&ldquo;Docker out of Docker&rdquo; approach</a> to build Docker images in our containerized Jenkins slaves.
We look into a problem usually encountered in that approach, especially when reusing a Docker image for another Kubernetes cluster.</p>

<!--more-->


<h3>Problem description</h3>

<p>We got the following error when running Docker inside a Jenkins slave container.</p>

<figure class='code'><figcaption><span>Error message when running Docker</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ docker images
</span><span class='line'>Cannot connect to the Docker daemon. Is the docker daemon running on this host?</span></code></pre></td></tr></table></div></figure>


<h3>Discussion</h3>

<p>In summary, for <a href="http://tdongsi.github.io/blog/2017/04/23/docker-out-of-docker/">&ldquo;Docker out of Docker&rdquo; approach</a>, the basic requirements to enable building Docker images in a containerized Jenkins slave is:</p>

<ol>
<li>You&rsquo;ll need to mount &ldquo;/var/run/docker.sock&rdquo; as a volume at &ldquo;/var/run/docker.sock&rdquo;.</li>
<li>Having <code>docker</code> CLI installed in the containerized Jenkins slave.</li>
<li>Make sure &ldquo;/var/run/docker.sock&rdquo; has the right permission inside the Jenkins slave container: readable for the current user (e.g., user <code>jenkins</code>) or in &ldquo;docker&rdquo; group.</li>
</ol>


<p>The direct cause of the above error message &ldquo;Cannot connect to the Docker daemon&rdquo; is that the socket &ldquo;/var/run/docker.sock&rdquo; to <code>docker</code> daemon on that Jenkins slave does not have the right permission for the current user (<code>jenkins</code> in the example).
By convention, the read permission to that Unix domain socket &ldquo;/var/run/docker.sock&rdquo; is given to <code>root</code> user or users in <code>docker</code> group.
The following commands verify that it is not:</p>

<figure class='code'><figcaption><span>Show GID of docker group</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ ls -l /var/run/docker.sock
</span><span class='line'> 
</span><span class='line'>srw-rw----. 1 root 992 0 Mar 14 00:57 /var/run/docker.sock
</span><span class='line'>+ cat /etc/group
</span><span class='line'>...
</span><span class='line'>docker:x:999:jenkins</span></code></pre></td></tr></table></div></figure>


<p>The expected output of the above <code>ls</code> command is as follows:</p>

<figure class='code'><figcaption><span>Expected output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ ls -l /var/run/docker.sock
</span><span class='line'>srw-rw----. 1 root docker 0 Mar 14 00:57 /var/run/docker.sock</span></code></pre></td></tr></table></div></figure>


<p>The root cause of the problem is that the Docker image of Jenkins slave is built inside another Kubernetes cluster (see example Dockerfile below).
The group <code>docker</code> happens to have the group ID 999 on that Kubernetes cluster.</p>

<figure class='code'><figcaption><span>Dockerfile for installing Docker CLI in Jenkins slave</span><a href='http://stackoverflow.com/questions/31466812/access-docker-sock-from-inside-a-container'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM jenkins
</span><span class='line'>
</span><span class='line'>USER root
</span><span class='line'>ENV DEBIAN_FRONTEND=noninteractive
</span><span class='line'>ENV HOME /home/jenkins
</span><span class='line'>ENV DOCKER_VERSION=1.9.1-0~trusty
</span><span class='line'>
</span><span class='line'>RUN apt-get update \
</span><span class='line'>  && apt-get install -y docker-engine=$DOCKER_VERSION \
</span><span class='line'>  && rm -rf /var/lib/apt/lists/*
</span><span class='line'>
</span><span class='line'>RUN usermod -a -G docker jenkins</span></code></pre></td></tr></table></div></figure>


<p>For illustration, the Docker installation steps in Ubuntu are similar:</p>

<figure class='code'><figcaption><span>Installing Docker CLI</span><a href='https://docs.docker.com/engine/installation/linux/linux-postinstall/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Install from Web
</span><span class='line'>sudo curl -sSL https://get.docker.com/ | sh
</span><span class='line'>sudo usermod -aG docker jenkins
</span><span class='line'>
</span><span class='line'># Install from apt
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install -y docker-engine
</span><span class='line'>sudo usermod -aG docker jenkins</span></code></pre></td></tr></table></div></figure>


<p>The last step <code>usermod</code> comes from Docker documentation itself: &ldquo;If you would like to use Docker as a non-root user, you should now consider adding your user to the "docker&rdquo; group".</p>

<h3>Resolving problem</h3>

<p>To resolve the problem, simply entering the Docker image, update its <code>/etc/group</code> file with the correct GID for <code>docker</code> group.
In the example above, the line &ldquo;docker:x:999:jenkins&rdquo; should be updated to &ldquo;docker:x:992:jenkins&rdquo; to make it work.
It&rsquo;s recommended to run <code>docker commit</code> to save the modified container as a new Docker image and push it to Docker registry (similar process in <a href="http://localhost:4000/blog/2017/01/25/docker-root-user-in-a-pod/">this post</a>).</p>

<h3>References</h3>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/dockerd/">dockerd</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker-in-Docker vs Docker-out-of-Docker]]></title>
    <link href="http://tdongsi.github.io/blog/2017/04/23/docker-out-of-docker/"/>
    <updated>2017-04-23T10:42:04-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/04/23/docker-out-of-docker</id>
    <content type="html"><![CDATA[<p>In this post, we look into two different approaches to solving the problem of building/pushing Docker images from a containerized Jenkins system.
From that understanding, we will discuss the pros and cons of each approach in production Continuous Integration (CI) systems and how one should be used in practice.</p>

<!--more-->


<h3>Docker-in-Docker &amp; Docker-out-of-Docker</h3>

<p>Jenkins as a CI system has been increasingly containerized and ran as a Docker container in production.
An example setup is to run Jenkins on top of a Kubernetes cluster with Jenkins slaves are created on demand as containers, using <a href="https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin">Kubernetes plugin</a>.
The problem in this post arises from how to build/run/push the Docker images insides a Jenkins system that run as a Docker container itself.</p>

<p>&ldquo;Docker-in-Docker&rdquo; refers to the approach of installing and running another Docker engine (daemon) inside Docker containers.
Since Docker 0.6, a &ldquo;privileged&rdquo; option is added to allow running containers in a special mode with almost all capabilities of the host machine, including kernel features and devices acccess.
As a consequence, Docker engine, as a privileged application, can run inside a Docker container itself.</p>

<p>&ldquo;Docker-in-Docker&rdquo; is first discussed by Jerome Petazzoni in <a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/">this blog post</a> with example codes.
However, in <a href="https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/">another following blog post</a>, Jerome cautioned against using his &ldquo;dind&rdquo; approach in containerized Jenkins.
He pointed out potential problems with his &ldquo;Docker-in-Docker&rdquo; approach and how to avoid those by simply bind-mounting the Docker socket into the Jenkins container.
The approach of bind-mounting the Docker socket is later referred as &ldquo;Docker-out-of-Docker&rdquo; approach.</p>

<h3>Which one should we use?</h3>

<p>As spelled out clearly by &ldquo;Docker-in-Docker&rdquo; creator Jerome Petazzoni himself, we should not use Docker-in-Docker, especially in containerized Jenkins systems.
Potential problems include 1) security profile of inner Docker will conflict with one of outer Docker 2) Incompatible file systems (e.g. AUFS inside Docker container).</p>

<p>Instead of trying to run Docker engine inside containers, it is advised to just expose the Docker socket to those containers.
This can be done by bind-mounting with the <code>-v</code> flag:</p>

<figure class='code'><figcaption><span>Docker out of Docker</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -v /var/run/docker.sock:/var/run/docker.sock ...</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>By using the above command, we can access the Docker daemon (running on the host machine) from inside the Docker container, and able to start/build/push containers.
The containers that are started inside the Docker container above are effectively &ldquo;sibling&rdquo; containers instead of &ldquo;child&rdquo; containers since the outer and inner containers are all running on the same host machine.
However, it is important to note that this feels like &ldquo;Docker-in-Docker&rdquo; but without any tricky problems associated with this.
And for the purpose of building/running/pushing Docker images in containerized Jenkins systems, this &ldquo;Docker-out-of-Docker&rdquo; is exactly all we need.</p>

<h3>Further discussion</h3>

<p>The potential issues of &ldquo;Docker-in-Docker&rdquo; is extensively discussed by Jerome Petazzoni in his blog post.
However, what&rsquo;s not mentioned is any potential problem of &ldquo;Docker-out-of-Docker&rdquo; approach.</p>

<p>In my opinion, one potential issue of &ldquo;Docker-out-of-Docker&rdquo; approach is one can access the outer Docker container from the inner container through &ldquo;/var/run/docker.sock&rdquo;.
In the context of containerized Jenkins system, the outer Docker container is usually Jenkins master with sensitive information.
The inside Docker containers are usually Jenkins slaves that are subject to running all kinds of code which might be malicious.
This means that a containerized Jenkins system can be easily compromised if there is no limit on what&rsquo;s running in Jenkins slaves.</p>

<p>It should be noted that, despite of problems listed by Jerome, &ldquo;Docker-in-Docker&rdquo; approach is still a possible choice *IF* you know what you are doing.
Conflict of security profiles can be resolved with the right, careful setup.
There are work-arounds for incompatible file systems between the containers.
With the right setup, &ldquo;Docker-in-Docker&rdquo; can provide essentially free build isolation and security, which is a must for many, especially in corporates.
However, the ever-present disadvantage of this apporach is long build time for large Docker images since Docker image cache has to be re-populated every run.
As noted by Jerome, this cache is designed for exclusive access by one single Docker daemon at once.
Trying to link this cache in each container to some common, pre-populated Docker image cache will lead to corrupt image data.</p>

<h3>References</h3>

<ul>
<li><a href="https://blog.docker.com/2013/09/docker-can-now-run-within-docker/">Docker-in-Docker</a></li>
<li><a href="https://github.com/jpetazzo/dind">dind</a></li>
<li><a href="https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/">Docker-out-of-Docker</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Script in Jenkins Pipeline]]></title>
    <link href="http://tdongsi.github.io/blog/2017/04/18/groovy-code-in-jenkins-pipeline/"/>
    <updated>2017-04-18T17:07:44-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/04/18/groovy-code-in-jenkins-pipeline</id>
    <content type="html"><![CDATA[<p>In this post, we look into loading and reusing independent Groovy scripts for more modular and testable Jenkins pipeline.
An example with Scripted Pipeline is provided although it is also applicable to newer Declarative Pipeline with minor modifications.</p>

<!--more-->


<h3>Basic example of Loading Groovy scripts</h3>

<figure class='code'><figcaption><span>script example.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def example1() {
</span><span class='line'>  println 'Hello from example1'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>def example2() {
</span><span class='line'>  println 'Hello from example2'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return this</span></code></pre></td></tr></table></div></figure>


<p>The <code>example.groovy</code> script defines <code>example1</code> and <code>example2</code> functions before ending with <code>return this</code>.
Note that <code>return this</code> is definitely required and one common mistake is to forget ending the Groovy script with it.</p>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">code</span>
</span><span class='line'>
</span><span class='line'><span class="nf">node</span><span class="o">(</span><span class="s1">&#39;java-agent&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Checkout&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Load&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">load</span> <span class="s1">&#39;example.groovy&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Execute&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">code</span><span class="o">.</span><span class="na">example1</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">code</span><span class="o">.</span><span class="na">example2</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Jenkinsfile, simply use <a href="https://jenkins.io/doc/pipeline/steps/workflow-cps/#load-evaluate-a-groovy-source-file-into-the-pipeline-script"><code>load</code> step</a> to load the Groovy script.
After the Groovy script is loaded, the functions insides can be used where it can be referenced, as shown above.</p>

<h3>Demo: Processing Github JSON from Groovy</h3>

<p>In this demo, we first show how to process JSON response from Github API in Groovy.</p>

<figure class='code'><figcaption><span>Processing JSON from Github</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getenv</span><span class="o">(</span><span class="s1">&#39;GITHUB_USERNAME&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getenv</span><span class="o">(</span><span class="s1">&#39;GITHUB_PASSWORD&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">GITHUB_API</span> <span class="o">=</span> <span class="s1">&#39;https://api.github.com/repos&#39;</span>
</span><span class='line'><span class="n">String</span> <span class="n">repo</span> <span class="o">=</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'><span class="n">String</span> <span class="n">PR_ID</span> <span class="o">=</span> <span class="s1">&#39;2&#39;</span> <span class="c1">// Pull request ID</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;${GITHUB_API}/${username}/${repo}/pulls/${PR_ID}&quot;</span>
</span><span class='line'><span class="n">println</span> <span class="s2">&quot;Querying ${url}&quot;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">text</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">getText</span><span class="o">(</span><span class="nl">requestProperties:</span> <span class="o">[</span><span class="s1">&#39;Authorization&#39;</span><span class="o">:</span> <span class="s2">&quot;token ${password}&quot;</span><span class="o">])</span>
</span><span class='line'><span class="kt">def</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bodyText</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="na">body</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Check if Pull Request body has certain text</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="n">bodyText</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="s1">&#39;Safari&#39;</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;Found Safari user&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The equivalent bash command for retrieving JSON response from Github API is as follows:</p>

<figure class='code'><figcaption><span>Equivalent bash command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Groovy formatted string
</span><span class='line'>String cmd = "curl -s -H \"Authorization: token ${password}\" ${url}"
</span><span class='line'>
</span><span class='line'>// Example
</span><span class='line'>String example = 'curl -s -H "Authorization: token XXX" https://api.github.com/repos/tdongsi/groovy/pulls/2'</span></code></pre></td></tr></table></div></figure>


<h3>Processing Github JSON from Jenkinsfile</h3>

<p>Continuing the demo from the last section, we now put the Groovy code into a callable function in a script called &ldquo;github.groovy&rdquo;.
Then, in our Jenkinsfile, we proceed to load the script and use the function to process JSON response from Github API.</p>

<figure class='code'><figcaption><span>github.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.json.JsonSlurper</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">getPrBody</span><span class="o">(</span><span class="n">String</span> <span class="n">githubUsername</span><span class="o">,</span> <span class="n">String</span> <span class="n">githubToken</span><span class="o">,</span> <span class="n">String</span> <span class="n">repo</span><span class="o">,</span> <span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">GITHUB_API</span> <span class="o">=</span> <span class="s1">&#39;https://api.github.com/repos&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;${GITHUB_API}/${githubUsername}/${repo}/pulls/${id}&quot;</span>
</span><span class='line'>  <span class="n">println</span> <span class="s2">&quot;Querying ${url}&quot;</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">text</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">getText</span><span class="o">(</span><span class="nl">requestProperties:</span> <span class="o">[</span><span class="s1">&#39;Authorization&#39;</span><span class="o">:</span> <span class="s2">&quot;token ${githubToken}&quot;</span><span class="o">])</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">bodyText</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="na">body</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">bodyText</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">this</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">code</span>
</span><span class='line'>
</span><span class='line'><span class="nf">node</span><span class="o">(</span><span class="s1">&#39;java-agent&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Checkout&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Load&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">load</span> <span class="s1">&#39;github.groovy&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Execute&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withCredentials</span><span class="o">([</span>
</span><span class='line'>      <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;UsernamePasswordMultiBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;githubCredentials&#39;</span><span class="o">,</span>
</span><span class='line'>      <span class="nl">passwordVariable:</span> <span class="s1">&#39;GITHUB_PASSWORD&#39;</span><span class="o">,</span> <span class="nl">usernameVariable:</span> <span class="s1">&#39;GITHUB_USERNAME&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">bodyText</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="na">getPrBody</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">GITHUB_USERNAME</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">GITHUB_PASSWORD</span><span class="o">,</span>
</span><span class='line'>                                    <span class="s1">&#39;Groovy4Jenkins&#39;</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">CHANGE_ID</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span> <span class="n">bodyText</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Troubleshooting tips</h3>

<p>When loading and running Groovy scripts, you might find yourself running to RejectedAccessException errors.
In those cases, usually it can be resolved by manually approving some method signatures in <strong>Jenkins > Manage Jenkins > In-process Script Approval</strong> page.
Adminstrators privilege is required for doing so.</p>

<p>More troubleshooting information is listed in this <a href="http://tdongsi.github.io/blog/2017/06/16/troubleshooting-groovy-scripts-in-jenkinsfile/">blog post</a>.</p>

<h3>Reference</h3>

<ul>
<li><a href="https://github.com/jenkinsci/pipeline-examples/tree/master/pipeline-examples/load-from-file">JenkinsCI example</a></li>
<li><a href="https://jenkins.io/doc/pipeline/steps/workflow-cps/#load-evaluate-a-groovy-source-file-into-the-pipeline-script"><code>load</code> step</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Pipeline Shared Libraries]]></title>
    <link href="http://tdongsi.github.io/blog/2017/03/17/jenkins-pipeline-shared-libraries/"/>
    <updated>2017-03-17T15:38:14-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/03/17/jenkins-pipeline-shared-libraries</id>
    <content type="html"><![CDATA[<p>When you have multiple Pipeline jobs, you often want to share some parts of the Jenkinsfiles between them to keep Jenkinfiles <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>.
A very common use case is that you have many projects that are built in the similar way, such as Nexus authentication step in Gradle build.
One way is to use <a href="https://github.com/jenkinsci/workflow-cps-global-lib-plugin">Workflow plugin</a>.
Comprehensive user documentation can be found in <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/">this section</a> of Jenkins handbook.</p>

<p>In the following sections, we review a couple <strong>older</strong>, but not necessarily worse, ways of updating shared Groovy code which are still used in some Jenkins system.</p>

<!--more-->


<h3>Simple copying</h3>

<p>A quick and dirty way of updating shared Groovy codes in Jenkinsfile is to overwrite Groovy files on Jenkins in its <code>$JENKINS_HOME</code>.
All such Groovy files are stored in <em>$JENKINS_HOME/workflow-libs</em> folder, following this directory structure:</p>

<figure class='code'><figcaption><span>Directory structure of a Shared Library repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(root)
</span><span class='line'>+- src                     # Groovy source files
</span><span class='line'>|   +- org
</span><span class='line'>|       +- foo
</span><span class='line'>|           +- Bar.groovy  # for org.foo.Bar class
</span><span class='line'>+- vars
</span><span class='line'>|   +- foo.groovy          # for global 'foo' variable
</span><span class='line'>|   +- foo.txt             # help for 'foo' variable
</span><span class='line'>+- resources               # resource files (external libraries only)
</span><span class='line'>|   +- org
</span><span class='line'>|       +- foo
</span><span class='line'>|           +- bar.json    # static helper data for org.foo.Bar</span></code></pre></td></tr></table></div></figure>


<p>By manually modifying the Groovy files (e.g., <em>vars/foo.groovy</em>) and restarting Jenkins, you can update their behaviors accordingly.
This method is dirty and definitely bad since it requires a Jenkins restart and modifications to Groovy codes are not tracked (and code-reviewed) anywhere.</p>

<h3>Git-based update</h3>

<p>A more scalable alternative for updating Groovy codes is to use <code>git push</code>, exposed by Jenkins.</p>

<p>As a side note, this method is no longer mentioned in documentation, as of March 2017.
In fact, you have to look into a <a href="https://github.com/jenkinsci/workflow-cps-global-lib-plugin/tree/ce1177278d4cb05ac6b01f723177cc4b2e0aec8d">very old commit</a>
or <a href="https://github.com/cloudbees/workflow-plugin/tree/master/cps-global-lib">outdated, unofficial fork</a> to find this method briefly mentioned at all.
It is also occasionally mentioned in support articles such as <a href="https://support.cloudbees.com/hc/en-us/articles/218162277-Unable-to-Clone-workflowLibs">this</a>.</p>

<p>In this method, the directory <em>$JENKINS_HOME/workflow-libs</em> is exposed by Jenkins as a Git repository.
You can deploy new changes to this directory through <code>git push</code> and any such event will trigger Jenkins to recompile Groovy files.
There is no Jenkins restart required for this method, which makes it much more suitable for production Jenkins.
The Git repository is exposed in two endpoints:</p>

<ul>
<li><a href="http://server/jenkins/workflowLibs.git">http://server/jenkins/workflowLibs.git</a> (when your Jenkins is <code>http://server/jenkins/</code>).</li>
<li>ssh://USERNAME@server:PORT/workflowLibs.git (when Jenkins acts as <a href="https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+SSH">an SSH server</a>)</li>
</ul>


<p>This method also means that the shared Jenkins library scripts in Groovy are stored in another Git repository (e.g., &ldquo;shared-lib&rdquo; on Github) and only <code>git push</code> to the <code>workflowLibs.git</code> repository in the event of deployment.
Having the shared scripts in Git allows you to track changes, perform tested deployments, and reuse the same shared library across a large number of instances.</p>

<h4>Jenkinsfile to update global library</h4>

<p>In this Git-based update approach, all Groovy files should be in some Git repository (e.g., &ldquo;shared-lib&rdquo;) with certain directory structure (shown in the last section).
Since Jenkinsfile has been extensively used for creating CI/CD pipelines, it is only appropriate to add a Jenkinsfile for deploying Groovy files in this Git repository to update Jenkins.
The Jenkinsfile for such workflow-libs should be as follows:</p>

<figure class='code'><figcaption><span>Jenkinsfile for deployment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  stage 'Checkout'
</span><span class='line'>  checkout scm
</span><span class='line'>
</span><span class='line'>  if (env.BRANCH_NAME == 'master') {
</span><span class='line'>    stage 'Update'
</span><span class='line'>    println "Updating Jenkins workflow-libs"
</span><span class='line'>    sshagent(['jenkins_ssh_key']) {
</span><span class='line'>      sh """
</span><span class='line'>         git branch master
</span><span class='line'>         git checkout master
</span><span class='line'>         ssh-keyscan -H -p 12222 \${JENKINS_ADDR} &gt;&gt; ~/.ssh/known_hosts
</span><span class='line'>         git remote add jenkins ssh://tdongsi@\${JENKINS_ADDR}:12222/workflowLibs.git
</span><span class='line'>         git push --force jenkins master
</span><span class='line'>      """
</span><span class='line'>    }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Some comments on this Jenkinsfile:</p>

<ul>
<li><code>sshagent(['jenkins_ssh_key'])</code> indicates that the current node/slave is known as <a href="https://wiki.jenkins-ci.org/display/JENKINS/SSH+Agent+Plugin">an SSH agent</a> to Jenkins master, using Jenkins credentials with ID <code>jenkins_ssh_key</code>.</li>
<li><code>git remote add</code> uses the currently checked out Git repo and branch as a remote branch (named &ldquo;jenkins&rdquo;) to the <code>workflowLibs</code> repository.</li>
<li>The <code>workflowLibs</code> repository is managed by Jenkins, exposed at that location <em>ssh://tdongsi@\${JENKINS_ADDR}:12222/workflowLibs.git</em>.</li>
<li>Then we force push any new changes to the Git repository on Jenkins.</li>
</ul>


<p>After the push, the Git repository <code>workflowLibs</code> on Jenkins should have latest change, same as the current &ldquo;shared-lib&rdquo; repository.
Upon a <code>git push</code> event, the Jenkins will automatically update its global library with the latest changes, without the need of restarting.
Note that for this SSH push to work, a public-private key pair must be generated and configured accordingly.</p>

<figure class='code'><figcaption><span>Key pair generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:jenkins tdongsi$ kubectl --namespace=jenkins exec -ti jenkins-ideb4 -- bash
</span><span class='line'>
</span><span class='line'>jenkins@jenkins-4076880321-ideb4:~$ ssh-keygen -t rsa -b 4096 -C "example@gmail.com"
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter file in which to save the key (/var/jenkins_home/.ssh/id_rsa):
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:</span></code></pre></td></tr></table></div></figure>


<p>The generated public key should be added to the user via <em>jenkinsurl.com/user/tdongsi/configure</em> URL and private key should be added to the credentials ID <code>jenkins_ssh_key</code>.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/cloudbees/workflow-plugin/tree/master/cps-global-lib">Git-based update</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker: Files Not Found in Docker Container]]></title>
    <link href="http://tdongsi.github.io/blog/2017/02/21/docker-files-not-found-in-docker-container/"/>
    <updated>2017-02-21T15:14:43-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/02/21/docker-files-not-found-in-docker-container</id>
    <content type="html"><![CDATA[<p>In this post, we look into a perplexing issue that happens often when we try to extend an offical image.
In summary, there is currently no way to add additional content into <code>VOLUME</code> directory in a trivial way.
If you unknowingly adds files into a folder that has been used as a <code>VOLUME</code> mount point in a Docker image or one of its base images, the files cannot be found for seemingly no reason.</p>

<!--more-->


<h3>Problem description</h3>

<p>Let&rsquo;s say we created the following Dockerfile for container, extending on top of a base Docker image:</p>

<figure class='code'><figcaption><span>Dockerfile of the extended image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM docker.registry.company.net/base
</span><span class='line'>MAINTAINER myemail@company.net
</span><span class='line'>
</span><span class='line'>RUN ssh-keyscan -H github.company.net &gt;&gt; /home/jenkins/.ssh/known_hosts
</span><span class='line'>
</span><span class='line'>RUN mkdir -p /home/jenkins/.m2 /home/jenkins/store
</span><span class='line'>COPY settings.xml /home/jenkins/.m2/settings.xml
</span><span class='line'>
</span><span class='line'>RUN openssl s_client -connect nexus.company.net:443 &lt; /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; /home/jenkins/public.crt \
</span><span class='line'>    && /opt/jdk-latest/jre/bin/keytool -import -noprompt -storepass change_this -alias nexus.company.net -keystore /home/jenkins/cacerts -file /home/jenkins/public.crt</span></code></pre></td></tr></table></div></figure>


<p>When we try to build the above image with <code>docker build</code>, we should expect several files dropped into the home <code>/home/jenkins</code> folder.
In fact, we can add several <code>echo</code> commands into the above Dockerfile to verify in the build log that the files are actually created.
However, when we start running a container from this new Docker image using <code>docker run</code>, the files simply don&rsquo;t exist in <code>/home/jenkins</code>.</p>

<p>This was very perplexing at first.
Struggling with different options of rebuilding (<code>docker build</code>) and re-running (<code>docker run</code>) gives no different outcomes.
It eventually turns out that <code>/home/jenkins</code> is mounted as a volume in the <code>base</code> image or one of its base images.
If you have access to the base images' Dockerfiles, you should expect to find the following lines in one of the base Dockerfiles:</p>

<figure class='code'><figcaption><span>Base Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>VOLUME /home/jenkins
</span><span class='line'>WORKDIR /home/jenkins
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Otherwise, you can verify with the following <code>docker inspect</code> command when the Docker container is still running:</p>

<figure class='code'><figcaption><span>Show Volumes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:docker tdongsi$ docker inspect --format { {.Config.Volumes} } 683bb8ce246a
</span><span class='line'>map[/home/jenkins:{}]</span></code></pre></td></tr></table></div></figure>


<p>This problem is already seen and reported in <a href="https://github.com/docker/docker/issues/3639">this issue</a>.
There have been suggestions that <code>VOLUME</code> directive in Dockerfile is a mistake.
It should be an option/directive when running <code>docker run</code>, not when building images.</p>

<h3>Resolving problem</h3>

<p>The above problem can be resolved by simply adding files into another path that has NOT been used as VOLUME.
If the specific <code>VOLUME</code>ed path (<code>/home/path</code> in the example) must be used, you can also use <code>docker copy</code> to add files into a running container (see <a href="http://tdongsi.github.io/blog/2017/02/09/docker-copy-file-into-a-container/">last post</a>).</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/docker/docker/issues/3639">Reported issue</a></li>
<li><a href="http://l33t.peopleperhour.com/2015/02/18/docker-extending-official-images/">Work around</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker: Copy File Into a Container]]></title>
    <link href="http://tdongsi.github.io/blog/2017/02/09/docker-copy-file-into-a-container/"/>
    <updated>2017-02-09T15:17:19-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/02/09/docker-copy-file-into-a-container</id>
    <content type="html"><![CDATA[<p>In this blog post, we have a running Docker container or a running pod in Kubernetes cluster.
We want to add some files into the running containers to fix some issue, verify, and commit the changes.</p>

<!--more-->


<h3>Best-case scenario: <code>docker cp</code></h3>

<p>The most obvious way is to create a Dockerfile and rebuild the Docker image.
The Dockerfile will look like this:</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM olderImage
</span><span class='line'>ADD myfile /path/myfile
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>However, in this approach, we need to stop the Docker containers, update, and re-run with the new Docker images.
It does not work if we want to work with <strong><em>running</em></strong> containers.
For running containers, the better way to add files into containers is to copy files into containers.
For the more updated versions of Docker (1.8+), the recommended way for copying is to use <a href="https://docs.docker.com/engine/reference/commandline/cp/"><code>docker cp</code> command</a>.</p>

<h3>Copy file directly</h3>

<p><code>docker cp</code> does not always work, especially in older versions of Docker.
In older versions of Docker, the <code>docker cp</code> command only allowed copying files from a <strong>container</strong> to the <strong>host</strong>.
Only since Docker 1.8, copying files from the host to a container is added.
You will get some error with unhelpful messages like this in older versions of Docker:</p>

<figure class='code'><figcaption><span>Unsupported "docker cp"</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@comp ~]$ ls maven_3.3.9-3_all.deb
</span><span class='line'>maven_3.3.9-3_all.deb
</span><span class='line'>
</span><span class='line'>[centos@comp ~]$ sudo docker cp maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins
</span><span class='line'>FATA[0000] Error: Path not specified
</span><span class='line'>[centos@comp ~]$ sudo docker cp ./maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins
</span><span class='line'>FATA[0000] Error: Path not specified
</span><span class='line'>[centos@comp ~]$ sudo docker cp ./maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins/
</span><span class='line'>FATA[0000] Error: Path not specified
</span><span class='line'>[centos@comp ~]$ sudo docker cp maven_3.3.9-3_all.deb 9a8d782156ca:/home/jenkins/maven_3.3.9-3_all.deb
</span><span class='line'>FATA[0000] Error: Path not specified</span></code></pre></td></tr></table></div></figure>


<p>If you find yourself stuck with older versions of Docker, the alternative is to manually copy the files from hosts filesystem to containers filesystem location.
First, you need to determine where the containers filesystem (volume) is mounted on the host:</p>

<figure class='code'><figcaption><span>Using inspect to find Volume location</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@comp ~]$ sudo docker ps
</span><span class='line'>CONTAINER ID      IMAGE    COMMAND ...
</span><span class='line'>9a8d782156ca
</span><span class='line'>
</span><span class='line'>[centos@comp ~]$ sudo docker inspect -f { {.Id} } 9a8d782156ca
</span><span class='line'>9a8d782156ca9a3bd59545a18943de408ca58f42c4389c12e9bb43f4ad239d52
</span><span class='line'>
</span><span class='line'>[centos@comp ~]$ sudo docker inspect -f { {.Volumes} } 9a8d782156ca
</span><span class='line'>map[/home/jenkins:/var/lib/docker/vfs/dir/b051cc2b086c53ce436ad82b9332ba79687f3ddcf8ee77e3f8264e7cafe32438]
</span><span class='line'>[centos@comp ~]$ sudo ls /var/lib/docker/vfs/dir/b051cc2b086c53ce436ad82b9332ba79687f3ddcf8ee77e3f8264e7cafe32438
</span><span class='line'>test.txt</span></code></pre></td></tr></table></div></figure>


<p>NOTE: In the shell commands above, there is no space between <code>{</code> (space is added for Jekyll blog engine).
After the mounting path is determined, you can manipulate the container'ss filesystem directly, including copying files into it.</p>

<figure class='code'><figcaption><span>Directly copy file into containers filesystem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@comp ~]$ sudo cp maven_3.3.9-3_all.deb /var/lib/docker/vfs/dir/b051cc2b086c53ce436ad82b9332ba79687f3ddcf8ee77e3f8264e7cafe32438</span></code></pre></td></tr></table></div></figure>


<p>You can verify such manipulation by <code>docker exec</code>-ing into the container and verify the files:</p>

<figure class='code'><figcaption><span>Before and After</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jenkins@9a8d782156ca:~$ ls
</span><span class='line'>test.txt
</span><span class='line'>
</span><span class='line'>jenkins@9a8d782156ca:~$ ls
</span><span class='line'>maven_3.3.9-3_all.deb  test.txt</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/cp/">docker cp</a></li>
<li><a href="http://stackoverflow.com/questions/22907231/copying-files-from-host-to-docker-container">Stackoverflow discussion</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker: Override ENTRYPOINT]]></title>
    <link href="http://tdongsi.github.io/blog/2017/02/08/docker-override-entrypoint/"/>
    <updated>2017-02-08T16:08:02-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/02/08/docker-override-entrypoint</id>
    <content type="html"><![CDATA[<p>In this entry, we go over common mistakes when we try to override <code>ENTRYPOINT</code> in a Docker image and how to do it properly.</p>

<!--more-->


<h3>Problem description</h3>

<p>The docker image for JNLP-based Jenkins agent requires us to pass a few arguments.
Simply running such docker image will give the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:jenkins tdongsi$ docker run --restart=always gcr.io/jenkins-agent:2.60
</span><span class='line'>two arguments required, but got []
</span><span class='line'>java -jar slave.jar [options...] &lt;secret key&gt; &lt;slave name&gt;
</span><span class='line'> -cert VAL                       : Specify additional X.509 encoded PEM
</span><span class='line'>                                   certificates to trust when connecting to
</span><span class='line'>                                   Jenkins root URLs. If starting with @ then
</span><span class='line'>                                   the remainder is assumed to be the name of
</span><span class='line'>                                   the certificate file to read.
</span><span class='line'> -credentials USER:PASSWORD      : HTTP BASIC AUTH header to pass in for making
</span><span class='line'>                                   HTTP requests.
</span><span class='line'> -headless                       : Run in headless mode, without GUI
</span><span class='line'> -jar-cache DIR                  : Cache directory that stores jar files sent
</span><span class='line'>                                   from the master
</span><span class='line'> -noreconnect                    : If the connection ends, don't retry and just
</span><span class='line'>                                   exit.
</span><span class='line'> -proxyCredentials USER:PASSWORD : HTTP BASIC AUTH header to pass in for making
</span><span class='line'>                                   HTTP authenticated proxy requests.
</span><span class='line'> -tunnel HOST:PORT               : Connect to the specified host and port,
</span><span class='line'>                                   instead of connecting directly to Jenkins.
</span><span class='line'>                                   Useful when connection to Hudson needs to be
</span><span class='line'>                                   tunneled. Can be also HOST: or :PORT, in
</span><span class='line'>                                   which case the missing portion will be
</span><span class='line'>                                   auto-configured like the default behavior
</span><span class='line'> -url URL                        : Specify the Jenkins root URLs to connect to.</span></code></pre></td></tr></table></div></figure>


<p>Most of the error messages above is from Jenkins binary <code>slave.jar</code> and has nothing to do with Docker.
To make the container run on Docker, we must override its <code>ENTRYPOINT</code> at runtime to provide the arguments required.
However, one common mistake while trying to override is as follows:</p>

<figure class='code'><figcaption><span>Standard mistake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:jenkins tdongsi$ docker run --restart=always gcr.io/jenkins-agent:2.60 \
</span><span class='line'>--entrypoint java -jar /usr/share/jenkins/slave.jar
</span><span class='line'>"--entrypoint" is not a valid option</span></code></pre></td></tr></table></div></figure>


<p>Except for passing argument to the <code>ENTRYPOINT</code>, the Docker image is usually the last parameter.
Another attempt to make it &ldquo;right&rdquo; is as follows:</p>

<figure class='code'><figcaption><span>Another attempt, still not working</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:jenkins tdongsi$ docker run --restart=always \
</span><span class='line'>--entrypoint="java -jar /usr/share/jenkins/slave.jar" gcr.io/jenkins-agent:2.60
</span><span class='line'>
</span><span class='line'>container_linux.go:247: starting container process caused "exec: \"java -jar /usr/share/jenkins/slave.jar\": 
</span><span class='line'>stat java -jar /usr/share/jenkins/slave.jar: no such file or directory"
</span><span class='line'>docker: Error response from daemon: oci runtime error: container_linux.go:247: starting container process 
</span><span class='line'>caused "exec: \"java -jar /usr/share/jenkins/slave.jar\": stat java -jar /usr/share/jenkins/slave.jar: no such
</span><span class='line'> file or directory".
</span><span class='line'>ERRO[0001] error getting events from daemon: net/http: request canceled</span></code></pre></td></tr></table></div></figure>


<p>This attempt try to put the entire overridden command as the parameter for &ldquo;&ndash;entrypoint&rdquo; flag.
However, this does NOT work because, as stated in documentation, the entrypoint should specify the <strong>executable</strong>, not the command.
The correct way to do it is as follows:</p>

<figure class='code'><figcaption><span>Another attempt, still not working</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:jenkins tdongsi$ docker run --restart=always --entrypoint="java" \
</span><span class='line'>gcr.io/jenkins-agent:2.60 -jar /usr/share/jenkins/slave.jar \
</span><span class='line'>-jnlpUrl http://10.252.78.115/computer/slave/slave-agent.jnlp
</span><span class='line'>
</span><span class='line'>Failing to obtain http://10.252.78.115/computer/slave/slave-agent.jnlp
</span><span class='line'>java.net.ConnectException: Connection refused
</span><span class='line'>  at java.net.PlainSocketImpl.socketConnect(Native Method)</span></code></pre></td></tr></table></div></figure>


<p>As seeen above, the executable is passed into &ldquo;&ndash;entrypoint&rdquo; flag, while its arguments are being passed <strong>after</strong> the image name.</p>

<h3>Reference</h3>

<ul>
<li><a href="https://docs.docker.com/engine/reference/run/">Guide of Docker Run</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/run/">Docker Run CLI options</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker: Root User in a Pod]]></title>
    <link href="http://tdongsi.github.io/blog/2017/01/25/docker-root-user-in-a-pod/"/>
    <updated>2017-01-25T18:22:51-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/01/25/docker-root-user-in-a-pod</id>
    <content type="html"><![CDATA[<p>In the following scenario, we have some pod running in Kubernetes cluster.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-mac:kubernetes tdongsi$ kubectl --kubeconfig kubeconfig describe pod jenkins
</span><span class='line'>Name:             jenkins
</span><span class='line'>Namespace:            default
</span><span class='line'>Image(s):         docker.registry.company.net/tdongsi/jenkins:2.23
</span><span class='line'>Node:             kube-worker-1/10.252.158.72
</span><span class='line'>Start Time:           Tue, 24 Jan 2017 16:57:47 -0800
</span><span class='line'>Labels:               name=jenkins
</span><span class='line'>Status:               Running
</span><span class='line'>Reason:
</span><span class='line'>Message:
</span><span class='line'>IP:               172.17.27.3
</span><span class='line'>Replication Controllers:  &lt;none&gt;
</span><span class='line'>Containers:
</span><span class='line'>  jenkins:
</span><span class='line'>    Container ID: docker://943d6e55038804c8
</span><span class='line'>    Image:        docker.registry.company.net/tdongsi/jenkins:2.23
</span><span class='line'>    Image ID:     docker://242c1836544e5ca31616
</span><span class='line'>    State:        Running
</span><span class='line'>      Started:        Tue, 24 Jan 2017 16:57:48 -0800
</span><span class='line'>    Ready:        True
</span><span class='line'>    Restart Count:    0
</span><span class='line'>    Environment Variables:
</span><span class='line'>Conditions:
</span><span class='line'>  Type        Status
</span><span class='line'>  Ready   True
</span><span class='line'>Volumes:
</span><span class='line'>  jenkins-data:
</span><span class='line'>    Type: HostPath (bare host directory volume)
</span><span class='line'>    Path: /jdata
</span><span class='line'>No events. </span></code></pre></td></tr></table></div></figure>


<p>For troubleshooting purposes, we sometimes need to enter the container or execute some commands with root privilege.
Sometimes, we simply cannot <code>sudo</code> or have the root password.</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jenkins@jenkins:~$ sudo ls /etc/hosts
</span><span class='line'>[sudo] password for jenkins:
</span><span class='line'>Sorry, try again.</span></code></pre></td></tr></table></div></figure>


<p>Modifying the Docker image to set root password (e.g., by editing <code>Dockerfile</code> and rebuild) is sometimes not an option,
such as when the Docker image is downloaded from another source and read-only.
Moreover, if the container is running in production, we don&rsquo;t want to stop the container while troubleshooting some temporary issues.</p>

<h3><code>nsenter</code> approach</h3>

<p>I found one way to enter a &ldquo;live&rdquo; container as root by using <code>nsenter</code>.
In summary, we find the process ID of the target container and provide it to <code>nsenter</code> as an argument.
In the case of a Kuberentes cluster, we need to find which Kubernetes slave the pod is running on and log into it to execute the following <code>docker</code> commands.</p>

<figure class='code'><figcaption><span>Finding running container ID and name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@kube-worker-1 ~]$ sudo docker ps
</span><span class='line'>CONTAINER ID        IMAGE                                              COMMAND                CREATED             STATUS              PORTS               NAMES
</span><span class='line'>943d6e5a3bb8        docker.registry.company.net/tdongsi/jenkins:2.23   "/usr/local/bin/tini   25 hours ago        Up 25 hours                             k8s_jenkins.6e7c865_...
</span><span class='line'>fadfc479f24e        gcr.io/google_containers/pause:0.8.0               "/pause"               25 hours ago        Up 25 hours                             k8s_POD.9243e30_...</span></code></pre></td></tr></table></div></figure>


<p>Use <code>docker inspect</code> to find the process ID based on the container ID.
The Go template <code>{ {.State.Pid} }</code> (NOTE: without space) is used to simplify the output to a single numerical Pid.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@kube-worker-1 ~]$ sudo docker inspect --format { {.State.Pid} } 943d6e5a3bb8
</span><span class='line'>9176
</span><span class='line'>
</span><span class='line'>[centos@kube-worker-1 ~]$ sudo nsenter --target 9176 --mount --uts --ipc --net --pid
</span><span class='line'>root@jenkins:/# cd ~
</span><span class='line'>root@jenkins:~# vi /etc/hosts
</span><span class='line'>root@jenkins:~# exit</span></code></pre></td></tr></table></div></figure>


<p>For later versions of Docker, the more direct way is to use <code>docker exec</code> with the container name shown in <code>docker ps</code> output (see next section).
However, note that <code>docker exec</code> might not work for earlier versions of Docker (tested with Docker 1.6) and <code>nsenter</code> must be used instead.</p>

<p>After entering the container as <code>root</code>, you might want to add the user into sudo group and save the modified Docker image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@kube-worker-3 ~]$ sudo nsenter --target 17377 --mount --uts --ipc --net --pid
</span><span class='line'>root@node-v4:~# cd /home/jenkins
</span><span class='line'>root@node-v4:/home/jenkins# usermod -a -G sudo jenkins
</span><span class='line'>root@node-v4:/home/jenkins# passwd jenkins
</span><span class='line'>Enter new UNIX password:
</span><span class='line'>Retype new UNIX password:
</span><span class='line'>passwd: password updated successfully
</span><span class='line'>root@node-v4:/home/jenkins# exit
</span><span class='line'>logout
</span><span class='line'>
</span><span class='line'>[centos@kube-worker-3 ~]$ sudo docker commit --author tdongsi --message "Add Jenkins password" \
</span><span class='line'>280e5237cc6a docker.registry.company.net/tdongsi/jenkins-agent:2.80
</span><span class='line'>b1fe6c66195e32fcb8ef4974e3d6228ee2f4cf46ab08dbc074f633d95005941b
</span><span class='line'>
</span><span class='line'>[centos@kube-worker-3 ~]$ sudo docker push docker.registry.company.net/tdongsi/jenkins-agent:2.80
</span><span class='line'>The push refers to a repository [docker.registry.company.net/tdongsi/jenkins-agent] (len: 1)
</span><span class='line'>b1fe6c66195e: Image already exists
</span><span class='line'>151c68e860a5: Image successfully pushed
</span><span class='line'>670d6fd894d6: Image successfully pushed
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>After that, you can verify <code>sudo</code>ing in the new Docker image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-mac:~ tdongsi$ docker pull docker.registry.company.net/tdongsi/jenkins-agent:2.80
</span><span class='line'>2.80: Pulling from tdongsi/jenkins-agent
</span><span class='line'>bf5d46315322: Already exists
</span><span class='line'>9f13e0ac480c: Already exists
</span><span class='line'>ebe26e644840: Pull complete
</span><span class='line'>40af181810e7: Pull complete
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>tdongsi-mac:~ tdongsi$ docker run -d --restart=always --entrypoint="java" \
</span><span class='line'>docker.registry.company.net/tdongsi/jenkins-agent:2.80 -jar /usr/share/jenkins/slave.jar \
</span><span class='line'>-jnlpUrl http://10.252.78.115/computer/slave/slave-agent.jnlp
</span><span class='line'>dd9c207e2ef1c0520439451b1775b976e3c9e09712f8ca1fb42f1bc082f14809
</span><span class='line'>
</span><span class='line'>tdongsi-mac:~ tdongsi$ docker ps
</span><span class='line'>CONTAINER ID        IMAGE                                                    COMMAND                  CREATED             STATUS              PORTS               NAMES
</span><span class='line'>dd9c207e2ef1        docker.registry.company.net/tdongsi/jenkins-agent:2.80   "java -jar /usr/sh..."   5 seconds ago       Up 4 seconds                            ecstatic_galileo
</span><span class='line'>tdongsi-mac:~ tdongsi$ docker exec -it dd9c207e2ef1 bash
</span><span class='line'>jenkins@dd9c207e2ef1:~$ sudo ls /etc/hosts
</span><span class='line'>[sudo] password for jenkins:
</span><span class='line'>/etc/hosts
</span><span class='line'>jenkins@dd9c207e2ef1:~$ sudo cat /etc/hosts
</span><span class='line'>127.0.0.1 localhost
</span><span class='line'>::1   localhost ip6-localhost ip6-loopback
</span><span class='line'>fe00::0   ip6-localnet
</span><span class='line'>ff00::0   ip6-mcastprefix
</span><span class='line'>ff02::1   ip6-allnodes
</span><span class='line'>ff02::2   ip6-allrouters
</span><span class='line'>172.17.0.2    dd9c207e2ef1
</span><span class='line'>jenkins@dd9c207e2ef1:~$ exit
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<h3><code>docker exec</code> approach</h3>

<p>Later versions of <code>docker</code> adds <code>--user</code> flag that allows us to specify which user that we should enter the container as.
First, we figure out which Kubernetes node is running a particular pod by using the command <code>kubectl describe pod</code>.
After <code>ssh</code>-ing into that Kubernetes node, we can find the corresponding container running in that pod with the command <code>docker ps -a</code>.
The following examples demonstrate entering a <code>jenkins-slave</code> container as <code>root</code> and <code>jenkins</code> user.</p>

<figure class='code'><figcaption><span>Entering container </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@dev-worker-2 ~]# docker ps -a
</span><span class='line'>CONTAINER ID        IMAGE                                                                        COMMAND                  CREATED             STATUS              PORTS               NAMES
</span><span class='line'>10f031d08389        docker.registry.company.net/tdongsi/jenkins:jenkins-agent                    "jenkins-slave 9f22f2"   19 minutes ago      Up 19 minutes                           k8s_slave.beb667bf_...
</span><span class='line'>767915746e2c        docker.registry.company.net/tdongsi/pause:2.0                                "/pause"                 19 minutes ago      Up 19 minutes                           k8s_POD.abb8e705_...
</span><span class='line'>
</span><span class='line'>[root@dev-worker-2 ~]# docker exec -it --user root 10f031d08389 /bin/sh
</span><span class='line'>#
</span><span class='line'># ls
</span><span class='line'>support  workspace
</span><span class='line'># id
</span><span class='line'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line'># exit
</span><span class='line'>
</span><span class='line'>[root@dev-worker-2 ~]# docker exec -it --user jenkins 10f031d08389 /bin/sh
</span><span class='line'>$ ls
</span><span class='line'>support  workspace
</span><span class='line'>$ id
</span><span class='line'>uid=25001(jenkins) gid=25001(jenkins) groups=25001(jenkins),992(docker)
</span><span class='line'>$ exit</span></code></pre></td></tr></table></div></figure>


<p>As mentioned, older versions of <code>docker</code> does not support <code>--user</code> flag and does not allow entering container as root.
In that case, use <code>nsenter</code> method presented in the previous section.</p>

<figure class='code'><figcaption><span>Unsupported operation on Docker 1.6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kube-worker-1 ~]# docker exec -it --user root af9a884eb3f1 /bin/sh
</span><span class='line'>flag provided but not defined: --user
</span><span class='line'>See 'docker exec --help'.
</span><span class='line'>[root@kube-worker-1 ~]# docker version
</span><span class='line'>Client version: 1.6.2.el7
</span><span class='line'>Client API version: 1.18
</span><span class='line'>Go version (client): go1.4.2
</span><span class='line'>Git commit (client): c3ca5bb/1.6.2
</span><span class='line'>OS/Arch (client): linux/amd64
</span><span class='line'>Server version: 1.6.2.el7
</span><span class='line'>Server API version: 1.18
</span><span class='line'>Go version (server): go1.4.2
</span><span class='line'>Git commit (server): c3ca5bb/1.6.2
</span><span class='line'>OS/Arch (server): linux/amd64</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><a href="https://github.com/jpetazzo/nsenter">nsenter tool</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a> manual</li>
<li><a href="http://stackoverflow.com/questions/28721699/root-password-inside-a-docker-container">StackOverflow discussion</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes: Pod-to-Node Communication Loss]]></title>
    <link href="http://tdongsi.github.io/blog/2017/01/24/kubernetes-pod-to-node-communication-loss/"/>
    <updated>2017-01-24T15:05:15-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/01/24/kubernetes-pod-to-node-communication-loss</id>
    <content type="html"><![CDATA[<p>This post goes over what happens if we misconfigure <code>etcd</code> and <code>flannel</code> to use the same network (e.g., &ldquo;10.252.61.0/16&rdquo;) as the infrastructure (e.g., &ldquo;10.252.158.72&rdquo; node).
This newbie mistake is rare but very perplexing and this post shows how to troubleshoot it with <code>busybox</code> container.</p>

<!--more-->


<h3>Problem symptoms</h3>

<p>From a pod (e.g., <code>jenkins</code>) on one node (e.g., <code>10.252.158.71</code>), we cannot communicate with another node (e.g., <code>10.252.158.72</code>) even though two nodes can communicate with each other normally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:kubernetes tdongsi$ kubectl --kubeconfig kubeconfig exec -it jenkins -- bash -il
</span><span class='line'>jenkins@jenkins:~$ ping 10.252.158.72
</span><span class='line'>PING 10.252.158.72 (10.252.158.72) 56(84) bytes of data.
</span><span class='line'>^C
</span><span class='line'>--- 10.252.158.72 ping statistics ---
</span><span class='line'>16 packets transmitted, 0 received, 100% packet loss, time 14999ms
</span><span class='line'>
</span><span class='line'>jenkins@jenkins:~$ exit</span></code></pre></td></tr></table></div></figure>


<p>Even more perplexing, the pod-to-pod communication is fine (as described right below), even though the second pod is on the same node (e.g., <code>10.252.158.72</code>) that the first pod cannot communciate to.</p>

<h3>Troubleshooting with <code>busybox</code></h3>

<p>Try to run a test pod <code>busybox</code>.
<code>jenkins</code> pod can ping the <code>busybox</code> pod, but not the node that <code>busybox</code> pod is running on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:kubernetes tdongsi$ kubectl --kubeconfig kubeconfig run busybox \
</span><span class='line'>--image=docker.registry.company.net/tdongsi/busybox --restart=Never --tty -i --generator=run-pod/v1
</span><span class='line'>Waiting for pod default/busybox to be running, status is Pending, pod ready: false
</span><span class='line'>Waiting for pod default/busybox to be running, status is Running, pod ready: false
</span><span class='line'>Waiting for pod default/busybox to be running, status is Running, pod ready: false
</span><span class='line'>
</span><span class='line'>mymac:kubernetes tdongsi$ kubectl --kubeconfig kubeconfig exec -it jenkins -- bash -il
</span><span class='line'>jenkins@jenkins:~$ ping 10.252.61.7
</span><span class='line'>PING 10.252.61.7 (10.252.61.7) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.252.61.7: icmp_seq=1 ttl=62 time=0.540 ms
</span><span class='line'>64 bytes from 10.252.61.7: icmp_seq=2 ttl=62 time=0.186 ms
</span><span class='line'>64 bytes from 10.252.61.7: icmp_seq=3 ttl=62 time=0.177 ms
</span><span class='line'>64 bytes from 10.252.61.7: icmp_seq=4 ttl=62 time=0.161 ms
</span><span class='line'>64 bytes from 10.252.61.7: icmp_seq=5 ttl=62 time=0.187 ms
</span><span class='line'>^C
</span><span class='line'>--- 10.252.61.7 ping statistics ---
</span><span class='line'>5 packets transmitted, 5 received, 0% packet loss, time 4000ms
</span><span class='line'>rtt min/avg/max/mdev = 0.161/0.250/0.540/0.145 ms
</span><span class='line'>
</span><span class='line'>jenkins@jenkins:~$ ping 10.252.158.72
</span><span class='line'>PING 10.252.158.72 (10.252.158.72) 56(84) bytes of data.
</span><span class='line'>^C
</span><span class='line'>--- 10.252.158.72 ping statistics ---
</span><span class='line'>14 packets transmitted, 0 received, 100% packet loss, time 13000ms</span></code></pre></td></tr></table></div></figure>


<p>In this case, we would use <code>traceroute</code> from the <code>busybox</code> container to determine when the packets are dropped.
<code>10.252.158.72</code> is IP of the VM. <code>10.252.100.5</code> is the IP of the <code>jenkins</code> pod.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:kubernetes tdongsi$ kubectl --kubeconfig kubeconfig run busybox \
</span><span class='line'>--image=docker.registry.company.net/tdongsi/busybox --restart=Never --tty -i --generator=run-pod/v1
</span><span class='line'>
</span><span class='line'>Waiting for pod default/busybox to be running, status is Pending, pod ready: false
</span><span class='line'>Waiting for pod default/busybox to be running, status is Running, pod ready: false
</span><span class='line'>Waiting for pod default/busybox to be running, status is Running, pod ready: false
</span><span class='line'>
</span><span class='line'>/ # traceroute 10.252.158.72
</span><span class='line'>traceroute to 10.252.158.72 (10.252.158.72), 30 hops max, 46 byte packets
</span><span class='line'> 1  10.252.61.1 (10.252.61.1)  0.005 ms  0.012 ms  0.001 ms
</span><span class='line'> 2  *  *  *
</span><span class='line'> 3  *  *  *
</span><span class='line'> 4  *  *  *
</span><span class='line'> 5  *  *  *
</span><span class='line'>/ #
</span><span class='line'>/ # traceroute 10.252.100.5
</span><span class='line'>traceroute to 10.252.100.5 (10.252.100.5), 30 hops max, 46 byte packets
</span><span class='line'> 1  10.252.61.1 (10.252.61.1)  0.005 ms  0.004 ms  0.002 ms
</span><span class='line'> 2  *  10.252.100.0 (10.252.100.0)  0.487 ms  0.241 ms
</span><span class='line'> 3  10.252.100.5 (10.252.100.5)  0.141 ms  0.563 ms  0.132 ms
</span><span class='line'>/ # exit</span></code></pre></td></tr></table></div></figure>


<p>For the context, <code>10.252.100.5</code> is the IP of the service, as shown in the command below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mymac:private_cloud tdongsi$ kubectl --kubeconfig kubeconfig describe services
</span><span class='line'>Name:         jenkins
</span><span class='line'>Namespace:        default
</span><span class='line'>Labels:           &lt;none&gt;
</span><span class='line'>Selector:     name=jenkins
</span><span class='line'>Type:         NodePort
</span><span class='line'>IP:           10.252.77.85
</span><span class='line'>Port:         http    80/TCP
</span><span class='line'>NodePort:     http    30080/TCP
</span><span class='line'>Endpoints:        10.252.100.5:8080
</span><span class='line'>Session Affinity: None
</span><span class='line'>No events.</span></code></pre></td></tr></table></div></figure>


<h3>What went wrong?</h3>

<p>It&rsquo;s a newbie mistake when configuring Kubernetes.
When setting up <code>etcd</code> and configuring it to hold <code>flannel</code> configuration, it is important to pick an unused network.
I made a mistake for using <code>10.252.61.0/16</code> for flannel when some of my kubernetes nodes has IPs as &ldquo;10.252.xxx.xxx&rdquo;.
As a result, kube-proxy services intercept the traffic from the container and thinks its a virtual traffic since my node IP happens to be in the same subnet with <code>flanneld</code>.
This leads to pod-to-VM communication loss as described above.
The solution is simply reset flanneld with another subnet after resetting configruation value in <code>etcd</code> to &ldquo;172.17.0.0/16&rdquo;.</p>

<figure class='code'><figcaption><span>Update etcd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[centos@kube-master ~]$ etcdctl update /kube-centos/network/config \
</span><span class='line'>"{ \"Network\": \"172.17.0.0/16\", \"SubnetLen\": 24, \"Backend\": { \"Type\": \"vxlan\" } }"
</span><span class='line'>
</span><span class='line'>[centos@kube-master ~]$ etcdctl rm --recursive /kube-centos/network/subnets
</span><span class='line'>[centos@kube-master ~]$ etcdctl ls /kube-centos/network
</span><span class='line'>/kube-centos/network/config</span></code></pre></td></tr></table></div></figure>


<p>After this, we can reset and restart <code>flannel</code> services on all nodes to use the new network overlay configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes: Pause Container and Private Docker Registry]]></title>
    <link href="http://tdongsi.github.io/blog/2017/01/16/kubernetes-pulling-from-private-image-repository/"/>
    <updated>2017-01-16T11:48:05-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/01/16/kubernetes-pulling-from-private-image-repository</id>
    <content type="html"><![CDATA[<p>This post documents dealing with implicit container <code>pause</code> in a corporate context, where Internet access is restricted and private Docker registry must be used.</p>

<!--more-->


<h3>Problem description</h3>

<p>In this problem, Kubernetes cluster are all installed and configured.
We are trying to create some &ldquo;Hello World&rdquo; pod, using the example described <a href="https://kubernetes.io/docs/user-guide/walkthrough/#pod-definition">here</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-mac:private_cloud tdongsi$ kubectl --kubeconfig kubeconfig get nodes
</span><span class='line'>NAME            LABELS                                 STATUS    AGE
</span><span class='line'>kube-worker-1   kubernetes.io/hostname=kube-worker-1   Ready     1d
</span><span class='line'>kube-worker-3   kubernetes.io/hostname=kube-worker-3   Ready     1d
</span><span class='line'>kube-worker-4   kubernetes.io/hostname=kube-worker-4   Ready     1d
</span><span class='line'>tdongsi-mac:private_cloud tdongsi$ kubectl --kubeconfig kubeconfig create -f pod-nginx.yaml
</span><span class='line'>pod "nginx" created</span></code></pre></td></tr></table></div></figure>


<p>However, one can see the following error messages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-mac:private_cloud tdongsi$ kubectl --kubeconfig kubeconfig get pods
</span><span class='line'>NAME      READY     STATUS                                                                                       RESTARTS   AGE
</span><span class='line'>nginx     0/1       Image: artifactrepo1.corp.net/tdongsi/nginx:1.7.9 is not ready on the node                   0          4m
</span><span class='line'>
</span><span class='line'>tdongsi-mac:private_cloud tdongsi$ kubectl --kubeconfig kubeconfig get events
</span><span class='line'>FIRSTSEEN   LASTSEEN   COUNT     NAME      KIND      SUBOBJECT                           REASON      SOURCE                    MESSAGE
</span><span class='line'>40m         40m        1         nginx     Pod                                           scheduled   {scheduler }              Successfully assigned nginx to kube-worker-3
</span><span class='line'>40m         40m        3         nginx     Pod       implicitly required container POD   pulling     {kubelet kube-worker-3}   Pulling image "gcr.io/google_containers/pause:0.8.0"
</span><span class='line'>40m         39m        3         nginx     Pod       implicitly required container POD   failed      {kubelet kube-worker-3}   Failed to pull image "gcr.io/google_containers/pause:0.8.0":...
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>The full error message for the third event above is quoted below:</p>

<blockquote><p>Failed to pull image "gcr.io/google_containers/pause:0.8.0": image pull failed for gcr.io/google_containers/pause:0.8.0, this may be because there are no credentials on this request.  details: (API error (500):  v1 ping attempt failed with error: Get https://gcr.io/v1/_ping: dial tcp 173.194.175.82:443: i/o timeout. If this private registry supports only HTTP or HTTPS with an unknown CA certificate, please add `--insecure-registry gcr.io` to the daemon's arguments. In the case of HTTPS, if you have access to the registry's CA certificate, no need for the flag; simply place the CA certificate at /etc/docker/certs.d/gcr.io/ca.crt</p></blockquote>


<h3>What is <code>pause</code> container?</h3>

<p>Whenever we create a pod, a <code>pause</code> container image such as <em>gcr.io/google_containers/pause:0.8.0</em> is implicitly required.
What is that <code>pause</code> container&rsquo;s purpose?
The <code>pause</code> container essentially holds the network namespace for the pod.
It does nothing useful and its container image (see <a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile">its Dockerfile</a>) basically contains a simple binary that goes to sleep and never wakes up (see <a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/pause.c">its code</a>).
However, when the top container such as <code>nginx</code> container dies and gets restarted by kubernetes, all the network setup will still be there.
Normally, if the last process in a network namespace dies, the namespace will be destroyed.
Restarting <code>nginx</code> container without <code>pause</code> would require creating all new network setup.
With <code>pause</code>, you will always have that one last thing in the namespace.</p>

<h3><code>pause</code> container and private Docker registry</h3>

<p>What trouble does such <code>pause</code> container can give us?
As the full container image path indicates, the <code>pause</code> container image is downloaded from Google Container Registry (&ldquo;gcr.io&rdquo;) by default.
If a kubernetes node is inside a corporate network with restricted access to Internet, one cannot simply pull that Docker image from Google Container Registry or Docker Hub.
And that is what error message quoted above indicates.
However, each corporate may have its own internal Docker registry with vetted Docker images that you can push to and pull from.
One work-around is to push that <code>pause</code> image to the internal Docker registry, downloaded to each Kubernetes slave, and retagged it (from internal tag <code>artifactrepo1.corp.net</code> to <code>gcr.io</code> tag).
Essentially, I pre-loaded each Kubenetes slave with a <code>pause:0.8.0</code> Docker image.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-mac:private_cloud tdongsi$ docker pull gcr.io/google_containers/pause:0.8.0
</span><span class='line'>0.8.0: Pulling from google_containers/pause
</span><span class='line'>a3ed95caeb02: Pull complete
</span><span class='line'>bccc832946aa: Pull complete
</span><span class='line'>Digest: sha256:bbeaef1d40778579b7b86543fe03e1ec041428a50d21f7a7b25630e357ec9247
</span><span class='line'>Status: Downloaded newer image for gcr.io/google_containers/pause:0.8.0
</span><span class='line'>
</span><span class='line'>tdongsi-mac:private_cloud tdongsi$ docker tag gcr.io/google_containers/pause:0.8.0 artifactrepo1.corp.net/tdongsi/pause:0.8.0
</span><span class='line'>
</span><span class='line'>tdongsi-mac:private_cloud tdongsi$ docker push artifactrepo1.corp.net/tdongsi/pause:0.8.0
</span><span class='line'>The push refers to a repository [artifactrepo1.corp.net/tdongsi/pause]
</span><span class='line'>5f70bf18a086: Mounted from tdongsi/nginx
</span><span class='line'>152b0ca1d7a4: Pushed
</span><span class='line'>0.8.0: digest: sha256:a252a0fc9c760e531dbc9d41730e398fc690938ccb10739ef2eda61565762ae5 size: 2505</span></code></pre></td></tr></table></div></figure>


<p>The more scalable way, such as for Puppet automation, is to use <code>kubelet</code> option &ldquo;&ndash;pod-infra-container-image&rdquo;.
In the config file &ldquo;/etc/kubernetes/kubelet&rdquo; of <code>kubelet</code> service, modify the following lines:</p>

<figure class='code'><figcaption><span>Custom kubelet option</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Add your own! 
</span><span class='line'>KUBELET_ARGS="--pod-infra-container-image=artifactrepo1.corp.net/tdongsi/pause:0.8.0"</span></code></pre></td></tr></table></div></figure>


<p>Note that if the private Docker registry &ldquo;artifactrepo1.corp.net&rdquo; requires authentication, specifying the container image in the above <code>kubelet</code> option might NOT work.
In some older versions of Docker/Kubernetes, image pull secrets, even though created for authenticating to such Docker registry, are not properly used to load <code>pause</code> container image.
Therefore, loading <code>pause</code> container image happens first and fails to authenticate with such private Docker registry, before the actual required container image can be loaded.</p>

<p>In that case, the alternative way for scalable automation is to prepare a binary <code>tar</code> file for <code>pause</code> container image (with <code>docker save</code>) and pre-load the image on each kubernetes node with <code>docker load</code> command.
We can upload the binary <code>tar</code> file onto new kubernetes nodes whenever each of those is created and added to the kubernetes cluster.</p>

<figure class='code'><figcaption><span>docker load</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker load -i /path/to/pause-amd64.tar</span></code></pre></td></tr></table></div></figure>




<!--
### Pulling fails even with pull image secret

**WARNING**: 
This section is for older versions of Kubernetes (< 1.2) with internal corporate constraints. 
Using such old Kubernetes version is not recommended to begin with because of various stability and performance issues.
However, some companies may dive into Kubernetes early, contribute lots of code to make it work and the problem described below may persist, especially for new hires.

Validate

<figure class='code'><figcaption><span>docker load</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-mac:private_cloud tdongsi$ kubectl --kubeconfig kubeconfig get secret corpregistry -o yaml | grep dockerconfigjson: | cut -f 2 -d : | base64 -D
</span><span class='line'>{ "artifactrepo1.corp.net": { "auth": "XXXXX", "email": "tdongsi@salesforce.com" } }</span></code></pre></td></tr></table></div></figure>
-->


<h3>References</h3>

<ul>
<li><a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile">pause Dockerfile</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/master/build/pause/pause.c">pause source code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Downloading BART Parking Permits]]></title>
    <link href="http://tdongsi.github.io/blog/2016/10/30/automated-downloading-bart-parking-permits/"/>
    <updated>2016-10-30T17:12:31-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/10/30/automated-downloading-bart-parking-permits</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>I have been commuting to San Francisco using <a href="http://www.bart.gov/">BART</a>.
For BART commutes, before having the Monthly Parking Permit, you usually have no choice but using Daily Parking Permits for car parking.
You will often end up having to download multiple PDF files for the daily permits and print them to put on your vehicle&rsquo;s dashboard.
The <a href="https://www.select-a-spot.com/bart/">BART reservation website</a> offers no easy way to download all of them in one click (see the screenshot).</p>

<p><img src="https://github.com/tdongsi/bart-parking/blob/develop/BART.jpg?raw=true" title="Screenshot" alt="BART Screenshot" /></p>

<p>Personally, the BART commute itself is not that bad, especially when I usually find a seat.
But it is really painful to download every &hellip; single &hellip; PDF &hellip; permit manually before printing them.</p>

<!--more-->


<h3>Solution</h3>

<p>I wrote <a href="https://github.com/tdongsi/bart-parking">some Python scripts</a> to automate the process of downloading every single permits.
The scripts requires <a href="http://docs.python-requests.org/en/master/user/install"><code>requests</code> package</a> installed before running.
Usually, a simple <code>pip install requests</code> command is all you need for its installation.
Then, simply run the <code>main.py</code> script and input your username and password, as shown below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Github\bart-parking\bart&gt;python main.py
</span><span class='line'>bart-view   : INFO     Please input your username and password.
</span><span class='line'>Username:YOUR_USERNAME
</span><span class='line'>Password:
</span><span class='line'>bart-view   : INFO     Done reading username and password
</span><span class='line'>requests.packages.urllib3.connectionpool: INFO     Starting new HTTPS connection (1): www.select-a-spot.com
</span><span class='line'>bart        : INFO     Login Response: https://www.select-a-spot.com/bart/users/login/ 302
</span><span class='line'>bart        : INFO     Created folder to save permit PDF files.
</span><span class='line'>bart        : INFO     Finished downloading permit 1183167.
</span><span class='line'>bart        : INFO     Finished downloading permit 1183161.
</span><span class='line'>bart        : INFO     Finished downloading permit 1183136.
</span><span class='line'>bart        : INFO     Finished downloading permit 1180762.
</span><span class='line'>bart        : INFO     Finished downloading permit 1177938.
</span><span class='line'>bart        : INFO     Finished downloading permit 1177937.
</span><span class='line'>bart        : INFO     Finished downloading permit 1177935.
</span><span class='line'>bart        : INFO     Finished downloading permit 1177929.
</span><span class='line'>
</span><span class='line'>C:\Github\bart-parking\bart&gt;</span></code></pre></td></tr></table></div></figure>


<h3>External links</h3>

<ul>
<li><a href="https://github.com/tdongsi/bart-parking">Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Image for ETL Development in Vertica]]></title>
    <link href="http://tdongsi.github.io/blog/2016/09/01/docker-image-for-vertica/"/>
    <updated>2016-09-01T11:38:27-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/09/01/docker-image-for-vertica</id>
    <content type="html"><![CDATA[<p>Docker is Awesome!!!</p>

<!--more-->


<p>I wish I knew Docker earlier, before going through the hassle of creating VMs for local ETL development and testing.
Docker can make the whole setup even easier.
It can be done in just a few commands, using <a href="https://github.com/tdongsi/vertica/tree/master/docker">a Vertica Dockerfile</a>, created based on <a href="https://github.com/wmarinho/docker-hp-vertica">this</a>.
In addition to easy virtualization, Docker also enables the entire setup can be automated in a script, allowing it to be version-controlled (i.e., <a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code">Infrastructure as Code</a>).</p>

<p>Some notes about this Dockerfile, compared to <code>wmarinho</code>&rsquo;s:</p>

<ul>
<li>Added new schema, new user and new role as examples. Avoid using <code>dbadmin</code> user for development purpose.</li>
<li>Added Java and Maven for Java-based ETL and automated test execution.</li>
<li>Demonstrated running Bash and SQL scripts to initialize the container/database.</li>
</ul>


<h3>How to run</h3>

<p>Before running <code>docker build</code>, download Vertica Community Edition from <a href="https://my.vertica.com/">https://my.vertica.com/</a> and place in the same folder as the <code>Dockerfile</code>.
This <code>Dockerfile</code> takes &ldquo;vertica-7.2.3-0.x86_64.RHEL6.rpm&rdquo; as the install file.</p>

<figure class='code'><figcaption><span>Windows output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>epigineer@epigineerpc MINGW64 /c/Work/Github/vertica/docker (develop)
</span><span class='line'>$ docker build -t vertica .
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>epigineer@epigineerpc MINGW64 /c/Work/Github/vertica/docker (develop)
</span><span class='line'>$ docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED
</span><span class='line'>SIZE
</span><span class='line'>vertica             latest              d2607fa1f457        13 seconds ago
</span><span class='line'>1.638 GB
</span><span class='line'>&lt;none&gt;              &lt;none&gt;              486163abe73f        11 minutes ago
</span><span class='line'>1.638 GB
</span><span class='line'>centos              centos6.6           2c886f766286        8 weeks ago
</span><span class='line'>202.6 MB
</span><span class='line'>
</span><span class='line'>epigineer@epigineerpc MINGW64 /c/Work/Github/vertica/docker (develop)
</span><span class='line'>$ docker run -p 5433:5433 --hostname=verthost --privileged=true --memory 4G -t
</span><span class='line'>-i d2607fa1f457 /bin/bash
</span><span class='line'>Info: no password specified, using none
</span><span class='line'>        Starting nodes:
</span><span class='line'>                v_docker_node0001 (127.0.0.1)
</span><span class='line'>        Starting Vertica on all nodes. Please wait, databases with large catalog
</span><span class='line'> may take a while to initialize.
</span><span class='line'>        Node Status: v_docker_node0001: (DOWN)
</span><span class='line'>        Node Status: v_docker_node0001: (DOWN)
</span><span class='line'>        Node Status: v_docker_node0001: (DOWN)
</span><span class='line'>        Node Status: v_docker_node0001: (DOWN)
</span><span class='line'>        Node Status: v_docker_node0001: (UP)
</span><span class='line'>Database docker started successfully
</span><span class='line'>creating schema
</span><span class='line'>CREATE SCHEMA
</span><span class='line'>creating user
</span><span class='line'>CREATE USER
</span><span class='line'>creating role
</span><span class='line'>CREATE ROLE
</span><span class='line'>grant usage, create on schema
</span><span class='line'>GRANT PRIVILEGE</span></code></pre></td></tr></table></div></figure>


<h3>Troubleshooting Notes</h3>

<p>In Mac OSX, remember that the <code>entrypoint.sh</code> file should have executable permission.
Otherwise, you might get the error &ldquo;oci runtime error: exec: &rdquo;/entrypoint.sh": permission denied".
After changing the file permission, you have to rebuild the image with <code>docker build</code> before <code>docker run</code> again.</p>

<h4>&ldquo;Insufficient resources&rdquo; error when running ETL</h4>

<p>You might get &ldquo;Insufficient resources to execute plan on pool general &hellip; Memory exceeded&rdquo; error when running a large ETL script against the Vertica container.
For complex ETL, Vertica might need additional memory to execute the query plan.
Simply setting higher memory allocation using <code>--memory</code> option of <code>docker run</code> might NOT work if using <strong>Docker Toolbox</strong>.
To set higher memory allowance, stop the <code>docker-machine</code> and set memory as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi$ docker-machine stop
</span><span class='line'>Stopping "default"...
</span><span class='line'>Machine "default" was stopped.
</span><span class='line'>
</span><span class='line'>tdongsi$ VBoxManage modifyvm default --memory 8192
</span><span class='line'>
</span><span class='line'>tdongsi$ docker-machine start
</span><span class='line'>Starting "default"...
</span><span class='line'>(default) Check network to re-create if needed...
</span><span class='line'>(default) Waiting for an IP...
</span><span class='line'>Machine "default" was started.
</span><span class='line'>Waiting for SSH to be available...
</span><span class='line'>Detecting the provisioner...
</span><span class='line'>Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.</span></code></pre></td></tr></table></div></figure>


<p>Note that after running the above commands, <code>docker-machine inspect</code> still shows <code>"Memory":"2048"</code>.
To verify if memory is properly allocated as desired, run <code>free</code> command, for example, inside the container to verify.</p>

<h3>Links</h3>

<ul>
<li><a href="https://github.com/tdongsi/vertica/tree/master/docker">My Dockerfile for ETL development and testing on Vertica</a></li>
<li><a href="https://github.com/wmarinho/docker-hp-vertica">Original Dockerfile</a></li>
<li><a href="https://www.docker.com/">Docker</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analytic Functions in MySQL]]></title>
    <link href="http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql/"/>
    <updated>2016-08-17T23:12:54-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql</id>
    <content type="html"><![CDATA[<p>MySQL has traditionally lagged behind in support for the SQL standard.
Unfortunately, from my experience, MySQL is often used as the sandbox for SQL code challenges and interviews.
If you are used to work with <a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/SQLReferenceManual.htm">Vertica SQL</a>, writing SQL statements in MySQL can be challenging exercises, NOT necessarily in a good way, because many useful features are not supported.</p>

<!--more-->


<h3>WITH clause</h3>

<p>As discussed in this <a href="http://tdongsi.github.io/blog/2016/02/03/vertica-6-with-clause/">blog post</a>, <code>WITH</code> clause syntax, also known as <em>Common Table Expressions</em> (CTE), is thankfully supported in Vertica.
In summary, <code>WITH</code> clause allows us to arrange sub-queries, usually intermediate steps, in a complex SQL query in sequential, logical order.
This will make the complex queries easier to compose and read: we can write steps by steps of the query from top to bottom like a story (i.e., <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a>).
Unfortunately, <code>WITH</code> clause is not supported by MySQL although this feature has been requested since <a href="https://bugs.mysql.com/bug.php?id=16244">2006</a>.
There are <a href="http://guilhembichot.blogspot.fr/2013/11/with-recursive-and-mysql.html">work-arounds</a> for MySQL&rsquo;s lack of CTE, but the easiest way is probably to revert back to using nested subqueries.</p>

<p>Personally, lack of <code>WITH</code> clause support in MySQL is my greatest hindrance as I often ended up writing queries using <code>WITH</code> clauses as first draft before rewriting those queries using nested subqueries.
This might appear clumsy in SQL interviews even though writing SQL codes with CTE instead of subqueries is the recommended practice for maintainable code.</p>

<h3>Analytic functions</h3>

<p>Another regrettable hindrance when working in MySQL is its lack of analytic functions such as <code>ROW_NUMBER</code>, <code>RANK</code> and <code>DENSE_RANK</code>.
Those <a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/Functions/Analytic/AnalyticFunctions.htm">analytic functions</a> are supported in Vertica.
The difference between these three functions can be a bit subtle, and would be best described in the following example:</p>

<figure class='code'><figcaption><span>Example of ROW_NUMBER, RANK, and DENSE_RANK functions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">customer_name</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">annual_income</span><span class="p">),</span>
</span><span class='line'><span class="n">ROW_NUMBER</span> <span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">TO_CHAR</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">annual_income</span><span class="p">),</span><span class="s1">&#39;100000&#39;</span><span class="p">)</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">row_number</span><span class="p">,</span>
</span><span class='line'><span class="n">RANK</span> <span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">TO_CHAR</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">annual_income</span><span class="p">),</span><span class="s1">&#39;100000&#39;</span><span class="p">)</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">rank</span><span class="p">,</span>
</span><span class='line'><span class="n">DENSE_RANK</span> <span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">TO_CHAR</span><span class="p">(</span><span class="k">SUM</span><span class="p">(</span><span class="n">annual_income</span><span class="p">),</span><span class="s1">&#39;100000&#39;</span><span class="p">)</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">dense_rank</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">customer_dimension</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">customer_name</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">15</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The outputs of these functions are only different if there are duplicates in <code>SUM(annual_income)</code> value, as seen in rows 75-81 in the example output below:</p>

<table border="1"><tr BGCOLOR="#CCCCFF"><th>customer_name</th><th>SUM</th><th>row_number</th><th>rank</th><th>dense_rank</th></tr>
<tr><td>Theodore R. King</td><td>97444</td><td>71</td><td>71</td><td>71</td></tr>
<tr><td>Laura Y. Pavlov</td><td>97417</td><td>72</td><td>72</td><td>72</td></tr>
<tr><td>Carla . Garcia</td><td>97371</td><td>73</td><td>73</td><td>73</td></tr>
<tr><td>Jack Z. Miller</td><td>97356</td><td>74</td><td>74</td><td>74</td></tr>
<tr><td>Steve W. Williams</td><td>97343</td><td>75</td><td>75</td><td>75</td></tr>
<tr><td>Lauren Y. Rodriguez</td><td>97343</td><td>76</td><td>75</td><td>75</td></tr>
<tr><td>Lucas . Webber</td><td>97318</td><td>77</td><td>77</td><td>76</td></tr>
<tr><td>Sarah N. Moore</td><td>97243</td><td>78</td><td>78</td><td>77</td></tr>
<tr><td>Lucas O. Li</td><td>97184</td><td>79</td><td>79</td><td>78</td></tr>
<tr><td>Doug K. Reyes</td><td>97166</td><td>80</td><td>80</td><td>79</td></tr>
<tr><td>Michael . Weaver</td><td>97162</td><td>81</td><td>81</td><td>80</td></tr>
</table>


<p><br/></p>

<p>Sadly, these useful analytic functions are not supported in MySQL.
Fortunately, MySQL supports user variables in SQL queries and we can reproduce those functionalities in MySQL using variables and subqueries as follows:</p>

<figure class='code'><figcaption><span>ROW_NUMBER, RANK, and DENSE_RANK functions in MySQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- In Vertica</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'><span class="n">ROW_NUMBER</span> <span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">col_1</span><span class="p">,</span> <span class="n">col_2</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">col_3</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_number</span><span class="p">,</span>
</span><span class='line'><span class="n">RANK</span> <span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">col_1</span><span class="p">,</span> <span class="n">col_2</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">col_3</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span><span class="p">,</span>
</span><span class='line'><span class="n">DENSE_RANK</span> <span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">col_1</span><span class="p">,</span> <span class="n">col_2</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">col_3</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dense_rank</span><span class="p">,</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">table_1</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- In MySQL</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'><span class="o">@</span><span class="n">row_num</span><span class="p">:</span><span class="o">=</span><span class="n">IF</span><span class="p">(</span><span class="o">@</span><span class="n">prev_col_1</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">col_1</span> <span class="k">AND</span> <span class="o">@</span><span class="n">prev_col_2</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">col_2</span><span class="p">,</span> <span class="o">@</span><span class="n">row_num</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_number</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">rank</span><span class="p">:</span><span class="o">=</span><span class="n">IF</span><span class="p">(</span><span class="o">@</span><span class="n">prev_col_1</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">col_1</span> <span class="k">AND</span> <span class="o">@</span><span class="n">prev_col_2</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">col_2</span> <span class="k">AND</span> <span class="o">@</span><span class="n">prev_col_3</span><span class="o">=</span><span class="n">col_3</span><span class="p">,</span> <span class="o">@</span><span class="n">rank</span><span class="p">,</span> <span class="o">@</span><span class="n">row_num</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">dense</span><span class="p">:</span><span class="o">=</span><span class="n">IF</span><span class="p">(</span><span class="o">@</span><span class="n">prev_col_1</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">col_1</span> <span class="k">AND</span> <span class="o">@</span><span class="n">prev_col_2</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">col_2</span><span class="p">,</span> <span class="n">IF</span><span class="p">(</span><span class="o">@</span><span class="n">prev_col_3</span><span class="o">=</span><span class="n">col_3</span><span class="p">,</span> <span class="o">@</span><span class="n">dense</span><span class="p">,</span> <span class="o">@</span><span class="n">dense</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dense_rank</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">prev_col_1</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">col_1</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">prev_col_2</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">col_2</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">prev_col_3</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">col_3</span><span class="p">,</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">table_1</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">col_1</span><span class="p">,</span> <span class="n">col_2</span><span class="p">,</span> <span class="n">col_3</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">t</span><span class="p">,</span>
</span><span class='line'>     <span class="p">(</span><span class="k">SELECT</span> <span class="o">@</span><span class="n">row_num</span><span class="p">:</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">@</span><span class="n">dense</span><span class="p">:</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">@</span><span class="n">rank</span><span class="p">:</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">@</span><span class="n">prev_col_1</span><span class="p">:</span><span class="o">=</span><span class="k">NULL</span><span class="p">,</span> <span class="o">@</span><span class="n">prev_col_2</span><span class="p">:</span><span class="o">=</span><span class="k">NULL</span><span class="p">,</span> <span class="o">@</span><span class="n">prev_col_3</span><span class="p">:</span><span class="o">=</span><span class="k">NULL</span><span class="p">)</span> <span class="n">var</span>
</span></code></pre></td></tr></table></div></figure>


<p>The MySQL work-around is intentionally generic so that I can adapt it to any use case.
In addition, it intentionally has a single pass (no <code>SET</code> statements, temporary table) since most SQL code challenges expect a single query.
Finally, note that the above MySQL solution is intentionally incomplete to make it less convoluted.
You need to put that solution in a subquery and <code>SELECT</code> only relevant columns from it.</p>

<p>As an example, the above code template is used to solve <a href="https://leetcode.com/problems/rank-scores/">this Rank Scores problem</a>.
In summary, the question asks for <code>DENSE_RANK</code> functionality to be applied on Score column.</p>

<figure class='code'><figcaption><span>Input table</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----+-------+
</span><span class='line'>| Id | Score |
</span><span class='line'>+----+-------+
</span><span class='line'>| 1  | 3.50  |
</span><span class='line'>| 2  | 3.65  |
</span><span class='line'>| 3  | 4.00  |
</span><span class='line'>| 4  | 3.85  |
</span><span class='line'>| 5  | 4.00  |
</span><span class='line'>| 6  | 3.65  |
</span><span class='line'>+----+-------+</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Expected output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-------+------+
</span><span class='line'>| Score | Rank |
</span><span class='line'>+-------+------+
</span><span class='line'>| 4.00  | 1    |
</span><span class='line'>| 4.00  | 1    |
</span><span class='line'>| 3.85  | 2    |
</span><span class='line'>| 3.65  | 3    |
</span><span class='line'>| 3.65  | 3    |
</span><span class='line'>| 3.50  | 4    |
</span><span class='line'>+-------+------+</span></code></pre></td></tr></table></div></figure>


<p>The solution in Vertica SQL would be straight-forward as follows:</p>

<figure class='code'><figcaption><span>Solution in Vertica SQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">Score</span><span class="p">,</span>
</span><span class='line'><span class="n">DENSE_RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Score</span> <span class="k">DESC</span><span class="p">)</span> <span class="k">AS</span> <span class="n">Rank</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Scores</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In MySQL, apply the above code template and note that there is no <code>partition clause</code> to arrive at the following solution:</p>

<figure class='code'><figcaption><span>Solution in MySQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">Score</span><span class="p">,</span> <span class="n">Rank</span> <span class="k">FROM</span>
</span><span class='line'><span class="p">(</span> <span class="k">SELECT</span> <span class="n">t</span><span class="p">.</span><span class="n">Score</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">dense</span><span class="p">:</span><span class="o">=</span><span class="n">IF</span><span class="p">(</span><span class="o">@</span><span class="n">prev_col2</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">Score</span><span class="p">,</span> <span class="o">@</span><span class="n">dense</span><span class="p">,</span> <span class="o">@</span><span class="n">dense</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">Rank</span><span class="p">,</span>
</span><span class='line'><span class="o">@</span><span class="n">prev_col2</span><span class="p">:</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">Score</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">Score</span> <span class="k">FROM</span> <span class="n">Scores</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Score</span> <span class="k">DESC</span><span class="p">)</span> <span class="n">t</span><span class="p">,</span>
</span><span class='line'><span class="p">(</span><span class="k">SELECT</span> <span class="o">@</span><span class="n">dense</span><span class="p">:</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">@</span><span class="n">prev_col2</span><span class="p">:</span><span class="o">=</span><span class="k">NULL</span><span class="p">)</span> <span class="n">var</span> <span class="p">)</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the outer <code>SELECT</code> is used to only expose only columns of interest while the main SQL code is enclosed in a subquery.</p>

<h3>Reference</h3>

<ul>
<li><a href="http://www.folkstalk.com/2013/03/grouped-row-number-function-mysql.html">ROW_NUMBER in MySQL</a></li>
<li><a href="http://www.folkstalk.com/2013/03/grouped-dense-rank-function-mysql-sql-query.html">DENSE_RANK in MySQL</a>: this link actually shows <code>RANK</code> implementation.</li>
<li><a href="https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/SQLReferenceManual/Functions/Analytic/AnalyticFunctions.htm">Vertica Analytic Functions</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/user-variables.html">MySQL user variables</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improved Priority Queue Recipe in Python]]></title>
    <link href="http://tdongsi.github.io/blog/2016/07/14/priority-queue-recipe-in-python/"/>
    <updated>2016-07-14T17:59:14-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/07/14/priority-queue-recipe-in-python</id>
    <content type="html"><![CDATA[<p>A priority queue is a commonly used abstract data type, but it is not adequately provided in Python&rsquo;s standard library.</p>

<!--more-->


<p>The <a href="https://docs.python.org/2/library/queue.html">module <code>Queue</code></a> provides a <code>PriorityQueue</code> class but that implementation leaves a lot to be desired.
It does not provide standard <code>peek</code> or <code>remove</code> methods in its public interface, which is sometimes critical.
Additionally, the entry must be in the tuple form <code>(priority_number, data)</code> where lower number must be used for higher priority task to be returned first.
Finally, this Queue version is reportedly slower because it adds locks and encapsulation designed for multi-threaded environment, which is arguably the intention of that module.</p>

<p>On the other hand, the <a href="https://docs.python.org/2/library/heapq.html">module <code>heapq</code></a> provides an implementation of binary heap algorithms, which is the most common <em>data structure</em> for implementing priority-queue.
Although the module does not provide any direct implementation of priority-queue, <a href="https://docs.python.org/2/library/heapq.html">its documentation</a> discusses how to add additional capabilities to a heap-based priority queue and provides a recipe as an example.
That example is still hard to be used directly since it is not encapsulated into a class and the standard <code>peek</code> method is noticeably missing.</p>

<p>I ended up implementing a wrapper class for that recipe to make it easier to use.</p>

<figure class='code'><figcaption><span>Improved priority-queue recipe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">heapq</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PriorityQueue</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_REMOVED</span> <span class="o">=</span> <span class="s">&quot;&lt;REMOVED&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">heap</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">entries</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">,</span> <span class="n">priority</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Add a new task or update the priority of an existing task&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">task</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">entries</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># weight = -priority since heap is a min-heap</span>
</span><span class='line'>        <span class="n">entry</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="n">priority</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">task</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">entries</span><span class="p">[</span><span class="n">task</span><span class="p">]</span> <span class="o">=</span> <span class="n">entry</span>
</span><span class='line'>        <span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">heap</span><span class="p">,</span> <span class="n">entry</span><span class="p">)</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Mark the given task as REMOVED.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Do this to avoid breaking heap-invariance of the internal heap.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">entry</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">entries</span><span class="p">[</span><span class="n">task</span><span class="p">]</span>
</span><span class='line'>        <span class="n">entry</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">PriorityQueue</span><span class="o">.</span><span class="n">_REMOVED</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Get task with highest priority.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :return: Priority, Task with highest priority</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap</span><span class="p">:</span>
</span><span class='line'>            <span class="n">weight</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">task</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">heap</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">task</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">PriorityQueue</span><span class="o">.</span><span class="n">_REMOVED</span><span class="p">:</span>
</span><span class='line'>                <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">entries</span><span class="p">[</span><span class="n">task</span><span class="p">]</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="n">weight</span><span class="p">,</span> <span class="n">task</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s">&quot;The priority queue is empty&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">peek</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot; Check task with highest priority, without removing.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :return: Priority, Task with highest priority</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap</span><span class="p">:</span>
</span><span class='line'>            <span class="n">weight</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">task</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">task</span> <span class="ow">is</span> <span class="n">PriorityQueue</span><span class="o">.</span><span class="n">_REMOVED</span><span class="p">:</span>
</span><span class='line'>                <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">heap</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="n">weight</span><span class="p">,</span> <span class="n">task</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap</span> <span class="k">if</span> <span class="n">e</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">PriorityQueue</span><span class="o">.</span><span class="n">_REMOVED</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;[</span><span class="si">%s</span><span class="s">]&quot;</span> <span class="o">%</span> <span class="s">&quot;, &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comparing to the recipe provided in <code>heapq</code> module, a few notes about this implementation:</p>

<ul>
<li>Task with <strong>higher</strong> priority goes out first. A simple change will remove lots of confusion (and bugs) associated with min-heap implementations.</li>
<li>Methods and supporting data structures are encapsulated into a class.</li>
<li>Method names are simplified to <code>add</code>, <code>remove</code>, <code>pop</code> (instead of <code>add_task</code>, for example) since priority queues are NOT only used for task scheduling.</li>
<li>Method <code>peek</code> is added.</li>
<li>Method <code>pop</code> and <code>peek</code> return the highest-priority task together with its priority number. The task&rsquo;s priority number can be useful sometimes (see Skyline problem below).</li>
<li>Override <code>__str__</code> method for pretty printing.</li>
</ul>


<p>As an example, the above priority-queue implementation is used to solve <a href="http://www.geeksforgeeks.org/divide-and-conquer-set-7-the-skyline-problem/">the Skyline problem</a>.
The Skyline problem states that:</p>

<blockquote><p>You are given a set of n rectangular buildings on a skyline. Find the outline around that set of rectangles, which is the skyline when silhouetted at night.</p></blockquote>


<p><img class="center" src="http://tdongsi.github.io/images/python/skyline.png" width="800" height="260" title="Example" alt="An image of example input and output"></p>

<p>One possible approach is to use a priority queue to keep track of the current highest building
while moving from left to right and adding/removing buildings at key points (i.e., start and end of buildings).
Compared to the Merge-Sort-like approach detailed in <a href="http://www.geeksforgeeks.org/divide-and-conquer-set-7-the-skyline-problem/">this link</a>, this approach is much more intuitive in my opinion while having similar runtime complexity $\mathcal{O}(n\log{}n)$.</p>

<figure class='code'><figcaption><span>Solution to Skyline problem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">solve_skyline</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Solve the Skyline problem.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param mlist: list of buildings in format (start, end, height).</span>
</span><span class='line'><span class="sd">    :return: List of end points</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">skyline</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">cur_height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">pq</span> <span class="o">=</span> <span class="n">PriorityQueue</span><span class="p">()</span>
</span><span class='line'>    <span class="n">events</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">START</span> <span class="o">=</span> <span class="s">&quot;start&quot;</span>
</span><span class='line'>    <span class="n">END</span> <span class="o">=</span> <span class="s">&quot;end&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">building</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">mlist</span><span class="p">):</span>
</span><span class='line'>        <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">building</span>
</span><span class='line'>        <span class="n">events</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">idx</span><span class="p">,</span> <span class="n">START</span><span class="p">))</span>
</span><span class='line'>        <span class="n">events</span><span class="p">[</span><span class="n">end</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">idx</span><span class="p">,</span> <span class="n">END</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># k_events is the ordered list of x-coordinates where buildings start or end (events)</span>
</span><span class='line'>    <span class="n">k_events</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Add and remove buildings into a priority-queue for each event.</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">k_events</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># print skyline</span>
</span><span class='line'>        <span class="n">buildings</span> <span class="o">=</span> <span class="n">events</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">buildings</span><span class="p">:</span>
</span><span class='line'>            <span class="n">idx</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">label</span> <span class="o">==</span> <span class="n">START</span><span class="p">:</span>
</span><span class='line'>                <span class="n">pq</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">mlist</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">label</span> <span class="o">==</span> <span class="n">END</span><span class="p">:</span>
</span><span class='line'>                <span class="n">pq</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># after processing all buildings for a x-coordinate &quot;key&quot;, check the current highest building</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
</span><span class='line'>        <span class="n">new_height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">temp</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">new_height</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">new_height</span> <span class="o">!=</span> <span class="n">cur_height</span><span class="p">:</span>
</span><span class='line'>            <span class="n">skyline</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">key</span><span class="p">,</span> <span class="n">new_height</span><span class="p">))</span>
</span><span class='line'>            <span class="n">cur_height</span> <span class="o">=</span> <span class="n">new_height</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">skyline</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Allow-empty When Squashing]]></title>
    <link href="http://tdongsi.github.io/blog/2016/07/05/git-allow-empty-when-squashing/"/>
    <updated>2016-07-05T00:15:57-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/07/05/git-allow-empty-when-squashing</id>
    <content type="html"><![CDATA[<p>Many times in Git, we commit some work only to realize that is a mistake, and we should do another way.
The easy way to fix that is to revert the previous commit, a process in which Git creates another commit that undoes exactly everything in the last commit.
After that, we move on with the other way and check in commits for that.
Before pushing everything to the remote branch, as responsible software engineers :), we sometimes want to &ldquo;squash&rdquo; the commits to erase the mistake to keep the commit log clean.</p>

<!--more-->


<p>In the example shown below, my commit <code>daefc6e</code> was a mistake, and I reverted it with <code>f3886c2</code> commit, and then I checked in my correct solution in <code>b4cb02d</code> commit.
I wanted to squash those commits in an interactive rebase session, as seen in the following:</p>

<figure class='code'><figcaption><span>Rebase commands shown in text editor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick daefc6e KSAFE REMOVAL.
</span><span class='line'>squash f3886c2 Revert "KSAFE REMOVAL."
</span><span class='line'>squash b4cb02d Update constants.
</span><span class='line'>
</span><span class='line'># Rebase 41ab184..b4cb02d onto 41ab184
</span><span class='line'>#
</span><span class='line'># Commands:
</span><span class='line'>#  p, pick = use commit
</span><span class='line'>#  r, reword = use commit, but edit the commit message
</span><span class='line'>#  e, edit = use commit, but stop for amending
</span><span class='line'>#  s, squash = use commit, but meld into previous commit
</span><span class='line'>#  f, fixup = like "squash", but discard this commit's log message
</span><span class='line'>#  x, exec = run command (the rest of the line) using shell
</span><span class='line'>#
</span><span class='line'># These lines can be re-ordered; they are executed from top to bottom.
</span><span class='line'>#
</span><span class='line'># If you remove a line here THAT COMMIT WILL BE LOST.
</span><span class='line'>#
</span><span class='line'># However, if you remove everything, the rebase will be aborted.
</span><span class='line'>#
</span><span class='line'># Note that empty commits are commented out</span></code></pre></td></tr></table></div></figure>


<p>However, <code>git rebase</code> always fail in such situations with the following &ldquo;error&rdquo; message:</p>

<figure class='code'><figcaption><span>git rebase fails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase -i origin/feature/foobar
</span><span class='line'>You asked to amend the most recent commit, but doing so would make
</span><span class='line'>it empty. You can repeat your command with --allow-empty, or you can
</span><span class='line'>remove the commit entirely with "git reset HEAD^".
</span><span class='line'>rebase in progress; onto 41ab184
</span><span class='line'>You are currently rebasing branch 'feature/foobar' on '41ab184'.
</span><span class='line'>
</span><span class='line'>No changes
</span><span class='line'>
</span><span class='line'>Could not apply f3886c23589e0964a4483f6454c6edeba7d63fb7... KSAFE REMOVAL.</span></code></pre></td></tr></table></div></figure>


<p>The error message is very confusing.
When <code>daefc6e</code> and <code>f3886c2</code> commits are squashed, the net effect is nothing, which is the &ldquo;empty commit&rdquo; mentioned in that error message.
However, retrying the <code>git rebase</code> command with <code>--allow-empty</code> as said does not work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase --interactive --allow-empty 
</span><span class='line'>error: unknown option `allow-empty' </span></code></pre></td></tr></table></div></figure>


<p>Using <code>git rebase --continue</code> does not work as expected: it does not squash three commits into one.</p>

<p>After some Google searching, it turns out that the above error message comes from <code>git commit --amend</code>, which is delegated by <code>git rebase</code> to handle the squash.
When the message says &ldquo;repeat your command&rdquo;, it means repeating the <code>git commit --amend</code> command, something would never occurs to us.
Therefore, the right thing to do here is repeat <code>commit</code> and continue with the interactive rebase session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit --amend --allow-empty
</span><span class='line'>[detached HEAD 706f662] Revert "KSAFE REMOVAL."
</span><span class='line'>
</span><span class='line'>$ git rebase --continue
</span><span class='line'>[detached HEAD 923477f] Revert "KSAFE REMOVAL."
</span><span class='line'> 1 file changed, 3 insertions(+), 3 deletions(-)
</span><span class='line'>Successfully rebased and updated refs/heads/feature/foobar.</span></code></pre></td></tr></table></div></figure>


<p>By doing that, we will now have all three commits squashed into one and help cleaning up the commit log.</p>

<!--
http://git.661346.n2.nabble.com/Confusing-error-message-in-rebase-when-commit-becomes-empty-td7612948.html
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests Pass on Local but Fail on CI]]></title>
    <link href="http://tdongsi.github.io/blog/2016/06/30/java-intermittent-test-failures/"/>
    <updated>2016-06-30T17:51:13-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/06/30/java-intermittent-test-failures</id>
    <content type="html"><![CDATA[<p>We have all seen it before: intermittent unit test failures.
It could be agonizing that unit tests pass locally, but then fail in the Jenkins unit test build.</p>

<!--more-->


<p>In our experience, one of the most common causes is:
<strong>static initialization code that dynamically sets a static member variable from a config file value.</strong></p>

<p>What happens locally?
If you’re running from the command line, you probably have some environment variables set.
These allow some ConfigHelper class to find the resource properties files and load them.
In the end, code that looks like the following often ends up succeeding:</p>

<figure class='code'><figcaption><span>DbQueue class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">MY_CONFIG</span> <span class="o">=</span> <span class="n">ConfigHelper</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">&quot;config_key&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the unit tests on the CI server run without being set up for a Tomcat application server run.
Instead, they run using some mock framework such as JMockit.
Mocking in this scenario is a good, desirable thing.
However, it also means that code like that ends up failing to find those resources.
In the example above, the class <code>DbQueue</code>&rsquo;s static code was invoked <strong>even though the class itself has been mocked out</strong>.
And very often, classes like that throw some misleading exceptions, especially when trying to load and convert to a numeric value from a resource.</p>

<p>So, how do we fix it?
How do we prevent that class static member initialization code from being invoked in Jenkins test build?
The answer is when we mock the class in JMockit using the <code>@Mocked</code> annotation, we can provide the <code>stubOutClassInitialization=true</code> parameter, like this:</p>

<figure class='code'><figcaption><span>Mock with JMockit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Mocked</span><span class="o">(</span> <span class="n">stubOutClassInitialization</span> <span class="o">=</span> <span class="kc">true</span> <span class="o">)</span>
</span><span class='line'>    <span class="n">DbQueue</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will prevent the static code in the class <code>DbQueue</code> from running in Jenkins unit test builds.
The additional benefit of doing this <em>correctly</em> and <em>completely</em> is that we’ll be able to run our unit tests from inside Eclipse WITHOUT setting the <code>–DSBNHOME=</code> environment variable and the test will still complete as desired.</p>
]]></content>
  </entry>
  
</feed>
