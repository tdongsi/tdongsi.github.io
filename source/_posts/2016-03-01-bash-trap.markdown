---
layout: post
title: "Bash trap"
date: 2016-03-01 00:07:48 -0800
comments: true
categories: 
- Bash
---

### Code snippet

There is a simple idiom to ensure your bash scripts to always do proper cleanup operations before exiting, even when something goes wrong during execution.
In the context of Java or Python, this is similar to a `finally` clause that will execute after any exception is caught during execution. 

``` bash DO THIS
# Setup trap to cleanup before exiting script
function cleanup {
    echo "Removing temp files..."
    if [[ -f $CMD_TMPFILE ]] ; then
        rm $CMD_TMPFILE
    fi
    if [[ -f $LOG_TMPFILE ]] ; then
        rm $LOG_TMPFILE
    fi
}
trap cleanup EXIT

# Setup

# Thousand lines of code here
```

Putting the cleanup operations at the end of the bash script might not work in case of error. 
Since the bash script already stops executing due to some fatal error, those clean up commands might never run.

``` bash DON'T DO THIS

# Setup

# Thousand lines of code here

# This might not run when there is error
echo "Removing temp files..."
if [[ -f $CMD_TMPFILE ]] ; then
    rm $CMD_TMPFILE
fi
if [[ -f $LOG_TMPFILE ]] ; then
    rm $LOG_TMPFILE
fi
```

For example, in Vertica, you should always run [`SELECT START_REFRESH()`](https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/START_REFRESH.htm) 
at the end of a deployment script, regardless of any error encountered during script execution.
It is a good candidate for using `trap` statement.
Adding those commands at the end of the script will not work in case there is an error during deployment, and you might end up with "AHM Does Not Advance"-related errors (see this [post](/blog/2016/02/29/vertica-refresh-projections/)).

### Trap multiple signals

Note that many online examples for `trap` use a list of signals for cleanup tasks like this `trap cleanup INT TERM EXIT`, i.e., trapping not only EXIT signal but also INT and TERM signals. 
I believe once `EXIT` signal is used, other signals such as `INT` or `TERM` are redundant for cleanup purposes.
`EXIT` or 0 signal is invoked when the shell exits, an event that also happens when an `INT` or `TERM` signal is received.
It is easy to confirm that with the following short bash script:

``` plain Trap tests in Mac OSX
MTVL1288aeea2-82:code tdongsi$ cat test_trap.sh
#!/bin/bash
trap 'echo TRAP CAPTURED' EXIT
sleep 3

MTVL1288aeea2-82:code tdongsi$ ./test_trap.sh & sleep 1; kill -INT %1
[1] 6613
TRAP CAPTURED
[1]+  Interrupt: 2            ./test_trap.sh

MTVL1288aeea2-82:code tdongsi$ ./test_trap.sh & sleep 1; kill -TERM %1
[1] 6624
TRAP CAPTURED
[1]+  Terminated: 15          ./test_trap.sh
```

As shown above, a lone `EXIT` is enough to capture `INT` and `TERM` signals. 
Having said that, I understand that my tests can only verify bash on Mac OSX.
There are probably different shell variants on different operating systems which do not always work that way.

The problem of those `trap` examples lies in when someone copies and uses the code directly from the web, without understanding how it works.
Listing multiple signals can make the `cleanup` steps executed twice, once for the signal such as `TERM` and once for `EXIT`, as shown in the modified experiment below.
Not all cleanup steps could be and should be executed twice. 
For example, it is almost always true that removing some temporary file/folder should not be executed twice during a cleanup.

``` plain Problem of trapping multiple signals
MTVL1288aeea2-82:code tdongsi$ cat test_trap.sh
#!/bin/bash
trap 'echo TRAP CAPTURED' INT TERM EXIT
sleep 3

MTVL1288aeea2-82:code tdongsi$ ./test_trap.sh & sleep 1; kill -INT %1
[1] 7258
TRAP CAPTURED
TRAP CAPTURED
[1]+  Exit 130                ./test_trap.sh

MTVL1288aeea2-82:code tdongsi$ ./test_trap.sh & sleep 1; kill -TERM %1
[1] 7278
Terminated: 15
TRAP CAPTURED
TRAP CAPTURED
[1]+  Exit 143                ./test_trap.sh
```

In short, you should know how `trap` works on your production system before listing multiple signals as its parameters, especially when coupled with `EXIT` signal.

### Other usage notes

The signal names might be specified with or without prefix `SIG` or even with numeric values for signal numbers, e.g., 2 for INT (see list below).

``` plain List of signals
MTVL1288aeea2-82:octopress tdongsi$ kill -l
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL
 5) SIGTRAP	 6) SIGABRT	 7) SIGEMT	 8) SIGFPE
 9) SIGKILL	10) SIGBUS	11) SIGSEGV	12) SIGSYS
13) SIGPIPE	14) SIGALRM	15) SIGTERM	16) SIGURG
17) SIGSTOP	18) SIGTSTP	19) SIGCONT	20) SIGCHLD
21) SIGTTIN	22) SIGTTOU	23) SIGIO	24) SIGXCPU
25) SIGXFSZ	26) SIGVTALRM	27) SIGPROF	28) SIGWINCH
29) SIGINFO	30) SIGUSR1	31) SIGUSR2

OR 

MTVL1288aeea2-82:octopress tdongsi$ man signal
```

If one of the signals specified in `trap` statement is `DEBUG`, the list of COMMANDS specified in `trap` statement will be executed after every simple command. 
This is useful for debugging purpose. 
The following example is taken from [here](http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_12.html): 

``` bash Tracing when a variable is used
declare -t VARIABLE=value
trap "echo VARIABLE is being used here." DEBUG

# rest of the script
```

### References

1. [Signals and Traps](http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_12.html)
1. [Other usages](http://redsymbol.net/articles/bash-exit-traps/)


