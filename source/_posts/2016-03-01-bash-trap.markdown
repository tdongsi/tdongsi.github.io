---
layout: post
title: "Bash trap"
date: 2016-03-01 00:07:48 -0800
comments: true
categories: 
- Bash
---

### Code snippet

There is a simple idiom to ensure your bash scripts to always do proper cleanup operations before exiting, even when something goes wrong during execution.
If you know Java or Python, this is equivalent to the `finally` clause that will execute after any exception is caught during execution. 

``` bash DO THIS
# Setup trap to cleanup before exiting script
function cleanup {
    echo "Removing temp files..."
    if [[ -f $CMD_TMPFILE ]] ; then
        rm $CMD_TMPFILE
    fi
    if [[ -f $LOG_TMPFILE ]] ; then
        rm $LOG_TMPFILE
    fi
}
trap cleanup EXIT

# Setup

# Thousand lines of code here
```

For example, in Vertica, you want to run [`SELECT START_REFRESH()`](https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/START_REFRESH.htm) at the end of a deployment script, regardless of any error encountered during script execution.
Putting such statement at the end of the script will not work since if there is an error, and you might see "AHM Does Not Advance"-related errors.

``` bash DON'T DO THIS

# Setup

# Thousand lines of code here

echo "Removing temp files..."
if [[ -f $CMD_TMPFILE ]] ; then
    rm $CMD_TMPFILE
fi
if [[ -f $LOG_TMPFILE ]] ; then
    rm $LOG_TMPFILE
fi
```


### What signals to trap

Note that many examples for "trap" use a list of signals for cleanup tasks like this `trap cleanup INT TERM EXIT`, i.e., trapping not only EXIT signal but also INT and TERM signals. 
The signal names might be with or without prefix `SIG` or even replaced with numeric values for signal numbers, e.g., 2 for INT (see list below).

``` plain List of signals
MTVL1288aeea2-82:octopress tdongsi$ kill -l
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL
 5) SIGTRAP	 6) SIGABRT	 7) SIGEMT	 8) SIGFPE
 9) SIGKILL	10) SIGBUS	11) SIGSEGV	12) SIGSYS
13) SIGPIPE	14) SIGALRM	15) SIGTERM	16) SIGURG
17) SIGSTOP	18) SIGTSTP	19) SIGCONT	20) SIGCHLD
21) SIGTTIN	22) SIGTTOU	23) SIGIO	24) SIGXCPU
25) SIGXFSZ	26) SIGVTALRM	27) SIGPROF	28) SIGWINCH
29) SIGINFO	30) SIGUSR1	31) SIGUSR2

OR 

MTVL1288aeea2-82:octopress tdongsi$ man signal
```

I believe once `EXIT` signal is used, other signals such as `INT` or `TERM` are redundant for cleanup purposes.
`EXIT` or 0 signal is for when the shell exits, an event that also happens `INT` or `TERM` signal is received.
It is easy to confirm that in the following tests:

``` plain Trap tests in Mac OSX
MTVL1288aeea2-82:code tdongsi$ cat test_trap.sh
#!/bin/bash
trap 'echo TRAP CAPTURED' EXIT
sleep 3

MTVL1288aeea2-82:code tdongsi$ ./test_trap.sh & sleep 1; kill -INT %1
[1] 6613
TRAP CAPTURED
[1]+  Interrupt: 2            ./test_trap.sh

MTVL1288aeea2-82:code tdongsi$ ./test_trap.sh & sleep 1; kill -TERM %1
[1] 6624
TRAP CAPTURED
[1]+  Terminated: 15          ./test_trap.sh
```

As shown above, a lone `EXIT` is enough to capture `INT` and `TERM` signals. 
Having said that, I understand that my tests can only verify bash on my Mac OSX.
There are probably different shell variants on different operating systems which do not always work that way.

``` plain Problem of trapping multiple signals
MTVL1288aeea2-82:code tdongsi$ cat test_trap.sh
#!/bin/bash
trap 'echo TRAP CAPTURED' INT TERM EXIT
sleep 3

MTVL1288aeea2-82:code cdongsi$ ./test_trap.sh & sleep 1; kill -INT %1
[1] 7258
TRAP CAPTURED
TRAP CAPTURED
[1]+  Exit 130                ./test_trap.sh

MTVL1288aeea2-82:code cdongsi$ ./test_trap.sh & sleep 1; kill -TERM %1
[1] 7278
Terminated: 15
TRAP CAPTURED
TRAP CAPTURED
[1]+  Exit 143                ./test_trap.sh
```

To make sure the EXIT signal handler will not be executed twice (which is almost always not what you want) it should always set to be ignored or reset within the definition of the EXIT signal handler itself.

### References

1. [Signals and Traps](http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_12.html)
1. http://redsymbol.net/articles/bash-exit-traps/
1. http://www.alittlemadness.com/2012/06/25/bash-tip-reliable-clean-up-with-trap/


