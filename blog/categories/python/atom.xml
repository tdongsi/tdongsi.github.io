<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2016-05-23T21:04:23-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert Python Objects to JSON (Ordered Keys)]]></title>
    <link href="http://tdongsi.github.io/blog/2016/04/25/convert-python-objects-to-json-ordered-keys/"/>
    <updated>2016-04-25T01:26:22-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/04/25/convert-python-objects-to-json-ordered-keys</id>
    <content type="html"><![CDATA[<p>In the JSON output shown in the last <a href="/blog/2016/04/21/convert-python-objects-to-json/">post</a>, the keys are printed out of order since they are unordered in the internal dictionary <code>__dict__</code>.
In theory, it does not matter when converting to/from JSON.
However, it sometimes makes sense for the keys to be printed in order, especially when we need to look for two keys in JSON next to each other or one key before another.
For example, in the <code>Config</code> object in the last post, it is better to see <code>source</code> and <code>target</code> configurations side by side and, then, get to know what kind of tests from <code>testName</code> key before reading details of tests in <code>queries</code> key.
Setting <code>sort_keys</code> option in <code>json.dump</code> is not applicable here since the keys will be sorted by their names, not their order of appearance like we do in the Java example.</p>

<p>To have the keys appear in order as defined when converting to JSON, we have two options:</p>

<h3>Option 1: use OrderedDict as your base class</h3>

<p>This option is just a quick and dirty workaround: our <code>Config</code> class should extend <code>collections.OrderedDict</code> class and, in the code, we refer to <code>object["att"]</code> instead of <code>object.att</code>.</p>

<pre><code class="python Example of using OrderedDict as your Config class">class OrderedConfig(collections.OrderedDict):
    pass

def ordered_config_file(filename, query_generator):

    hive_source = OrderedConfig()
    hive_source["type"] = "hive"
    hive_source["url"] = "jdbc:hive2://192.168.5.184:10000/DWH"
    vertica_target = OrderedConfig()
    vertica_target["type"] = "vertica"
    vertica_target["url"] = "jdbc:vertica://192.168.5.174:5433/VMart"

    config = OrderedConfig()
    config["source"] = hive_source
    config["target"] = vertica_target
    config["testName"] = "count"
    config["queries"] = query_generator

    with open(filename, 'w') as config_file:
        json.dump(config, config_file, indent=4)
</code></pre>

<p>We have some extra typing, but in general, it is good enough for some configuration objects.
Note that you can now dump your configuration object directly into file because it now behaves like a dictionary.</p>

<pre><code class="json Pretty print">{
    "source": {
        "type": "hive", 
        "url": "jdbc:hive2://192.168.5.184:10000/DWH"
    }, 
    "target": {
        "type": "vertica", 
        "url": "jdbc:vertica://192.168.5.174:5433/VMart"
    }, 
    "testName": "count", 
    "queries": "..."
}
</code></pre>

<h3>Option 2: use OrderedDict as your attribute dictionary.</h3>

<p>In order to refer to attributes directly as <code>object.att</code> and still get JSON ordered like in the Java example, it will need some works.
Note that the obvious solution <code>__dict__ = OrderedDict()</code> will NOT work due to a Python bug.</p>

<pre><code class="python Failed attempt due to a Python bug">class Config(object):
   def __init__(self):
       self.__dict__ = collections.OrderedDict()


  with open(filename, 'w') as config_file:
      json.dump(config, config_file, default=lambda o: o.__dict__, indent=4)
</code></pre>

<p>I got an empty object as my JSON output.
It can be pretty confusing since we can still refer to attributes using standard notation <code>object.att</code> and correctly retrieve values.
After searching the web, I finally figured out that it is a known bug, as documented <a href="https://mail.python.org/pipermail/python-bugs-list/2006-April/033155.html">here</a>.
It says that if <code>__dict__</code> is not an actual <code>dict()</code>, then it is ignored, and attribute lookup fails if using that dictionary directly.</p>

<p>To work around that problem, we have to use <code>OrderedDict</code> as an attribute in <code>__dict__</code> and modify <code>__getattr__</code> and <code>__setattr__</code> methods to use this <code>OrderedDict</code> instead.
The modified <code>Config</code> class and modified <code>default=</code> parameter is shown below.</p>

<pre><code class="python Modified Config class">class Config(object):

    ODICT = "odict"

    def __init__(self):
        self.__dict__[self.ODICT] = collections.OrderedDict()

    def __getattr__(self, item):
        return self.__dict__[self.ODICT][item]

    def __setattr__(self, key, value):
        self.__dict__[self.ODICT][key] = value
</code></pre>

<pre><code class="python Modified JSON dump">    with open(filename, 'w') as config_file:
        json.dump(config, config_file, default=lambda o: o.__dict__[Config.ODICT], indent=4)
</code></pre>

<p>The JSON output now has the keys appear in the order as they are defined, similar to Jackson example above:</p>

<pre><code class="json Pretty print with ordering">{
    "source": {
        "type": "hive", 
        "host": "192.168.5.184", 
        "user": "cloudera", 
        "password": "password", 
        "url": "jdbc:hive2://192.168.5.184:10000/DWH"
    }, 
    "target": {
        "type": "vertica", 
        "host": "192.168.5.174", 
        "user": "dbadmin", 
        "password": "password", 
        "url": "jdbc:vertica://192.168.5.174:5433/VMart"
    }, 
    "testName": "count", 
    "queries": "..."
}
</code></pre>

<p>With that, for configuration editing purposes, using the Python object to JSON conversion is more convenient than Java (POJO) to JSON conversion.
We can add new custom attributes if needed without having to define a new class.
The <code>Config</code> class is all you need for all configuration writing.
The full working code for converting Python object to JSON is shown below.</p>

<pre><code class="python Full code">import collections
import json

class Config(object):

    ODICT = "odict"

    def __init__(self):
        self.__dict__[self.ODICT] = collections.OrderedDict()

    def __getattr__(self, item):
        return self.__dict__[self.ODICT][item]

    def __setattr__(self, key, value):
        self.__dict__[self.ODICT][key] = value

    pass

def get_hive_config():
    """ Get pre-defined Hive configuration.

    :return: Config object for Hive.
    """

    conn = Config()
    conn.type = "hive"
    conn.host = "192.168.5.184"
    conn.user = "cloudera"
    conn.password = "password"
    conn.url = "jdbc:hive2://192.168.5.184:10000/DWH"

    return conn

def get_vertica_config():
    """ Get pre-defined Vertica configuration.

    :return: Config object for Vertica.
    """

    conn = Config()
    conn.type = "vertica"
    conn.host = "192.168.5.174"
    conn.user = "dbadmin"
    conn.password = "password"
    conn.url = "jdbc:vertica://192.168.5.174:5433/VMart"

    return conn

def create_config_file(filename, query_generator):

    hive_source = get_hive_config()
    vertica_target = get_vertica_config()

    config = Config()
    config.source = hive_source
    config.target = vertica_target
    config.testName = "count"
    config.queries = query_generator

    with open(filename, 'w') as config_file:
        json.dump(config, config_file, default=lambda o: o.__dict__[Config.ODICT], indent=4)

def main():

    FILE_NAME = "hive_vertica_count.json"
    query_generator = generate_count_queries()
    create_config_file(FILE_NAME, query_generator)

if __name__ == "__main__":
    main()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert Python Objects to JSON]]></title>
    <link href="http://tdongsi.github.io/blog/2016/04/21/convert-python-objects-to-json/"/>
    <updated>2016-04-21T22:09:50-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/04/21/convert-python-objects-to-json</id>
    <content type="html"><![CDATA[<h3>JSON serialization in Java</h3>

<p>In Java, it is pretty straight-forward to convert Java objects (POJO) to JSON using <a href="https://github.com/FasterXML/jackson">Jackson library</a>.
The following code will convert an example POJO to JSON:</p>

<pre><code class="java Example POJO">public class Config {
    public String type;
    public String host;
    public String user;
    public String password;
    public String url;
}
</code></pre>

<pre><code class="java Jackson examples">ObjectMapper mapper = new ObjectMapper();
Config conn = new Config();
conn.type = "hive";
conn.host = "192.168.5.184";
conn.user = "cloudera";
conn.password = "password";
conn.url = "jdbc:hive2://192.168.5.184:10000/DWH";

// POJO to JSON in file
mapper.writeValue(new File("config.json"), obj);
// POJO to JSON in String
String jsonInString = mapper.writerWithDefaultPrettyPrinter()
        .writeValueAsString(conn);
</code></pre>

<p>The JSON output is shown below.
Note that the keys (e.g., &ldquo;type&rdquo;, &ldquo;host&rdquo;) appear in the same order as defined in the <code>Config</code> class.
This will become important later when we try to convert Python objects to JSON.</p>

<pre><code class="json JSON representation of Config object">{
  "type" : "hive",
  "host" : "192.168.5.184",
  "user" : "cloudera",
  "password" : "password",
  "url" : "jdbc:hive2://192.168.5.184:10000/DWH"
}
</code></pre>

<h3>JSON serialization in Python</h3>

<p>In Python, we have <code>json</code> module to convert a <em>serializable</em> object to JSON format.
The first attempt at JSON serialization in Python may look like this, with a slightly complex Python object is intentionally used as an example:</p>

<pre><code class="python First attempt at JSON serialization">class Config(object):
    pass


def get_hive_config():
    """ Get pre-defined Hive configuration.

    :return: Config object for Hive.
    """

    conn = Config()
    conn.type = "hive"
    conn.host = "192.168.5.184"
    conn.user = "cloudera"
    conn.password = "password"
    conn.url = "jdbc:hive2://192.168.5.184:10000/DWH"

    return conn


def get_vertica_config():
    """ Get pre-defined Vertica configuration.

    :return: Config object for Vertica.
    """

    conn = Config()
    conn.type = "vertica"
    conn.host = "192.168.5.174"
    conn.user = "dbadmin"
    conn.password = "password"
    conn.url = "jdbc:vertica://192.168.5.174:5433/VMart"

    return conn


def create_config_file(filename, query_generator):

    hive_source = get_hive_config()
    vertica_target = get_vertica_config()

    config = Config()
    config.source = hive_source
    config.target = vertica_target
    config.testName = "count"
    config.queries = query_generator

    with open(filename, 'w') as config_file:
        json.dump(config, config_file)


def main():

    FILE_NAME = "hive_vertica_count.json"
    query_generator = generate_count_queries()
    create_config_file(FILE_NAME, query_generator)
</code></pre>

<p>This first attempt with <code>json.dump(config, config_file)</code> will fail with the following error:</p>

<pre><code class="python JSON serialization error">TypeError: &lt;__main__.Config object at 0x10ab824d0&gt; is not JSON serializable
</code></pre>

<p>As the message indicates, <code>Config</code> object is not JSON serializable.
<code>json.dump</code> function expects a serializable object such as one of Python standard object types (see Python to JSON mapping table below) or their subclasses.</p>

<table>
<thead>
<tr>
<th> Python </th>
<th> JSON </th>
</tr>
</thead>
<tbody>
<tr>
<td> dict </td>
<td> object </td>
</tr>
<tr>
<td> list, tuple </td>
<td> array </td>
</tr>
<tr>
<td> str, unicode </td>
<td> string </td>
</tr>
<tr>
<td> int, long, float </td>
<td> number </td>
</tr>
<tr>
<td> True </td>
<td> true </td>
</tr>
<tr>
<td> False </td>
<td> false </td>
</tr>
<tr>
<td> None </td>
<td> null </td>
</tr>
</tbody>
</table>


<p><br></p>

<p>The solution for that problem is to specify the <code>default</code> parameter with a function that returns object&rsquo;s <code>__dict__</code> attribute.
<code>__dict__</code> is the internal attribute dictionary that contains all attributes associated with an object.
Object attribute references are translated to lookups in this dictionary, e.g., <code>o.x</code> is translated to <code>o.__dict__["x"]</code>.</p>

<pre><code class="python Correct options">    with open(filename, 'w') as config_file:
        json.dump(config, config_file, default=lambda o: o.__dict__, indent=4)
</code></pre>

<pre><code class="python Pretty print without ordering">{
    "source": {
        "url": "jdbc:hive2://192.168.5.184:10000/DWH", 
        "host": "192.168.5.184", 
        "password": "password", 
        "type": "hive", 
        "user": "cloudera"
    }, 
    "queries": "...", 
    "target": {
        "url": "jdbc:vertica://192.168.5.174:5433/VMart", 
        "host": "192.168.5.174", 
        "password": "password", 
        "type": "vertica", 
        "user": "dbadmin"
    }, 
    "testName": "count"
}
</code></pre>

<p>Note that simply using <code>json.dump(config.__dict__, config_file)</code> will NOT work if any attribute of the object is another complex object (e.g., <code>source</code> and <code>target</code> attributes in this example).
For more complex objects such as those include <code>set</code>s, we may have to define our own Encoder that extends <code>json.JSONEncoder</code> and provide it to <code>json.dump</code> function.
The next <a href="/blog/2016/04/25/convert-python-objects-to-json-ordered-keys/">post</a> will discuss how to print keys in order of which they are defined, like in the Java example.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rabin-Miller Primality Test]]></title>
    <link href="http://tdongsi.github.io/blog/2016/04/20/rabin-miller-primality-test/"/>
    <updated>2016-04-20T22:07:17-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/04/20/rabin-miller-primality-test</id>
    <content type="html"><![CDATA[<p>In Qualification Round of Google Code Jam 2016, there is an interesting <a href="https://code.google.com/codejam/contest/6254486/dashboard#s=p2">Coin Jam problem</a>.
The summarized problem statement is as follows:</p>

<p><blockquote><p>A jamcoin is a string of N ≥ 2 digits with the following properties:</p></p><p><p>1) Every digit is either 0 or 1.<br/>2) The first digit is 1 and the last digit is 1.<br/>3) If you interpret the string in any base between 2 and 10, inclusive, the resulting number is not prime.</p></p><p><p>Can you produce J different jamcoins of length N, along with proof that they are legitimate?</p></p><p><p>For example, for the jamcoin 1001, a possible set of nontrivial divisors for the base 2 through 10 interpretations of the jamcoin would be: 3, 7, 5, 6, 31, 8, 27, 5, and 77, respectively.</p></blockquote></p>

<p>The name &ldquo;jamcoin&rdquo; is probably a play on Bitcoin, since it deals with prime/composite numbers, a topic commonly found in cryptography.
In this problem, we apparently need to determine lots of large numbers (32 digits for Large dataset) if they are composite numbers.</p>

<p>The very first idea, building a sieve of primes for up to 10<sup>16</sup> for trial division, seems not feasible for this problem since it will take lots of time and space (e.g., $\mathcal{O}(n\log{}n \log{}\log{}n)$ and $\mathcal{O}(n)$ for <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">sieve of Eratosthenes</a>, respectively).</p>

<p>Note that we don&rsquo;t need to find all but only J of those jamcoins.
Therefore, we can keep iterating over all possible &ldquo;jam coins&rdquo; to find the first J numbers that satisfy the conditions.
To quickly determine if a large number is a composite/prime number, we can use Rabin-Miller primality test.
For reference, the Rabin-Miller primality test is based on the following <a href="http://mathworld.wolfram.com/Rabin-MillerStrongPseudoprimeTest.html">theorem</a>:</p>

<ul>
<li>If p is a prime, let s be such that $p-1 = 2^{s}d$ and $d$ is odd. Then for any $1 \leq n \leq p-1$, one of two things happens:</li>
</ul>


<p><span class="math display">\[\begin{align}
&amp; n^d = 1 \mod p \mbox{, or} \\
&amp; n^{2^j d} = -1 \mod p \mbox{ for some } 0 \leq j &lt; s.
\end{align}\]</span></p>


<p>In Rabin-Miller test, we pick $k$ random samples of $n$ in the interval $1 \leq n \leq p-1$.
If p is not a prime, then it is at least a &frac34; chance that a randomly chosen $n$ will be a fail.
For large $k$ independent tests, the probability that it passes all trials is (&frac14;)<sup>k</sup> ~ 0.</p>

<p>The test is very fast, with runtime complexity of $k \log{}^3 n$ where k is the trial number.
Since we looks for composite numbers, this algorithm is even better-suited: even if a number passes all Rabin-Miller trials, we are still NOT sure if it is a prime.
However, if a number fails one of Rabin-Miller trial, we are sure that it is a composite number.</p>

<p>Implementation of this algorithm in different languages can be found on the web, such as <a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Primality_Testing">here</a>.
I re-implemented this algorithm in Python (shown below) since 1) it is simple enough (just slightly more complex than Euclid&rsquo;s <code>gcd</code> algorithm), and 2) I want to avoid disqualification from Google Code Jam for plagiarism.</p>

<p><figure class='code'><figcaption><span>My implementation of Rabin-Miller test </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">decompose</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="n">Decompose</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">exp</span> <span class="o">*</span> <span class="n">d</span> <span class="n">where</span> <span class="n">d</span> <span class="ow">is</span> <span class="n">odd</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">:</span><span class="n">param</span> <span class="n">num</span><span class="p">:</span> <span class="n">the</span> <span class="nb">input</span> <span class="n">number</span><span class="o">.</span>
</span><span class='line'><span class="p">:</span><span class="k">return</span><span class="p">:</span> <span class="p">(</span><span class="n">exp</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="n">where</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">exp</span> <span class="o">*</span> <span class="n">d</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">exp = 0</span>
</span><span class='line'><span class="sd">while num &amp;amp; 1 == 0:  # check num % 2 == 0 but probably faster</span>
</span><span class='line'><span class="sd">    num &amp;gt;&amp;gt;= 1</span>
</span><span class='line'><span class="sd">    exp += 1</span>
</span><span class='line'><span class="sd">return exp, num</span>
</span><span class='line'><span class="sd">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;def is_pseudo_prime(prime, trial=10):</span>
</span><span class='line'><span class="sd">    &amp;ldquo;&amp;rdquo;&amp;ldquo; Rabin Miller test of primality.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;pre&gt;&lt;code&gt;:param prime: the input number.</span>
</span><span class='line'><span class="sd">:param trial: Number of Rabin-Miller trial.</span>
</span><span class='line'><span class="sd">:return: True if all trials passed, False if not.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># small primes &amp;lt; 100</span>
</span><span class='line'><span class="n">SMALL_PRIMES</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span>
</span><span class='line'>                <span class="mi">43</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">97</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rabin_miller_trial</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Check if prime pass the Rabin-Miller trial.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param num: a random &quot;witness&quot; of primality.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :return: True if composite, False if probably prime.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">remainder</span><span class="p">,</span> <span class="n">prime</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># For first iteration, 1 or -1 remainder implies prime</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">num</span> <span class="o">==</span> <span class="n">prime</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># For next iterations, -1 implies prime, others imply composite</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">exponent</span><span class="p">):</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">prime</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">prime</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Labor saving steps</span>
</span><span class='line'><span class="k">if</span> <span class="n">prime</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">SMALL_PRIMES</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">p</span> <span class="o">*</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">prime</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prime</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Starting Rabin-Miller algorithm</span>
</span><span class='line'><span class="n">exponent</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">decompose</span><span class="p">(</span><span class="n">prime</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">trial</span><span class="p">):</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">prime</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rabin_miller_trial</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Some notes about this implementation:</p>

<ul>
<li>Because the function <code>rabin_miller_trial</code> is unlikely reused anywhere else, it is nested inside <code>is_pseudo_prime</code> to keep its function signature simple, intuitive.</li>
<li>Use <code>pow(x, y, z)</code> in Python to compute more efficiently than <code>(x ** y % z)</code>.</li>
<li><code>random.randint(2, prime - 2)</code> is used since it is useless to pick <code>1</code> and <code>p-1</code> and trials would be wasted.</li>
<li>Labor saving steps: we first test for divisibility by small primes that are less than 100 before starting Rabin-Miller trials.</li>
</ul>


<p>Going back to the Coin Jam problem, note that the problem requires us not only to check if numbers are composite but also find any non-trivial factor for those numbers.
Fortunately, as explained in <a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test">Wikipedia</a>, we can modify the Rabin-Miller test to add greatest common divisor <code>gcd</code> calculations to find a factor of p with minimal additional computational cost.
The modified Rabin-Miller for finding factor of composite numbers is shown below.</p>

<p><figure class='code'><figcaption><span>Modified Rabin-Miller test for finding a factor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">fractions</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">find_factor</span><span class="p">(</span><span class="n">prime</span><span class="p">,</span> <span class="n">trial</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="n">Modify</span> <span class="n">Rabin</span> <span class="n">Miller</span> <span class="n">test</span> <span class="n">of</span> <span class="n">primality</span> <span class="n">to</span> <span class="n">find</span> <span class="n">factor</span> <span class="n">of</span> <span class="n">composite</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">:</span><span class="n">param</span> <span class="n">prime</span><span class="p">:</span> <span class="n">the</span> <span class="nb">input</span> <span class="n">number</span><span class="o">.</span>
</span><span class='line'><span class="p">:</span><span class="n">param</span> <span class="n">trial</span><span class="p">:</span> <span class="n">Number</span> <span class="n">of</span> <span class="n">Rabin</span><span class="o">-</span><span class="n">Miller</span> <span class="n">trials</span><span class="o">.</span>
</span><span class='line'><span class="p">:</span><span class="k">return</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">prime</span> <span class="p">(</span><span class="nb">all</span> <span class="n">trials</span> <span class="n">passed</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">composite</span><span class="o">.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sd"># small primes &amp;lt; 100</span>
</span><span class='line'><span class="sd">SMALL_PRIMES = [ 2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,</span>
</span><span class='line'><span class="sd">              43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97, 101]</span>
</span><span class='line'>
</span><span class='line'><span class="sd">def rabin_miller_trial(num):</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span> <span class="n">Find</span> <span class="n">factor</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span> <span class="n">Rabin</span><span class="o">-</span><span class="n">Miller</span> <span class="n">trial</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">:</span><span class="n">param</span> <span class="n">num</span><span class="p">:</span> <span class="n">a</span> <span class="n">random</span> <span class="s">&quot;witness&quot;</span> <span class="n">of</span> <span class="n">primality</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">:</span><span class="k">return</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">composite</span><span class="p">,</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">probably</span> <span class="n">prime</span><span class="o">.</span>
</span><span class='line'>    <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">    num = pow(num, remainder, prime)</span>
</span><span class='line'>
</span><span class='line'><span class="s">    # For first iteration, 1 or -1 remainder implies prime</span>
</span><span class='line'><span class="s">    if num == 1 or num == prime - 1:</span>
</span><span class='line'><span class="s">        return 1</span>
</span><span class='line'><span class="s">    else:</span>
</span><span class='line'><span class="s">        gcd = fractions.gcd(num-1, prime)</span>
</span><span class='line'><span class="s">        if gcd &amp;gt; 1:</span>
</span><span class='line'><span class="s">            return gcd</span>
</span><span class='line'>
</span><span class='line'><span class="s">    # For next iterations, -1 implies prime, others imply composite</span>
</span><span class='line'><span class="s">    for _ in xrange(exponent):</span>
</span><span class='line'><span class="s">        num = pow(num, 2, prime)</span>
</span><span class='line'><span class="s">        if num == prime - 1:</span>
</span><span class='line'><span class="s">            return 1</span>
</span><span class='line'><span class="s">        else:</span>
</span><span class='line'><span class="s">            gcd = fractions.gcd(num-1, prime)</span>
</span><span class='line'><span class="s">            if gcd &amp;gt; 1:</span>
</span><span class='line'><span class="s">                return gcd</span>
</span><span class='line'>
</span><span class='line'><span class="s">    # It is a composite, but could not find a factor</span>
</span><span class='line'><span class="s">    return -1</span>
</span><span class='line'>
</span><span class='line'><span class="s"># Labor saving steps</span>
</span><span class='line'><span class="s">if prime &amp;lt; 2:</span>
</span><span class='line'><span class="s">    raise ValueError(&quot;Unexpected input&quot;)</span>
</span><span class='line'><span class="s">for p in SMALL_PRIMES:</span>
</span><span class='line'><span class="s">    if p * p &amp;gt; prime:</span>
</span><span class='line'><span class="s">        return 1</span>
</span><span class='line'><span class="s">    if prime % p == 0:</span>
</span><span class='line'><span class="s">        return p</span>
</span><span class='line'>
</span><span class='line'><span class="s"># Starting Rabin-Miller algorithm</span>
</span><span class='line'><span class="s">exponent, remainder = decompose(prime - 1)</span>
</span><span class='line'>
</span><span class='line'><span class="s">for _ in xrange(trial):</span>
</span><span class='line'><span class="s">    num = random.randint(2, prime - 2)</span>
</span><span class='line'><span class="s">    factor = rabin_miller_trial(num)</span>
</span><span class='line'><span class="s">    if factor &amp;gt; 1:</span>
</span><span class='line'><span class="s">        return factor</span>
</span><span class='line'>
</span><span class='line'><span class="s">return 1</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The final solution to the problem, using the modified Rabin-Miller test above, can be found in this <a href="https://github.com/tdongsi/python/blob/master/CodeJam/codejam/y2016/codejam.py">file</a> (search for CoinJam class).
Note that the <a href="https://code.google.com/codejam/contest/6254486/dashboard#s=a&amp;a=2">suggested solution</a> to this problem is even nicer by using a mathematical trick and the fact that J is pretty small (relative to 10<sup>N</sup>).
If J is much larger and close to the number of all jamcoins with length N available (e.g., more than 90%), then using modified Rabin-Miller test is probably required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Friend Forever]]></title>
    <link href="http://tdongsi.github.io/blog/2016/04/18/best-friend-forever/"/>
    <updated>2016-04-18T15:44:57-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/04/18/best-friend-forever</id>
    <content type="html"><![CDATA[<p>BFF is the name of the <a href="https://code.google.com/codejam/contest/4304486/dashboard#s=p2">problem C</a> in Google Code Jam 2016, Round 1A.
The summarized problem statement is as follows:</p>

<p><blockquote><p>Every kid in your class has a single best friend forever (BFF).<br/>You want to form the largest possible circle of kids such that each kid in the circle is sitting directly next to their BFF, either to the left or to the right.<br/>Give a line that contains N integers F1, F2, &hellip;, FN, where Fi is the student ID number of the BFF of the kid with student ID i, find the greatest number of kids that can be in the circle.</p></blockquote></p>

<p>I&rsquo;m never a strong <a href="https://en.wikipedia.org/wiki/Competitive_programming">sport programmer</a>.
I&rsquo;d like to approach to the problem more methodically.
While the first three example test cases provided in the problem statement is pretty straight forward, the last example <code>7 8 10 10 9 2 9 6 3 3</code> is not so.
Such number chains look like graphs or linked-lists and I would first try to plot them out:</p>

<p><img class="center" src="/images/python/bff.png" title="BFF example" ></p>

<p>I initially thought that problem C is some dynamic programming problem (base case N=2) and tried to think in that direction.
After looking at the graph plot for the last example (shown above), it is apparent to me that is not the case and I actually need some graph algorithm.
The above plot also gives me some key observations to solve the problem:</p>

<ol>
<li>Each cycle in the directed graph is a candidate for the solution circle.</li>
<li>If the kids form a cycle with length >= 3, then there is no way to insert another kid into that cycle to form a circle that satisfies the requirements.

<ul>
<li>In the example above, for the cycle 2->8->6->2, if there is a kid that is BFF to (i.e., a node pointing to) any one of them, we cannot create a larger circle to include that kid.</li>
<li>The cycle is a candidate for solution itself. Some cycles can get really large.</li>
</ul>
</li>
<li>If the kids form a cycle with length == 2 (called &ldquo;mutual BFFs&rdquo; in my code), then you can keep chaining kids who are friends of friends to those kids to form a &ldquo;path&rdquo;. You can create a circle from <strong>one or more</strong> &ldquo;paths&rdquo;.

<ul>
<li>In the example above, for the cycle 3-10, we can chain friends of friends 1->7->9->3 and 10&lt;-4 to form a longer chain 1-7-9-3-10-4. This path is another solution candidate.</li>
<li>After comparing length with the other candidate (cycle 2->8->6->2), the &ldquo;path&rdquo; is the solution circle for this particular example.</li>
</ul>
</li>
</ol>


<p>Based on those observations, the solution is pretty &ldquo;simple&rdquo;:</p>

<ol>
<li>From the list of BFFs, construct a directed graph.</li>
<li>Find all the simple cycles in the directed graph. <em>&lt;- I lied, this is not simple.</em></li>
<li>Initialize max_length = -1. For each simple cycle:

<ol>
<li>If cycle length is greater than 2, it is a candidate. Compare its length and update max_length if needed.</li>
<li>If cycle length is equal to 2.

<ol>
<li>Find the longest friends of friends chain that is connected to either kid in this cycle.</li>
<li>Find the path length, add to path_sum, and update max_length if needed.</li>
</ol>
</li>
</ol>
</li>
</ol>


<p>Constructing the directed graph and finding cycles in step 2 is not trivial but can be made easy using <a href="http://networkx.readthedocs.org/en/stable/"><code>networkx</code></a> module, as shown below (together with plotting using <code>matlplotlib</code>).</p>

<pre><code class="python Construct and plot directed graph with networkx">import matplotlib.pyplot as plt
import networkx as nx

class Bff(object):
    """
    https://code.google.com/codejam/contest/4304486/dashboard#s=p2
    """
    def __init__(self, filename):
        """ Initialize with the given filename.

        :param filename: input file path
        :return:
        """
        self._filename = filename
        pass

    def draw(self, input):
        """ Draw the string that represents the bff network.

        The input string contains N integers F1, F2, ..., FN, 
        where Fi is the student ID number of the BFF
        of the kid with student ID i.

        :param input: the string that represents the bff network.
        :return:
        """
        # Construct the directed graph
        bffs = [int(e.strip()) for e in input.split(' ')]
        nodes = [i+1 for i in xrange(len(bffs))]
        gr = nx.DiGraph()
        gr.add_nodes_from(nodes)
        gr.add_edges_from([e for e in zip(nodes, bffs)])

        # nx.simple_cycles(gr)
        nx.draw_networkx(gr)
        plt.savefig(self._filename)

def main():
    plot = Bff("bff.png")
    # plot.draw("2 1 6 3 8 4 6 5")
    plot.draw("6 1 6 5 4 1 5 10 3 7")
    pass
</code></pre>

<p>Disclaimer: I know my solution is probably not accepted in Code Jam for using external library, and that is fine :D.
It is not like I can implement <a href="https://en.wikipedia.org/wiki/Johnson%27s_algorithm">Johnson&rsquo;s algorithm</a> for finding cycles within two hours.
<a href="https://github.com/tdongsi/python/blob/master/CodeJam/codejam/y2016/codejam.py">My solution</a> is to check if my thinking is correct.</p>

<p>Note that one mistake we might make is to treat each &ldquo;path&rdquo; (found from cycles of length 2) as a solution candidate instead of combining them into a candidate (Note <strong>&ldquo;one or more&rdquo;</strong> in observation 3).
The reason is that all the &ldquo;paths&rdquo; can be chained together to form a larger cycle (see graph below).
My first solution was rejected for Small Input dataset due to this mistake.
Again, by plotting test cases in the Small dataset, the following test case would came up and makes me realize my mistake:</p>

<p><img class="center" src="/images/python/bff2.png" title="All paths" ></p>

<p>Some morals of the story:</p>

<ul>
<li>Plotting helps. Without looking at the graphs, I would wander into the wrong direction, looking for a DP solution.</li>
<li>In real-world problem solving, you don&rsquo;t need to solve the problem in two hours. Even better, you don&rsquo;t need to re-invent the wheel. Therefore, it is better to take steps methodically to arrive at a scalable solution (i.e., plotting, using libraries, testing if needed).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking Current Date and Time in Python]]></title>
    <link href="http://tdongsi.github.io/blog/2016/01/27/python-1-mock-datetime-freezegun/"/>
    <updated>2016-01-27T17:36:53-08:00</updated>
    <id>http://tdongsi.github.io/blog/2016/01/27/python-1-mock-datetime-freezegun</id>
    <content type="html"><![CDATA[<h3>Calendar types</h3>

<p>There are surprisingly many types of calendar.
Some of them are: regular calendar, lunar calendar, fiscal calendar, retail calendar.
See <a href="https://github.com/tdongsi/calendars">here</a> for more information of each calendar type.
Out of the above calendar types, retail calendar seems to have more complex rules.
However, this calendar type is frequently used in industries like retail and manufacturing for ease of planning around it.</p>

<h3>Mocking current time in Python</h3>

<p>Due to retail calendar&rsquo;s desirable characteristics, we may have code that work with retail calendars in commercial applications eventually.
I ended up working with a utility Python module for retail calendar with functions which return values based on current time/date.
For example, a utility function to check if a given date is in the current 544 year works like this:</p>

<pre><code class="python Original version">def is_current_year_544(given_date):
    my_today = datetime.date.today()
    if year_start_544(my_today) &lt;= given_date &lt;= year_end_544(my_today):
        return "Y"
    else:
        return "N"
</code></pre>

<p>Some utility functions in that module are even more complicated than this example function.
For those, I think calling <code>today</code> or <code>now</code> inside those functions is a bad design.
They are essentially another <em>variable</em> in those functions (i.e., when do you run?), and it is better to expose that variable as an input parameter.
In addition, being able to specify what &ldquo;today&rdquo; or &ldquo;now&rdquo; value is will make automated unit testing easier.
For example, I want to know how my Python programs work if it runs on a particular date, such as end of retail year July 29, 2006.
A probably better, more testable function would be something like this.</p>

<pre><code class="python More desirable">def is_current_year_544(given_date, run_date = datetime.date.today()):
    if year_start_544(run_date) &lt;= given_date &lt;= year_end_544(run_date):
        return "Y"
    else:
        return "N"
</code></pre>

<p>However, in reality, you sometimes have to live with the original utility Python module.
Then, the workaround for unit testing is to &ldquo;mock&rdquo; current date and time, i.e., overriding those returned by <code>today</code> and <code>now</code> methods with some specific values.
In Python, it can be done by using some mocking framework, such as illustrated <a href="http://www.voidspace.org.uk/python/mock/examples.html#partial-mocking">here</a>.
Fortunately, my life was made even easier with <a href="https://github.com/spulec/freezegun"><code>freezegun</code> library</a>.
To install <code>freezegun</code> on Mac OSX, simply run</p>

<pre><code class="plain   ">pip install freezegun
</code></pre>

<p>Using this <code>freezegun</code> library, I can easily specify my &ldquo;current date&rdquo; as &ldquo;July 29, 2006&rdquo; by adding the following decorator with some string &ldquo;2006-07-29&rdquo; for that date.</p>

<pre><code class="python Unit test with mocking">    @freeze_time("2006-07-29")
    def test_year544_end(self):
        """
        Mock today() at 2006-07-29
        """
        self._verify_544_methods()
</code></pre>

<p>For full usage of <code>freezegun</code>, refer to its <a href="https://github.com/spulec/freezegun">quickstart guide</a>.
It should be noted that <code>freezegun</code> can mock <code>datetime</code> calls from other modules and it works great for testing with <code>datetime</code> calls.
However, you might encounter some occasional failures in your unit tests when working with <code>time</code> module.
From my personal experience, in those cases, note that time zones must be accounted for when mocking with <code>time</code> module by specifying <code>tz_offset</code> in the decorator <code>freeze_time</code>.</p>

<h3>External Links</h3>

<ul>
<li><a href="https://github.com/spulec/freezegun">freeze_gun</a></li>
<li><a href="https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar">Retail Calendar</a></li>
<li><a href="http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm">ISO Calendar</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
