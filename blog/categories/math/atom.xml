<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Math | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/math/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2021-03-13T03:10:19-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rabin-Miller Primality Test]]></title>
    <link href="http://tdongsi.github.io/blog/2016/04/20/rabin-miller-primality-test/"/>
    <updated>2016-04-20T22:07:17-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/04/20/rabin-miller-primality-test</id>
    <content type="html"><![CDATA[<p>In Qualification Round of Google Code Jam 2016, there is an interesting <a href="https://code.google.com/codejam/contest/6254486/dashboard#s=p2">Coin Jam problem</a>.
The summarized problem statement is as follows:</p>

<p><blockquote><p>A jamcoin is a string of N â‰¥ 2 digits with the following properties:</p></p><p><p>1) Every digit is either 0 or 1.<br/>2) The first digit is 1 and the last digit is 1.<br/>3) If you interpret the string in any base between 2 and 10, inclusive, the resulting number is not prime.</p></p><p><p>Can you produce J different jamcoins of length N, along with proof that they are legitimate?</p></p><p><p>For example, for the jamcoin 1001, a possible set of nontrivial divisors for the base 2 through 10 interpretations of the jamcoin would be: 3, 7, 5, 6, 31, 8, 27, 5, and 77, respectively.</p></blockquote></p>

<!--more-->


<p>The name &ldquo;jamcoin&rdquo; is probably a play on Bitcoin, since it deals with prime/composite numbers, a topic commonly found in cryptography.
In this problem, we apparently need to determine lots of large numbers (32 digits for Large dataset) if they are composite numbers.</p>

<p>The very first idea, building a sieve of primes for up to 10<sup>16</sup> for trial division, seems not feasible for this problem since it will take lots of time and space (e.g., $\mathcal{O}(n\log{}n \log{}\log{}n)$ and $\mathcal{O}(n)$ for <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">sieve of Eratosthenes</a>, respectively).</p>

<p>Note that we don&rsquo;t need to find all but only J of those jamcoins.
Therefore, we can keep iterating over all possible &ldquo;jam coins&rdquo; to find the first J numbers that satisfy the conditions.
To quickly determine if a large number is a composite/prime number, we can use Rabin-Miller primality test.
For reference, the Rabin-Miller primality test is based on the following <a href="http://mathworld.wolfram.com/Rabin-MillerStrongPseudoprimeTest.html">theorem</a>:</p>

<ul>
<li>If p is a prime, let s be such that $p-1 = 2^{s}d$ and $d$ is odd. Then for any $1 \leq n \leq p-1$, one of two things happens:</li>
</ul>


<p><span class="math display">\[\begin{align}
&amp; n^d = 1 \mod p \mbox{, or} \\
&amp; n^{2^j d} = -1 \mod p \mbox{ for some } 0 \leq j &lt; s.
\end{align}\]</span></p>


<p>In Rabin-Miller test, we pick $k$ random samples of $n$ in the interval $1 \leq n \leq p-1$.
If p is not a prime, then it is at least a &frac34; chance that a randomly chosen $n$ will be a fail.
For large $k$ independent tests, the probability that it passes all trials is (&frac14;)<sup>k</sup> ~ 0.</p>

<p>The test is very fast, with runtime complexity of $k \log{}^3 n$ where k is the trial number.
Since we looks for composite numbers, this algorithm is even better-suited: even if a number passes all Rabin-Miller trials, we are still NOT sure if it is a prime.
However, if a number fails one of Rabin-Miller trial, we are sure that it is a composite number.</p>

<p>Implementation of this algorithm in different languages can be found on the web, such as <a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Primality_Testing">here</a>.
I re-implemented this algorithm in Python (shown below) since 1) it is simple enough (just slightly more complex than Euclid&rsquo;s <code>gcd</code> algorithm), and 2) I want to avoid disqualification from Google Code Jam for plagiarism.</p>

<p><figure class='code'><figcaption><span>My implementation of Rabin-Miller test </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">decompose</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="n">Decompose</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">exp</span> <span class="o">*</span> <span class="n">d</span> <span class="n">where</span> <span class="n">d</span> <span class="ow">is</span> <span class="n">odd</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">:</span><span class="n">param</span> <span class="n">num</span><span class="p">:</span> <span class="n">the</span> <span class="nb">input</span> <span class="n">number</span><span class="o">.</span>
</span><span class='line'><span class="p">:</span><span class="k">return</span><span class="p">:</span> <span class="p">(</span><span class="n">exp</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="n">where</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">exp</span> <span class="o">*</span> <span class="n">d</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">exp = 0</span>
</span><span class='line'><span class="sd">while num &amp;amp; 1 == 0:  # check num % 2 == 0 but probably faster</span>
</span><span class='line'><span class="sd">    num &amp;gt;&amp;gt;= 1</span>
</span><span class='line'><span class="sd">    exp += 1</span>
</span><span class='line'><span class="sd">return exp, num</span>
</span><span class='line'><span class="sd">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;def is_prime(number, trial=10):</span>
</span><span class='line'><span class="sd">    &amp;ldquo;&amp;rdquo;&amp;ldquo; Rabin Miller test of primality.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;pre&gt;&lt;code&gt;:param number: the input number.</span>
</span><span class='line'><span class="sd">:param trial: Number of Rabin-Miller trial.</span>
</span><span class='line'><span class="sd">:return: True if all trials passed, False if not.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># small primes &amp;lt; 100</span>
</span><span class='line'><span class="n">SMALL_PRIMES</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span>
</span><span class='line'>                <span class="mi">43</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">97</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rabin_miller_trial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Check if prime pass the Rabin-Miller trial.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param n: a random &quot;witness&quot; of primality.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :return: True if composite, False if probably prime.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># For first iteration, 1 or -1 remainder implies prime</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># For next iterations, -1 implies prime, others imply composite</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Labor saving steps</span>
</span><span class='line'><span class="k">if</span> <span class="n">number</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">SMALL_PRIMES</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">p</span> <span class="o">*</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">number</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># if input is small enough for small primes</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Starting Rabin-Miller algorithm</span>
</span><span class='line'><span class="n">s</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">decompose</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">trial</span><span class="p">):</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">number</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rabin_miller_trial</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="bp">True</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Some notes about this implementation:</p>

<ul>
<li>Because the function <code>rabin_miller_trial</code> is unlikely reused anywhere else, it is nested inside <code>is_pseudo_prime</code> to keep its function signature simple, intuitive.</li>
<li>Use <code>pow(x, y, z)</code> in Python to compute more efficiently than <code>(x ** y % z)</code>.</li>
<li><code>random.randint(2, prime - 2)</code> is used since it is useless to pick <code>1</code> and <code>p-1</code> and trials would be wasted.</li>
<li>Labor saving steps: we first test for divisibility by small primes that are less than 100 before starting Rabin-Miller trials.</li>
</ul>


<p>Going back to the Coin Jam problem, note that the problem requires us not only to check if numbers are composite but also find any non-trivial factor for those numbers.
Fortunately, as explained in <a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test">Wikipedia</a>, we can modify the Rabin-Miller test to add greatest common divisor <code>gcd</code> calculations to find a factor of p with minimal additional computational cost.
The modified Rabin-Miller for finding factor of composite numbers is shown below.</p>

<p><figure class='code'><figcaption><span>Modified Rabin-Miller test for finding a factor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">fractions</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">find_factor</span><span class="p">(</span><span class="n">prime</span><span class="p">,</span> <span class="n">trial</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="n">Modify</span> <span class="n">Rabin</span> <span class="n">Miller</span> <span class="n">test</span> <span class="n">of</span> <span class="n">primality</span> <span class="n">to</span> <span class="n">find</span> <span class="n">factor</span> <span class="n">of</span> <span class="n">composite</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">:</span><span class="n">param</span> <span class="n">prime</span><span class="p">:</span> <span class="n">the</span> <span class="nb">input</span> <span class="n">number</span><span class="o">.</span>
</span><span class='line'><span class="p">:</span><span class="n">param</span> <span class="n">trial</span><span class="p">:</span> <span class="n">Number</span> <span class="n">of</span> <span class="n">Rabin</span><span class="o">-</span><span class="n">Miller</span> <span class="n">trials</span><span class="o">.</span>
</span><span class='line'><span class="p">:</span><span class="k">return</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">prime</span> <span class="p">(</span><span class="nb">all</span> <span class="n">trials</span> <span class="n">passed</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">composite</span><span class="o">.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sd"># small primes &amp;lt; 100</span>
</span><span class='line'><span class="sd">SMALL_PRIMES = [ 2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,</span>
</span><span class='line'><span class="sd">              43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97, 101]</span>
</span><span class='line'>
</span><span class='line'><span class="sd">def rabin_miller_trial(num):</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span> <span class="n">Find</span> <span class="n">factor</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span> <span class="n">Rabin</span><span class="o">-</span><span class="n">Miller</span> <span class="n">trial</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">:</span><span class="n">param</span> <span class="n">num</span><span class="p">:</span> <span class="n">a</span> <span class="n">random</span> <span class="s">&quot;witness&quot;</span> <span class="n">of</span> <span class="n">primality</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">:</span><span class="k">return</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">composite</span><span class="p">,</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">probably</span> <span class="n">prime</span><span class="o">.</span>
</span><span class='line'>    <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">    num = pow(num, remainder, prime)</span>
</span><span class='line'>
</span><span class='line'><span class="s">    # For first iteration, 1 or -1 remainder implies prime</span>
</span><span class='line'><span class="s">    if num == 1 or num == prime - 1:</span>
</span><span class='line'><span class="s">        return 1</span>
</span><span class='line'><span class="s">    else:</span>
</span><span class='line'><span class="s">        gcd = fractions.gcd(num-1, prime)</span>
</span><span class='line'><span class="s">        if gcd &amp;gt; 1:</span>
</span><span class='line'><span class="s">            return gcd</span>
</span><span class='line'>
</span><span class='line'><span class="s">    # For next iterations, -1 implies prime, others imply composite</span>
</span><span class='line'><span class="s">    for _ in xrange(exponent):</span>
</span><span class='line'><span class="s">        num = pow(num, 2, prime)</span>
</span><span class='line'><span class="s">        if num == prime - 1:</span>
</span><span class='line'><span class="s">            return 1</span>
</span><span class='line'><span class="s">        else:</span>
</span><span class='line'><span class="s">            gcd = fractions.gcd(num-1, prime)</span>
</span><span class='line'><span class="s">            if gcd &amp;gt; 1:</span>
</span><span class='line'><span class="s">                return gcd</span>
</span><span class='line'>
</span><span class='line'><span class="s">    # It is a composite, but could not find a factor</span>
</span><span class='line'><span class="s">    return -1</span>
</span><span class='line'>
</span><span class='line'><span class="s"># Labor saving steps</span>
</span><span class='line'><span class="s">if prime &amp;lt; 2:</span>
</span><span class='line'><span class="s">    raise ValueError(&quot;Unexpected input&quot;)</span>
</span><span class='line'><span class="s">for p in SMALL_PRIMES:</span>
</span><span class='line'><span class="s">    if p * p &amp;gt; prime:</span>
</span><span class='line'><span class="s">        return 1</span>
</span><span class='line'><span class="s">    if prime % p == 0:</span>
</span><span class='line'><span class="s">        return p</span>
</span><span class='line'>
</span><span class='line'><span class="s"># Starting Rabin-Miller algorithm</span>
</span><span class='line'><span class="s">exponent, remainder = decompose(prime - 1)</span>
</span><span class='line'>
</span><span class='line'><span class="s">for _ in xrange(trial):</span>
</span><span class='line'><span class="s">    num = random.randint(2, prime - 2)</span>
</span><span class='line'><span class="s">    factor = rabin_miller_trial(num)</span>
</span><span class='line'><span class="s">    if factor &amp;gt; 1:</span>
</span><span class='line'><span class="s">        return factor</span>
</span><span class='line'>
</span><span class='line'><span class="s">return 1</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The final solution to the problem, using the modified Rabin-Miller test above, can be found in this <a href="https://github.com/tdongsi/python/blob/master/CodeJam/codejam/y2016/codejam.py">file</a> (search for CoinJam class).
Note that the <a href="https://code.google.com/codejam/contest/6254486/dashboard#s=a&amp;a=2">suggested solution</a> to this problem is even nicer by using a mathematical trick and the fact that J is pretty small (relative to 10<sup>N</sup>).
If J is much larger and close to the number of all jamcoins with length N available (e.g., more than 90%), then using modified Rabin-Miller test is probably required.</p>
]]></content>
  </entry>
  
</feed>
