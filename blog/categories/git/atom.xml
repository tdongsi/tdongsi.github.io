<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2021-03-21T05:53:02-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github REST API Cookbook]]></title>
    <link href="http://tdongsi.github.io/blog/2018/08/06/github-rest-api/"/>
    <updated>2018-08-06T21:37:20-07:00</updated>
    <id>http://tdongsi.github.io/blog/2018/08/06/github-rest-api</id>
    <content type="html"><![CDATA[<p>The blog post shows some useful snippets for interacting with Github API.
Jenkins pipelines regularly interacts with Github (public or Enterprise) API to perform some query/posting, for example, regarding the current pull request.
For that reason, some of the following snippets are either in Groovy or <code>curl</code> commands embedded in Groovy-based Jenkinsfile code with some Jenkinsfile DSLs.</p>

<!--more-->


<h3>Working with Pull Requests</h3>

<h4>Extracting Pull Request details</h4>

<pre><code class="groovy Get PR body text">import groovy.json.JsonSlurper

def getPrBody(String githubUsername, String githubToken, String repo, String id) {
  String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

  String url = "${GITHUB_API}/${githubUsername}/${repo}/pulls/${id}"
  println "Querying ${url}"
  def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
  def json = new JsonSlurper().parseText(text)
  def bodyText = json.body

  return bodyText
}
</code></pre>

<p>The equivalent <code>curl</code> command is as follows, with JSON processing is done in <code>jq</code>:</p>

<pre><code class="groovy Equivalent curl | jq command in Jenkisfile">sh """
curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" ${GITHUB_API}/${org}/${repo}/pulls/${env.CHANGE_ID} | jq '.body' -r &gt; pr_body.txt
"""
</code></pre>

<h4>Posting comment on the Pull Request</h4>

<p>Reference: <a href="https://developer.github.com/v3/issues/comments/#create-a-comment">Create a comment</a>.</p>

<pre><code class="groovy Equivalent curl in Jenkinsfile">sh """
curl -s -X POST -H "Authorization: token ${env.GITHUB_TOKEN}" --data '{"body": "${comment}"}' ${GITHUB_API}/${org}/${repo}/issues/${env.CHANGE_ID}/comments
"""
</code></pre>

<h4>Merge Pull Request</h4>

<p>Based on <a href="http://www.cloudypoint.com/Tutorials/discussion/jenkins-solved-how-to-merge-a-successful-build-of-a-pull-request-using-a-jenkinsfile/">this article</a>.</p>

<pre><code class="groovy Merge pull request">stage ("Merge PR") {
    steps { 
        withCredentials([usernamePassword(credentialsId: 'credential-value', usernameVariable: 'ACCESS_TOKEN_USERNAME', passwordVariable: 'ACCESS_TOKEN_PASSWORD',)]) {
            def GITHUB = 'https://github.ibm.com/api/v3/repos'
            sh "curl -X PUT -d '{\"commit_title\": \"Merge pull request\"}' ${GITHUB}/org-name/repo-name/pulls/${env.CHANGE_ID}/merge?access_token=${env.ACCESS_TOKEN_PASSWORD}"
        }
    }
}
</code></pre>

<p>The Jenkins-provided environment variable <code>$CHANGE_ID</code>, in the case of a pull request, is the pull request number.</p>

<h3>Working with Branches</h3>

<h4>Getting email of branch maintainer</h4>

<p>At the end of a Jenkins build for a feature branch (NOT <code>develop</code>/<code>master</code>), you may want to email some developer of its status, as opposed to blasting a whole distribution list.
Note that in Git, there is no such metadata for branch creator, as discussed <a href="https://stackoverflow.com/questions/12055198/find-out-git-branch-creator/19135644">here</a>.
Instead, it makes more sense to notify the latest/active committer which is likely the owner of the branch.</p>

<!--
Furthermore, while most of the branches in Git has short lifetime, some branches such as `master` and `develop` can stay around for a long time.
That person may be not active or leave the project entirely.
-->


<pre><code class="groovy Get email of branch maintainer.">def getBranchCreator(String githubUsername, String githubToken, String repo, String branch) {
    String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

    String url = "${GITHUB_API}/${githubUsername}/${repo}/branches/${branch}"
    println "Querying ${url}"
    def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
    def json = new JsonSlurper().parseText(text)

    // Get last committer.
    def creator = json.commit.commit.committer.email
    // TRICKY: json.commit.commit.committer.email is not valid if someone commits from Github web interface.
    // In the case, committer name is 'GitHub Enterprise'.
    if (json.commit.commit.committer.name == 'GitHub Enterprise') {
    // Use author's email instead
    creator = json.commit.commit.author.email
    }
    // TRICKY: the following can return inconsistent data, including "null".
    // def author = json.author
    return creator
}

// Calling from Jenkinsfile
withCredentials([
    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'my-credentials', 
        passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME']
]) {
    if (env.BRANCH_NAME ==~ /PR-\d+/ ) {
        // If it is a PR build, use some distribution list
        email = 'someemail@enterprise.com'
    } else {
        // NOTE: Replace env.GITHUB_USERNAME with the correct Github org name.
        email = getBranchCreator(env.GITHUB_USERNAME, env.GITHUB_PASSWORD, 'my_repo', env.BRANCH_NAME)
    }
}  
</code></pre>

<h4>Deleting a branch</h4>

<p>Searching how to delete a branch in Github API&rsquo;s <a href="https://developer.github.com/v3/repos/branches/">Branches reference</a> does not return anything.
In fact, to delete a branch, we have to delete its HEAD reference as shown <a href="https://developer.github.com/v3/git/refs/#delete-a-reference">here</a>.</p>

<pre><code class="plain Deleting a branch">DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a
</code></pre>

<h3>More tips on Github API</h3>

<p>1) When processing data from Github API, note that any commit has an author and a committer, as shown below.</p>

<pre><code class="json Example commit data">        "commit": {
            "author": {
                "name": "Cuong Dong-Si",
                "email": "tdongsi@example.com",
                "date": "2017-08-17T05:33:46Z"
            },
            "committer": {
                "name": "Tue-Cuong Dong-Si",
                "email": "tdongsi@example.com",
                "date": "2017-08-17T05:33:46Z"
            },
            "message": "@JIRA-4214772@: Add function.",
            "tree": {
                "sha": "xxx",
                "url": "xxx"
            },
            "url": "xxx",
            "comment_count": 0
        },
</code></pre>

<p>While the two fields are usually the same in normal commits (with same associated email and timestamp), they have different meanings.
In summary, the author is the one who created the content, and the committer is the one who committed it.
The two fields can be different in some common Github workflows:</p>

<ul>
<li>Commit a change from Github web interface: The author is the logged-in user (e.g., tdongsi) but the &ldquo;committer&rdquo; field usually has the Github default name and email, e.g., &ldquo;Github Enterprise&rdquo; and &ldquo;<a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#110;&#111;&#x2d;&#x72;&#101;&#x70;&#x6c;&#x79;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#x6e;&#x6f;&#45;&#114;&#101;&#x70;&#108;&#121;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>&rdquo;.</li>
<li>Make and/or merge a pull request from Github: For example, Alice submitted a pull request which was accepted and then merged by Betty (the repository owner). In that case, the author is Alice and the committer is Betty.</li>
</ul>


<p>Due to that subtle difference in committer and author in different scenarios, one has to be careful when using data sent by Github API in a Jenkins pipeline.
For example, you want to send email to the repository owner (committer) at the end of a Pull Request build, but what if someone adds a commit via Github web interface (commiter email would be &ldquo;<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x6e;&#111;&#45;&#x72;&#101;&#x70;&#108;&#x79;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x6e;&#x6f;&#x2d;&#x72;&#101;&#112;&#108;&#121;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;</a>&rdquo; which is not helpful).</p>

<p>2) There is an API rate limit for the free public Github API (note &ldquo;X-RateLimit-Limit&rdquo; and &ldquo;X-RateLimit-Remaining&rdquo; in output below).</p>

<pre><code class="plain Github API limit">tdongsi-mac:dev tdongsi$ curl -i https://api.github.com/users/tdongsi
HTTP/1.1 200 OK
Date: Fri, 09 Jun 2017 16:16:49 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 1236
Server: GitHub.com
Status: 200 OK
X-RateLimit-Limit: 60
X-RateLimit-Remaining: 55
X-RateLimit-Reset: 1497025098
Cache-Control: public, max-age=60, s-maxage=60
Vary: Accept
ETag: "4d7770cf5c2478bf64d23bc908494172"
Last-Modified: Thu, 01 Jun 2017 01:09:00 GMT
X-GitHub-Media-Type: github.v3; format=json
Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Access-Control-Allow-Origin: *
Content-Security-Policy: default-src 'none'
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-XSS-Protection: 1; mode=block
X-Runtime-rack: 0.030687
Vary: Accept-Encoding
X-Served-By: 62cdcc2d03a2f173f1c58590d1a90077
Vary: Accept-Encoding
X-GitHub-Request-Id: FADF:2CB6E:44F743B:56EDC6F:593AC9F1

...
</code></pre>

<p>You are likely to hit this rate limit quickly if you are polling the repos for updates.
Instead of polling from your CI (e.g., Jenkins) system, it is recommended to use <a href="https://developer.github.com/webhooks/creating/">Github webhooks</a>.</p>

<h3>Reference</h3>

<ul>
<li><a href="/blog/2015/08/04/curl-cookbook/">curl cookbook</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symlinks in Git]]></title>
    <link href="http://tdongsi.github.io/blog/2016/02/20/symlinks-in-git/"/>
    <updated>2016-02-20T11:28:11-08:00</updated>
    <id>http://tdongsi.github.io/blog/2016/02/20/symlinks-in-git</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say we have folders with many symbolic links in them, linking to other files in the same Git repository.</p>

<pre><code class="bash Before">$ ls -l link
... link -&gt; /path/to/target
</code></pre>

<p>Unfortunately after committing into Git, they&rsquo;ve turned into plain text files.
Note that even after committing and pushing into Git, the symlinks still work fine.
However, after some branch switches and code merges, the symlinks become actual text files with the link target as the contents.</p>

<pre><code class="bash After">$ cat link
/path/to/target
</code></pre>

<!--more-->


<h3>Restoring the symlinks</h3>

<p>Before going into lengthy discussion on how Git handles symlinks and hard links, the quick solution for the above problem is the following Bash script:</p>

<pre><code class="bash">folder=/Users/tdongsi/Github/my_repo/scripts/sql
ls -d1 $folder/* | while read f; do
  ln -sf "$(cat $f)" "$f"
done
</code></pre>

<p>where <code>ls -d1 $folder/*</code> should be replaced with some command that will list exactly the files you want, preferably in full path.
Note that <code>-f</code> option of <code>ln</code> command is required to replace the file with the symlink. For examples:</p>

<pre><code class="bash Examples">ls -d1 vertica/*.sql | while read f; do
  ln -sf "$(cat $f)" "$f"
done

ls -d1 bash/* | while read f; do
  ln -sf "$(cat $f)" "$f"
done
</code></pre>

<p><strong>Best practice note</strong>: I think that the following template is preferred to the more commonly seen <code>for f in $(ls *);</code> <code>do...done</code>:</p>

<pre><code class="bash">ls * | while read f; do
  # command executed for each file
done
</code></pre>

<p>I think it is the better way to handle all file names, especially with spaces, since <code>"$f"</code> will still work.
In addition, <code>$(cmd)</code> is the same as <code>'cmd'</code> (backticks) but it can be nested, unlike using backticks.
It fact, it&rsquo;s the main reason why the backticks have been <a href="http://wiki.bash-hackers.org/scripting/obsolete">deprecated</a> from Bash scripting.</p>

<h3>How Git deals with symlinks</h3>

<p>How Git deals with symlinks is defined in the <a href="https://git-scm.com/docs/git-config">git config</a> <code>core.symlinks</code>.
If false, symbolic links are checked out as small plain files that contain the link text.
<a href="http://stackoverflow.com/questions/954560/how-does-git-handle-symbolic-links">Otherwise</a>, Git just stores the contents of the link (i.e., the path of the file system) in a &lsquo;blob&rsquo; just like it would for a normal file.
It also stores the name, mode and type (e.g., symlink) in the tree object that represents its containing directory.
When you checkout a tree containing the link, it restores the object as a symlink.</p>

<p>After the symlinks are checked out as plain text files, I believe it is pretty much no way for Git to restore symlinks again (i.e., follow symlinks inside text files).
It would be an insecure, undefined behavior: what if the symlink as text file is modified? What if the target is changed when moving between versions of that text file?</p>

<h3>Use hard links?</h3>

<p>You can use hard links instead of symlinks (a.k.a., soft links).
Git will handle a hard link like a copy of the file, except that the contents of the linked files change at the same time.
Git may see changes in both files if both the original file and the hard link are in the same repository.</p>

<p>One of the disadvantages is that the file will be created as a normal file during <code>git checkout</code>, because there is no way Git understand it as a link.
Moreover, hard link itself has many limitations, compared to symlinks, such as files have to reside on the same file-system or partition.
In Mac OSX, hard links to directories are not supported. There is a <a href="https://github.com/selkhateeb/hardlink">tool</a> to do that, but use it with caution.</p>

<p>Finally, it is important to note that hard links to files can be lost when moving between different versions/branches in Git, even if they are in the same repository.
When you switch branches back and forth, Git remove the old files and create new ones.
You still have the copies of the previous files, but they might have totally different inodes, while others (if not in the same Git repo) still refers to the old inodes.
Eventually, the file and its hard links may be out of sync, and appear like totally unrelated files to Git.
Therefore, using hard links, at best, is just a temporary solution.</p>

<h3>Links</h3>

<ol>
<li><a href="http://superuser.com/questions/638998/easiest-way-to-restore-symbolic-links-turned-into-text-files">Alternative ways to restore symlinks</a></li>
<li><a href="http://stackoverflow.com/questions/246215/how-can-i-list-files-with-their-absolute-path-in-linux">Alternative ways to list files</a></li>
<li><a href="https://git.wiki.kernel.org/index.php/Git">Git design overview</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curl Cookbook]]></title>
    <link href="http://tdongsi.github.io/blog/2015/08/04/curl-cookbook/"/>
    <updated>2015-08-04T10:43:42-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/08/04/curl-cookbook</id>
    <content type="html"><![CDATA[<p>This blog lists some recipes for <code>curl</code> command.</p>

<!--more-->


<h3>Alternatives to <code>curl</code></h3>

<h4>Simple connectivity test</h4>

<p><code>telnet</code>: Most of <code>curl</code> uses are to simply check if you can connect to some endpoint at some port number.</p>

<p><code>python</code>: In some Linux systems, <code>telnet</code> is not installed and cannot be installed but <code>python</code> is present. In that case, you can use the following Python snippet:</p>

<pre><code class="plain Connectivity test with Python">$ python
Python 2.7.5 (default, Nov  6 2016, 00:28:07)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import socket
&gt;&gt;&gt; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&gt;&gt;&gt; s.connect(('my.service.net',8080))
</code></pre>

<h4>Full replacement</h4>

<p><code>java</code>: <a href="https://hc.apache.org/index.html">Apache HttpClient</a>.</p>

<p><code>python</code>: <a href="http://docs.python-requests.org/en/master/">requests module</a>. An <a href="https://github.com/tdongsi/bart-parking">example project</a>.</p>

<p><code>groovy</code>: String&rsquo;s <code>toURL().getText()</code> together with JsonSlurper.</p>

<pre><code class="groovy Example Groovy">import groovy.json.JsonSlurper

def getPrBody(String githubUsername, String githubToken, String repo, String id) {
  String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

  String url = "${GITHUB_API}/${githubUsername}/${repo}/pulls/${id}"
  println "Querying ${url}"
  def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
  def json = new JsonSlurper().parseText(text)
  def bodyText = json.body

  return bodyText
}
</code></pre>

<h3>Standard options by functionality</h3>

<h4>General usage</h4>

<pre><code class="plain Options">-X: HTTP method. For example: -X PUT.
-O: binary download.

-s: silent. It will only output the data you ask for.
</code></pre>

<h4>Secure connections</h4>

<pre><code class="plain Options">-k, --insecure: curl to proceed and operate even for server connections otherwise considered insecure.
</code></pre>

<h3>Cookbook</h3>

<h4>Standard usage</h4>

<pre><code class="plain etcd examples">curl -X GET http://master-1:2379/v2/keys/coreos.com/network/config
</code></pre>

<p>Some examples with <a href="/blog/2017/08/06/github-rest-api/">Github API</a>.</p>

<pre><code class="plain Other Github API examples"># PUT with data: Merging a PR
curl -X PUT -d '{\"commit_title\": \"Merge pull request\"}' ${GITHUB}/org-name/repo-name/pulls/${env.CHANGE_ID}/merge?access_token=${env.ACCESS_TOKEN_PASSWORD}

# GET with authentication: Get PR details
curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" ${GITHUB}/${org}/${repo}/pulls/${env.CHANGE_ID}

# With proxy
curl -L -x public0-proxy1.company.net:8080 https://api.github.com
</code></pre>

<h3>Common problems</h3>

<h4>Passing certificate and private key gives <code>OSStatus -25299</code> error</h4>

<p>You might encounter the following problem with the default <code>curl</code> on MacOS.</p>

<pre><code class="plain Error message">tdongsi-ltm4:download tdongsi$ curl --cert hostcert.crt --key hostcert.key "https://myurl:9093/namespaces/something"
curl: (58) SSL: Can't load the certificate "hostcert.crt" and its private key: OSStatus -25299
</code></pre>

<p>As explained in <a href="https://github.com/curl/curl/issues/283">this Github bug</a>, the certificate must be in PKCS#12 format if using Secure Transport.</p>

<p><blockquote><p>the Secure Transport back-end to curl only supports client IDs that are in PKCS#12 (P12) format; it does not support client IDs in PEM format because Apple does not allow us to create a security identity from an identity file in PEM format without using a private API. And we can&rsquo;t use the private API, because apps that use private API are not allowed in any of Apple&rsquo;s app stores.</p></blockquote></p>

<p>You can use <code>openssl</code> to convert your private key + certificate to PKCS12 format, as follows.</p>

<pre><code class="plain Convert to PKCS12 and retry">tdongsi-ltm4:download tdongsi$ openssl pkcs12 -export -in hostcert.crt -inkey hostcert.key -out ajna.p12
Enter Export Password:
Verifying - Enter Export Password:

tdongsi-ltm4:download tdongsi$ curl -v -k -E ./ajna.p12:testing "https://myurl:9093/namespaces/something"
</code></pre>

<p>In the second command above, <code>testing</code> is the password of your choice when you create <code>ajna.p12</code> keystore with the first command.
Note that if <code>curl</code> is installed from <code>homebrew</code> on MacOS, you can use the certificate and its key without <code>openssl</code> conversion step.</p>

<h3>References</h3>

<ul>
<li><a href="https://curl.haxx.se/docs/manpage.html">curl man page</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Cookbook]]></title>
    <link href="http://tdongsi.github.io/blog/2015/05/11/octopress-cookbook/"/>
    <updated>2015-05-11T13:40:13-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/05/11/octopress-cookbook</id>
    <content type="html"><![CDATA[<p>Octopress is a Ruby-based framework for generating static blog sites.
This post will show the most basics of Octopress to get started on blogging quickly.</p>

<!--more-->


<h3>Basic workflow</h3>

<p>In summary, the workflow for writing blog in Octopress is as follows:</p>

<ul>
<li><code>rake new_post["Post title"]</code></li>
<li>Edit &amp; Preview:

<ul>
<li><code>rake generate</code>

<ul>
<li>After this step, the published artifacts are generated in the &ldquo;public&rdquo; directory.</li>
</ul>
</li>
<li><code>rake preview</code>

<ul>
<li>Published pages will be served locally at &ldquo;localhost:4000&rdquo;. Preview it in any browser.</li>
<li>Updated Markdown files will be regenerated automatically.</li>
</ul>
</li>
</ul>
</li>
<li>Publish:

<ul>
<li><code>rake generate</code>

<ul>
<li>This step makes sure latest changes are added.</li>
</ul>
</li>
<li><code>rake deploy</code>

<ul>
<li>After this step, the content in the &ldquo;public&rdquo; directory is copied into &ldquo;_deploy&rdquo; directory and git add/commit/push to the remote Github branch.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Setting up on a new machine</h3>

<p>This section discusses installing basic Ruby packages and their requirements to use Octopress.</p>

<p>For <a href="https://github.com/imathis/octopress">Octopress 2</a>, we have to use Ruby 2.3.x since one of its packages <code>yajl-ruby 1.2.1</code> <a href="https://github.com/brianmario/yajl-ruby/issues/164">requires <code>ruby &lt; 2.4</code></a>.
The instructions for installing different Ruby versions on different Mac OSX versions are in <a href="https://gorails.com/setup/osx/10.13-high-sierra">this page</a>.
In summary, to install Ruby 2.3.6 on OSX High Sierra (10.13):</p>

<pre><code>brew install rbenv ruby-build

# Add rbenv to bash so that it loads every time you open a terminal
echo 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile
source ~/.bash_profile

# Install Ruby
rbenv install 2.3.6
rbenv global 2.3.6
ruby -v
</code></pre>

<p>Then follow Octopress instructions to run <code>gem install bundler</code> and <code>bundle install</code>.</p>

<p>Do NOT install <code>ruby</code> from Homebrew directly.
If you already installed the latest Ruby via Homebrew <code>brew install ruby</code>, Bundler may not pick up the older Ruby version.
Check for it by using the command <code>bundle env</code>.
If that is the case, force Bundler to use the other Ruby version by <a href="https://github.com/bundler/bundler/issues/4260">these commands</a>:</p>

<pre><code># Uninstall the latest Ruby installed via Homebrew
brew uninstall ruby
$ gem uninstall bundler

# Confirm Ruby version
$ ruby -v
$ rbenv global

$ rbenv rehash
$ gem install bundler
$ bundle env
</code></pre>

<h3>Setting up new blog</h3>

<p>This section assumes that we will publish in <code>gh-pages</code> branch which is more common (publishing in <code>master</code> branch only works for <code>username.github.io</code> repository).
In general, any project that we work in a repo <code>foo</code> (with main development in branches <code>master</code>/<code>develop</code>) on Github can have associated documentation HTML site in <code>gh-pages</code> branch.
Such documentation site can be accessed publicly at &ldquo;username.github.io/foo/&rdquo;.
Octopress allows easy generation of such static HTML sites.
One can arrange such that each blog post is a tutorial or a documentation page, written in Markdown and &ldquo;compiled&rdquo; into HTML.</p>

<p>The process of setting up such a static &ldquo;documentation&rdquo; site is as follows:</p>

<ol>
<li>Download the zip file from octopress master branch <a href="https://github.com/imathis/octopress">here</a>. Note that <a href="https://github.com/octopress/octopress">this link</a> is version 3, which is different.</li>
<li>Unzip the zip file into the repo. Rename it to &ldquo;docs&rdquo; or &ldquo;octopress&rdquo;.</li>
<li>Commit it to <code>master</code> or <code>develop</code> branch.</li>
<li>Run <code>rake install</code> to generate files. Check in the generated files.</li>
<li>Create <code>_deploy</code> folder for deployment. For new static site, <code>rake setup_github_pages</code> works.</li>
<li>Start blogging/writing documentation. Use the workflow in the last section: <code>rake generate</code> -> <code>rake preview</code> -> <code>rake deploy</code>.</li>
<li>For layout editing, check out one of early commits in <a href="https://github.com/tdongsi/javascript">this repo</a>.</li>
</ol>


<p>NOTE: when previewing the one published in <code>gh-pages</code>, you need to edit &ldquo;destination: public&rdquo; in <code>_config.yml</code> file to &ldquo;destination: public/repo_name&rdquo;.</p>

<h3>Add a new page</h3>

<p>This section is about adding a new page, opposed to a new post.
The common examples of such page in an Octopress-based blog is &ldquo;About&rdquo; page or &ldquo;Resume&rdquo; page.
To create a new page, use the following command:</p>

<pre><code>rake new_page["About"]
</code></pre>

<p>This will create a new file at &ldquo;source/about/index.markdown&rdquo; and you can edit that file to add content.
After <code>rake generate</code> command, the &ldquo;source/about/index.markdown&rdquo; will &ldquo;compiled&rdquo; into &ldquo;public/about/index.html&rdquo; that is displayed in the web browser.
After the page content is ready, you may want to add an &ldquo;About&rdquo; link in the navigation bar to that page.
To do that, edit the file &ldquo;source/_includes/custom/navigation.html&rdquo;.</p>

<h3>Deployment</h3>

<p>Octopress deploys latest changes with the command <code>rake deploy</code>.
In this <code>deploy</code> step, it copies all the latest changes to the generated static HTML site into a <code>_deploy</code> folder which is a clone of one of the public branches (<code>master</code> or <code>gh-pages</code>) of the same repository.
Create <code>_deploy</code> folder by using this command.</p>

<pre><code class="plain Creating _deploy folder for an on-going blog">git clone -b gh-pages git@github.com:user/myproject.git _deploy
</code></pre>

<p>With Git 1.7.10 and later, add <code>--single-branch</code> to prevent fetching of all branches.</p>

<p>Make sure you use the SSH URL for the Github repo since the HTTPS URL will prompt for password for every deployment.
In addition, SSH public/private key pair must be generated and added to the Github accordingly.
Otherwise, you might get the following errorr:</p>

<pre><code class="plain Common public key error">## Pushing generated _deploy website
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>If you get the above message even though the public key is already added to Github, check if you are using the right private key.
Make sure it is added to SSH authentication agent.</p>

<pre><code class="plain Adding SSH identity file">mymac:octopress tdongsi$ ssh-add ~/.ssh/id_rsa_git
Identity added: /Users/tdongsi/.ssh/id_rsa_git (/Users/tdongsi/.ssh/id_rsa_git)

mymac:octopress tdongsi$ ssh-add -l -E md5
2048 MD5:ef:c1:d6:4e:92:d2:15:2c:ef:c3:72:d6:c6:98:23:e0 /Users/tdongsi/.ssh/id_rsa_git (RSA)

# Verify your connection
$ ssh -T git@github.com
</code></pre>

<p>The command <code>ssh-add -l -E md5</code> can be used to find if there is a matching public key on Github.
See <a href="https://help.github.com/articles/error-permission-denied-publickey/">here</a> for more information.</p>

<h3>Make Google searchable</h3>

<p>After the blog is deployed to <code>github.com</code>, make it searchable by Google will allow the top search field working.
The usual way is to either resubmit your site in your Google Webmaster Tools or submit it <a href="http://www.google.com/addurl/">here</a>.
See <a href="https://stackoverflow.com/questions/9466360/how-to-request-google-to-re-crawl-my-website">this Stackoverflow thread</a> for more options.</p>

<h3>Reference</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/1911109/how-to-clone-a-specific-git-branch">Clone a specific Git branch</a></li>
<li><a href="http://stackoverflow.com/questions/651038/how-do-you-clone-a-git-repository-into-a-specific-folder">Clone to a specific folder</a></li>
<li><a href="https://help.github.com/articles/error-permission-denied-publickey/">Github instructions on public SSH key</a></li>
</ul>


<p>Recipes:</p>

<ul>
<li><a href="http://blog.zhengdong.me/2012/12/19/latex-math-in-octopress/">Latex for Math formulas</a></li>
<li><a href="http://gangmax.me/blog/2012/05/04/add-about-page-in-octopress/">New page</a>: <code>rake new_page["Resume"]</code> and add link (<a href="https://github.com/tdongsi/tdongsi.github.io/blob/source/source/_includes/custom/navigation.html">example</a>).</li>
<li><a href="http://octopress.org/docs/plugins/include-code/">Include code from file</a></li>
<li><a href="https://blog.pixelingene.com/2011/09/tips-for-speeding-up-octopress-site-generation/">rake isolate/integrate</a></li>
<li><a href="http://octopress.org/docs/plugins/image-tag/">Image</a></li>
<li><a href="https://github.com/optikfluffel/octopress-responsive-video-embed">Video</a>

<ul>
<li><a href="https://gist.github.com/jamieowen">Improved ruby code</a></li>
</ul>
</li>
<li><a href="http://samwize.com/2012/09/24/octopress-table-stylesheet/">Table</a> (<a href="https://github.com/tdongsi/python/commit/7f75238b62a40696b3dd0160a8ff3e84baea229b">implemented</a>): <a href="https://github.com/tdongsi/tdongsi.github.io/blob/source/source/_posts/Hive/2015-11-21-explaining-wordcount-example.markdown">Markdown example</a>.</li>
</ul>


<p>Markdown editing tips:</p>

<ul>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Cheat sheet</a></li>
<li>Use  <code>&lt;!-- more —&gt;</code> to specify Excerpt.</li>
<li>Internal link: <code>(/2012/01/05/hello-world)</code> gives the link &ldquo;<a href="http://userName.github.io/repoName/blog/2012/01/05/hello-world">http://userName.github.io/repoName/blog/2012/01/05/hello-world</a>&rdquo;</li>
</ul>

]]></content>
  </entry>
  
</feed>
