<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2018-09-30T01:09:25-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IntelliJ Setup for Jenkins Development]]></title>
    <link href="http://tdongsi.github.io/blog/2018/02/09/intellij-setup-for-jenkins-shared-library-development/"/>
    <updated>2018-02-09T21:32:59-08:00</updated>
    <id>http://tdongsi.github.io/blog/2018/02/09/intellij-setup-for-jenkins-shared-library-development</id>
    <content type="html"><![CDATA[<p>This posts will show how to setup IntelliJ for development of Jenkins <a href="/blog/2017/12/30/groovy-hook-script-and-jenkins-configuration-as-code/">Groovy Init Scripts</a> and <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/">shared libraries</a>, including auto-complete for <a href="https://jenkins.io/doc/pipeline/steps/">Jenkins pipeline steps</a>.
This is based on my original write-up in <a href="https://github.com/tdongsi/jenkins-config/blob/develop/docs/IDE.md">this project</a>.</p>

<!--more-->


<p>NOTE: this setup is NOT intended for Jenkins plugin or core development.</p>

<h3>Start a new Gradle project</h3>

<p>It is best to start a new project:</p>

<ol>
<li>Select <strong>File | New Project</strong></li>
<li>Select <strong>Gradle</strong></li>
<li>Select <strong>Java</strong> AND <strong>Groovy</strong>
<img src="/images/idea/screen01.png" title="Start" alt="Screeshot" /></li>
<li>Choose <strong>GroupId</strong> and <strong>ArtifactId</strong>
<img src="/images/idea/screen02.png" title="Project Name" alt="Screeshot" /></li>
<li>Enter path to Gradle. For Gradle on Mac installed via Homebrew, the Gradle home is like this:
<img src="/images/idea/screen03.png" title="Configure Gradle" alt="Screeshot" />
NOTE: For Gradle installed on a Mac via Homebrew, the path &ldquo;/usr/local/opt/gradle/libexec&rdquo; may be preferrable to &ldquo;/usr/local/Cellar/gradle/X.X/libexec&rdquo; since the former will stay the same after Gradle version upgrades.
In addition, if you work extensively with Grails/Gradle/Groovy, you may prefer installing via <a href="https://sdkman.io/install"><code>sdk</code> tool</a> instead of Homebrew.</li>
<li>Choose <strong>Project name</strong> and <strong>Project Location</strong>
<img src="/images/idea/screen04.png" title="Project location" alt="Screeshot" /></li>
<li>Finish
<img src="/images/idea/screen05.png" title="Finish" alt="Screeshot" /></li>
</ol>


<h3>Configure IDEA</h3>

<p>Set up for Jenkins Plugins files which are of types <strong>.hpi</strong> or <strong>.jpi</strong>.</p>

<ol>
<li>Select <strong>IntelliJ IDEA | Preferences | Editor | File Types</strong></li>
<li>Select <strong>Archive</strong></li>
<li>Select <strong>+</strong> at the bottom left corner</li>
<li>Add both <strong>.hpi</strong> and <strong>.jpi</strong></li>
<li>Select <strong>OK</strong></li>
</ol>


<p><img src="/images/idea/screen06.png" title="Configure plugin files" alt="Screeshot" /></p>

<p>Modify <strong>build.gradle</strong> to add the following lines.</p>

<pre><code class="groovy">    compile 'org.jenkins-ci.main:jenkins-core:2.23'

    // Jenkins plugins
    compile group: 'org.jenkins-ci.plugins', name: 'credentials', version: '2.1.13', ext: 'jar'
    compile group: 'org.jenkins-ci.plugins', name: 'matrix-auth', version: '1.6', ext: 'jar'
    compile group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-cps', version: '2.39', ext: 'jar'

    // TRICKY: The lib folder contains all other plugins *JAR* files
    // if not found in Maven
    compile fileTree(dir: 'lib', include: ['*.jar'])
</code></pre>

<p>The above example will grab Jenkins core libraries, Matrix Authorization Plugin hpi, other plugin dependencies and javadocs for all imported libraries.
Having these libraries imported will enable code auto-completion, syntax checks, easy refactoring when working with Groovy scripts for Jenkins.
It will be a great productivity boost.</p>

<p>NOTE 1: The last line <code>compile fileTree</code> is the last resort for any Jenkins plugins that you cannot find the right group ID and artifact ID.
It is rare these days but such cases cannot be completely ruled out.</p>

<p>NOTE 2: The <code>ext: 'jar'</code> is VERY important to ensure that <code>jar</code> files, instead of <code>hpi</code>/<code>jpi</code> files, are being downloaded and understood by IntellJ.
Without that <code>ext</code> option specified, IntellJ won&rsquo;t find JAR files nested in <code>hpi</code>/<code>jpi</code> files which is the default binaries for Jenkins plugins.</p>

<p>The final <strong>build.gradle</strong> will look like <a href="https://github.com/tdongsi/jenkins-steps-override/blob/master/build.gradle">this</a>.
All of the above setup should suffice for working with <a href="http://tdongsi.github.io/blog/2017/12/30/groovy-hook-script-and-jenkins-configuration-as-code/">Groovy Init Scripts</a>.
For working with Jenkins Shared Pipeline Libraries, we should take one extra step shown as follows.</p>

<h3>Setup for Jenkins pipeline library</h3>

<p>All Groovy files in Jenkins shared library for Pipelines have to follow this directory structure:</p>

<pre><code class="text Directory structure of a Shared Library repository">(root)
+- src                     # Groovy source files
|   +- org
|       +- foo
|           +- Bar.groovy  # for org.foo.Bar class
+- vars
|   +- foo.groovy          # for global 'foo' variable
|   +- foo.txt             # help for 'foo' variable
+- resources               # resource files (external libraries only)
|   +- org
|       +- foo
|           +- bar.json    # static helper data for org.foo.Bar
</code></pre>

<p>Note that the Groovy code can be in both <a href="http://tdongsi.github.io/blog/2017/12/26/class-in-jenkins-shared-library/"><code>src</code></a>
and <a href="http://tdongsi.github.io/blog/2017/03/17/jenkins-pipeline-shared-libraries/"><code>vars</code></a> folders.
Therefore, you need to add the following lines in <code>build.gradle</code> to inform Gradle locations of Groovy source codes:</p>

<pre><code class="groovy">sourceSets {
    main {
        groovy {
            srcDirs = ['vars', 'src']
        }
    }

    test {
        groovy {
            srcDirs = ['test/groovy']
        }
    }
}
</code></pre>

<p>Optionally, for unit testing Jenkins shared library, we have to add the following dependencies into our <strong>build.gradle</strong> file.</p>

<pre><code class="groovy">    testCompile group: 'com.lesfurets', name: 'jenkins-pipeline-unit', version: '1.1'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
</code></pre>

<p>Please see <a href="/blog/2018/06/07/jenkins-pipeline-unit-testing/">this blog post</a> for more details on unit testing.
The final <strong>build.gradle</strong> will look like <a href="https://github.com/tdongsi/jenkins-steps-override/blob/master/build.gradle">this</a>.</p>

<h4>Auto-completion for Jenkins Pipeline</h4>

<p>IntelliJ can&rsquo;t auto-complete <a href="https://jenkins.io/doc/pipeline/steps/">Jenkins pipeline steps</a> such as <code>echo</code> or <code>sh</code> out of the box.
We have to make it aware of those Jenkins pipeline DSLs, via a generic process explained <a href="https://confluence.jetbrains.com/display/GRVY/Scripting+IDE+for+DSL+awareness">here</a>.
Fortunately, it is much easier than it looks and you don&rsquo;t have to actually write GroovyDSL script for tens of Jenkins pipeline steps.
Jenkins make it easy by auto-generating the GroovyDSL script and it is accessible via &ldquo;IntelliJ IDEA GDSL&rdquo; link, as shown in screenshot below.</p>

<p><img src="/images/idea/screen08.png" title="GroovyDSL" alt="Screeshot" /></p>

<p>The &ldquo;IntelliJ IDEA GDSL&rdquo; link can be found by accessing &ldquo;Pipeline Syntax&rdquo; section, which is visible in the left navigation menu of any Pipeline-based job (e.g., &ldquo;Admin&rdquo; job in the example above).
After clicking on the &ldquo;IntelliJ IDEA GDSL&rdquo; link, you will be able to download a plain text file with content starting like this:</p>

<pre><code class="groovy IntelliJ IDEA GDSL">//The global script scope
def ctx = context(scope: scriptScope())
contributor(ctx) {
method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
...
</code></pre>

<p>As you can see, it is a GroovyDSL file that describes the known pipeline steps such as <code>echo</code> and <code>error</code>.
Note that GDSL files can be different for different Jenkins instances, depending on Pipeline-supported plugins currently installed on individual Jenkins instance.
To make IntelliJ aware of the current Jenkins pipeline steps available on our Jenkins, we need to place that GDSL file into a location known to source folders.
As shown in the last section, anywhere in both <code>vars</code> and <code>src</code> folders are eligible as such although I personally prefer to put the GDSL file into <code>vars</code> folder (<a href="https://github.com/tdongsi/jenkins-steps-override/tree/master/vars">for example</a>).</p>

<p>After installing the GDSL file into a proper location, IntelliJ may complain with the following message <em>DSL descriptor file has been change and isn’t currently executed</em> and you have to click <strong>Activate back</strong> to get the IntelliJ aware of the current DSLs.
After that, you can enjoy auto-completion as well as documentation of the Jenkine Pipeline DSLs.</p>

<h3>More information</h3>

<ul>
<li><a href="https://github.com/tdongsi/jenkins-steps-override">Example of final setup</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven and Gradle Builds in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/"/>
    <updated>2017-05-20T23:27:08-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>In this post, we will look into how to securely authenticate with Nexus for Maven and Gradle builds in Jenkins pipelines.
Nexus username and password should NOT be stored in plain text on Jenkins slaves or Docker images.
Instead, those credentials should be passed into Jenkins pipeline using <code>withCredentials</code> step.</p>

<!--more-->


<h3>Maven</h3>

<p>Maven builds in corporates usually use private repositories on Nexus, instead of public ones in Maven Central Repository.
To do that, we usually configure Maven to check Nexus instead of the default, built-in connection to Maven Central.
These configurations is stored in <em>~/.m2/settings.xml</em> file.</p>

<p>For authentication with Nexus and for deployment, we must <a href="https://books.sonatype.com/nexus-book/reference/_adding_credentials_to_your_maven_settings.html">provide credentials accordingly</a>.
We usually add the credentials into our Maven Settings in <em>settings.xml</em> file.</p>

<pre><code class="xml Example Credentials in settings.xml">&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;username&gt;deployment&lt;/username&gt;
      &lt;password&gt;deployment123&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;
</code></pre>

<p>However, for automated build and deployment in Jenkins pipelines, it is not safe to store credentials in plain text files.
Instead, one should store Nexus credentials as <a href="https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin">secrets in Jenkins</a> and pass them into Jenkinsfile using their IDs (<code>credentialsId</code>).
See <a href="https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs">this article</a> for the full picture of related plugins used for storing and passing secrets in Jenkins.</p>

<pre><code class="groovy Nexus authentication for Maven in Jenkinsfile.">  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
  ]) {
    withEnv([
      'nexusPublic=https://nexus.example.com/nexus/content/groups/public/'
    ]) {
      def xmlTemplate = readFile templateFile
      String xmlFile = transformXml(xmlTemplate, env.nexusUsername, env.nexusPassword)

      String tempFile = 'temp.xml'
      writeFile file: tempFile, text: xmlFile

      sh "mvn -B clean build -s ${tempFile}"
    }
  }
</code></pre>

<p>The <a href="https://jenkins.io/doc/pipeline/steps/credentials-binding/">step <code>withCredentials</code></a> will not only provide a secure way of injecting secrets (e.g., Nexus credentials) into Jenkins pipeline, but also scrub away such sensitive information if we happen to print them out in log files.
<code>transformXml</code> is my Groovy function that generates the <code>settings.xml</code> from the redacted Maven settings.xml template (no credentials) and the provided Nexus credentials.</p>

<h4>Maven 3.0</h4>

<p>Since <strong>Maven 3.0</strong>, the above problem is made much easier since environment variables can be referred inside <code>settings.xml</code> file by using special expression <code>${env.VAR_NAME}</code>, based on <a href="https://maven.apache.org/settings.html">this doc</a>.
Nexus authentication for Maven 3.0 in Jenkins pipeline can be done as follows:</p>

<pre><code class="xml settings.xml in Maven 3.0">&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;username&gt;${env.MVN_SETTINGS_nexusUsername}&lt;/username&gt;
      &lt;password&gt;${env.MVN_SETTINGS_nexusPassword}&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;
</code></pre>

<pre><code class="groovy Passing Nexus credentials for Maven 3.0 in Jenkinsfile">  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'MVN_SETTINGS_nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'MVN_SETTINGS_nexusPassword']
  ]) {
    withEnv([
      'nexusPublic=https://nexus.example.com/nexus/content/groups/public/'
    ]) {
      sh 'mvn -s settings.xml clean build'
    }
  }
</code></pre>

<p>However, note that it is still tricky even in Maven 3.0 since this is not always applicable, as noted in <a href="https://maven.apache.org/settings.html">the same doc</a>.</p>

<p><blockquote><p>Note that properties defined in profiles within the settings.xml cannot be used for interpolation.</p></blockquote></p>

<h3>Gradle</h3>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<pre><code class="groovy Example build.gradle">    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }
</code></pre>

<pre><code class="properties Example gradle.properties">nexusUsername=myUsername
nexusPassword=password123
nexusPublic=https://nexus.example.com/nexus/content/groups/public/
</code></pre>

<p>The default location of the <code>gradle.properties</code> file is <code>~/.gradle</code>.
This is due to the environment variable <code>GRADLE_USER_HOME</code> usually set to <code>~/.gradle</code>.
For custom location of <code>gradle.properties</code> (i.e., other than <code>~/.gradle</code>), ensure that the variable <code>GRADLE_USER_HOME</code> is set accordingly.</p>

<p>However, similar to Maven, for Jenkins pipeline automation, it is not safe to store credentials in plain text file <code>gradle.properties</code>, no matter how &ldquo;hidden&rdquo; its location is.
For that purpose, you should use the following Groovy code:</p>

<pre><code class="groovy Nexus authentication for Gradle in Jenkinsfile.">  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'ORG_GRADLE_PROJECT_nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'ORG_GRADLE_PROJECT_nexusPassword']
  ]) {
    withEnv([
      'ORG_GRADLE_PROJECT_nexusPublic=https://nexus.example.com/nexus/content/groups/public/',
      'ORG_GRADLE_PROJECT_nexusReleases=https://nexus.example.com/nexus/content/repositories/releases',
      'ORG_GRADLE_PROJECT_nexusSnapshots=https://nexus.example.com/nexus/content/repositories/snapshots'
    ]) {
      sh './gradlew jenkinsBuild'
    }
  }
</code></pre>

<p>Note that, in Gradle, the solution is much simpler because Gradle respects properies set through environment variales.
Based on <a href="https://docs.gradle.org/current/userguide/build_environment.html">its doc</a>, if the environment variable name looks like <strong><em>ORG_GRADLE_PROJECT_prop=somevalue</em></strong>, then Gradle will set a <code>prop</code> property on your project object, with the value of <code>somevalue</code>.
Therefore, in <code>withCredentials</code> step, we specifically bind the secrets <code>nexusUsername</code> and <code>nexusPassword</code> to the environment variables <em>ORG_GRADLE_PROJECT_nexusUsername</em> and <em>ORG_GRADLE_PROJECT_nexusPassword</em> and not some arbitrary variable names.
These environment variables should match the ones used in <code>builde.gradle</code> and, in the following Closure, we simply call the standard Gradle wrapper command <code>./gradlew &lt;target&gt;</code>.
Compared with Maven solution in the last section, there is no intermediate step to generate <code>settings.xml</code> based on the provided secrets.</p>

<h3>More Tips</h3>

<p>If Maven/Gradle build is used in multiple repositories across organization, it is recommended to move the above Groovy code into shared Jenkins library, as shown in <a href="/blog/2017/03/17/jenkins-pipeline-shared-libraries/">last post</a>.
For example, the Gradle builds can be simplified by defining <code>useNexus</code> step (see <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/#defining-steps">here</a>) and adding it into the <a href="/blog/2017/03/17/jenkins-pipeline-shared-libraries/">shared library <em>workflow-lib</em></a>.</p>

<pre><code class="groovy vars/useNexus.groovy">def call(Closure body) {
  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'ORG_GRADLE_PROJECT_nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'ORG_GRADLE_PROJECT_nexusPassword']
  ]) {
    withEnv([
      'ORG_GRADLE_PROJECT_nexusPublic=https://nexus.example.com/nexus/content/groups/public/',
      'ORG_GRADLE_PROJECT_nexusReleases=https://nexus.example.com/nexus/content/repositories/releases',
      'ORG_GRADLE_PROJECT_nexusSnapshots=https://nexus.example.com/nexus/content/repositories/snapshots'
    ]) {
      body()
    }
  }
}
</code></pre>

<p>After that, all the Gradle builds with Nexus authentication in Jenkinsfile will now be reduced to simply this:</p>

<pre><code class="groovy Simplified Nexus authentication for Gradle in Jenkinsfile.">useNexus {
  sh './gradlew jenkinsBuild'
}
</code></pre>

<p>As shown above, it will reduce lots of redundant codes for Gradle builds, repeated again and again in Jenkinsfiles across multiple repositories in an organizaiton.</p>

<h3>References</h3>

<ul>
<li><a href="https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs">Secrets in Jenkins build jobs</a></li>
<li><a href="https://docs.gradle.org/current/userguide/build_environment.html">Gradle build environment</a></li>
<li><a href="https://stackoverflow.com/questions/12749225/where-to-put-gradle-configuration-i-e-credentials-that-should-not-be-committe">Stackoverflow dicussion</a>: for older versions of Gradle.</li>
</ul>

]]></content>
  </entry>
  
</feed>
