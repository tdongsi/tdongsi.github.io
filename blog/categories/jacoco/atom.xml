<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jacoco | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/jacoco/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2018-07-18T17:47:01-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jacoco in Maven Projects]]></title>
    <link href="http://tdongsi.github.io/blog/2017/09/23/jacoco-in-maven-project/"/>
    <updated>2017-09-23T21:39:13-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/09/23/jacoco-in-maven-project</id>
    <content type="html"><![CDATA[<p>This blog post goes over some recipes for adding code coverage report to Maven-based projects with Jacoco.</p>

<!--more-->


<h3>Standard usage</h3>

<p>Based on <a href="http://www.eclemma.org/jacoco/trunk/doc/maven.html">offical instruction</a> and <a href="https://stackoverflow.com/questions/36199422/maven-unit-test-code-coverage">this</a>, you need to add the following code snippet in to your Maven <code>pom.xml</code>.</p>

<pre><code class="xml Jacoco usage (typical Maven project)">&lt;project&gt;
...

    &lt;dependencies&gt;
        ...
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            ...
            &lt;!-- Code Coverage report generation --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.7.9&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;prepare-agent&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;generate-code-coverage-report&lt;/id&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;report&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>At least, you need &ldquo;prepare-agent&rdquo; before test phase for Jacoco instrumentation and &ldquo;report&rdquo; after test phase for generating the report.
You could subject the project to code coverage and generate the same report without making any changes to the pom file.
To do this, run the following command:</p>

<pre><code class="plain Jacoco from Maven command-line">mvn jacoco:prepare-agent test jacoco:report
</code></pre>

<p>You may get the following error:</p>

<pre><code class="plain">[ERROR] No plugin found for prefix 'jacoco' in the current project ...
</code></pre>

<p>There are two options to fix that error.
The easiest way is to specify the <code>groupId</code> and <code>artifactId</code> parameters of the plugin explicitly.
You can also add <code>version</code> to ensure the stability of your build pipeline.</p>

<pre><code class="plain">mvn clean org.jacoco:jacoco-maven-plugin:0.7.9:prepare-agent install org.jacoco:jacoco-maven-plugin:0.7.9:report
</code></pre>

<p>The more long-term solution is to add the following in to your Maven &ldquo;settings.xml&rdquo;.</p>

<pre><code class="xml Maven settings">&lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.jacoco&lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;
</code></pre>

<h3>Tests with Mock</h3>

<p>If mocking is involved in unit tests, you need to use “instrument” and “restore-instrumented” steps.</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/powermock/powermock/wiki/Code-coverage-with-JaCoCo">PowerMock instruction</a></li>
<li><a href="https://github.com/powermock/powermock-examples-maven/blob/master/jacoco-offline/pom.xml">PowerMock example pom.xml</a></li>
</ul>


<h3>Multi-module Maven projects</h3>

<p>Officially, multi-module Maven projects are supported differently by Jacoco as documented <a href="https://github.com/jacoco/jacoco/wiki/MavenMultiModule">here</a>.
Instrumentation will be similar but the challenge of multi-module Maven projects lies in how to collect and report code coverage of all modules correctly.
Jacoco Maven standard goals, as shown in sections above, work on single modules only: Tests are executed within the module and contributed coverage only to code within the same module.
Coverage reports were created for each module separately.</p>

<p>In the past, there are some ad-hoc solutions such as <a href="https://dzone.com/articles/jacoco-maven-multi-module">this</a> (for Jacoco 0.5.x) to work around that limit.
However, those patterns are also error-prone and hard to customize, especially when Jacoco is used with Surefire plugin.
Fortunately, Jacoco recently introduced a new Maven goal &ldquo;report-aggregate&rdquo; in its release 0.7.7 which will aggregate code coverage data across Maven modules.
Its usage is also present in the same <a href="https://github.com/jacoco/jacoco/wiki/MavenMultiModule">link</a> (quoted below) but it is too succint and not very helpful for new users.</p>

<p><blockquote><p>Create a dedicated module in your project for generation of the report. This module should depend on all or some other modules in the project.</p></blockquote></p>

<p>Let' say you have a multi-module Maven project with this structure:</p>

<pre><code class="plain Multi-module Maven project">root pom
  |- module a
  |- module b
  |- module c
</code></pre>

<p>To use Jacoco &ldquo;report-aggregate&rdquo; goal for these modules, you first need to add a dedicated &ldquo;coverage&rdquo; module.
This &ldquo;coverage&rdquo; module should be added into the root POM.
The multi-module Maven project should now look like this:</p>

<pre><code class="plain Multi-module Maven project with aggregate coverage module">root pom
  |- module a
  |- module b
  |- module c
  |- module "coverage"
</code></pre>

<p>The POMs for each module does not need to change at all.
The POM for the &ldquo;coverage&rdquo; module will look like this:</p>

<pre><code class="xml Maven pom.xml for coverage module">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;com.company&lt;/groupId&gt;
        &lt;artifactId&gt;company-pom&lt;/artifactId&gt;
        &lt;version&gt;3.0&lt;/version&gt;
    &lt;/parent&gt;

    &lt;artifactId&gt;report&lt;/artifactId&gt;
    &lt;name&gt;Jacoco Report&lt;/name&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;my.example&lt;/groupId&gt;
            &lt;artifactId&gt;module-a&lt;/artifactId&gt;
            &lt;version&gt;210.0.00-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;my.example&lt;/groupId&gt;
            &lt;artifactId&gt;module-b&lt;/artifactId&gt;
            &lt;version&gt;210.0.00-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;my.example&lt;/groupId&gt;
            &lt;artifactId&gt;module-c&lt;/artifactId&gt;
            &lt;version&gt;210.0.00-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.7.9&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;excludes&gt;
                        &lt;!-- Example of excluding classes 
                        &lt;exclude&gt;**/com/company/config/AutoConfiguration.class&lt;/exclude&gt;
                        --&gt;
                    &lt;/excludes&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;report-aggregate&lt;/id&gt;
                        &lt;phase&gt;verify&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;report-aggregate&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;

            &lt;!-- This coverage module should never be deployed --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;skip&gt;true&lt;/skip&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>Note that we still require &ldquo;prepare-agent&rdquo; step to run before the first test suite.
Depending on what plugins are being used and how the modules are organized within the project, we might have different setup for that particular step.
One option is to run from the command-line:</p>

<pre><code>tdongsi$ ls
Dockerfile              README.md               module1       pom.xml
Jenkinsfile             coverage                module2       scripts

tdongsi$ mvn -B clean org.jacoco:jacoco-maven-plugin:0.7.9:prepare-agent install
</code></pre>

<p>Links:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/13031219/how-to-configure-multi-module-maven-sonar-jacoco-to-give-merged-coverage-rep/37871210#37871210">Example of report-aggregate</a></li>
<li><a href="https://github.com/jacoco/jacoco/tree/master/jacoco-maven-plugin.test/it/it-report-aggregate">Example Maven project</a></li>
</ul>


<h4>Customizations</h4>

<p>In theory, a global threshold can be defined in <code>coverage/pom.xml</code> to enforce code coverage standard across teams.
However, in practice, different teams are at different stages of module/service maturity and blindly having a global threshold will hamper teams working on newer services/modules.
In addition, it does not make sense to enforce code coverage on some Maven modules such as those generated in GRPC.</p>

<p>In Jacoco, you can set different coverage limits for individual modules instead of a global threshold for all modules.
In the following example, you can specify a coverage threshold for module A by modifying module A&rsquo;s pom.xml file:</p>

<pre><code class="xml Module A's pom.xml">...

&lt;/plugins&gt;
...
    &lt;plugin&gt;
        &lt;groupId&gt;com.atlassian.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-clover2-plugin&lt;/artifactId&gt;
    &lt;/plugin&gt;

    &lt;plugin&gt;
        &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
        &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;0.7.9&lt;/version&gt;

        &lt;executions&gt;
            &lt;execution&gt;
                &lt;id&gt;check&lt;/id&gt;
                &lt;goals&gt;
                &lt;goal&gt;check&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;configuration&gt;
                    &lt;!-- NOTE: Set haltOnFailureto true when code coverage is enforced --&gt;
                    &lt;haltOnFailure&gt;false&lt;/haltOnFailure&gt;

                    &lt;rules&gt;
                        &lt;rule &gt;
                            &lt;element&gt;CLASS&lt;/element&gt;
                            &lt;limits&gt;
                                &lt;limit &gt;
                                    &lt;counter&gt;LINE&lt;/counter&gt;
                                    &lt;value&gt;COVEREDRATIO&lt;/value&gt;
                                    &lt;minimum&gt;0.80&lt;/minimum&gt;
                                &lt;/limit&gt;
                                &lt;limit &gt;
                                    &lt;counter&gt;BRANCH&lt;/counter&gt;
                                    &lt;value&gt;COVEREDRATIO&lt;/value&gt;
                                    &lt;minimum&gt;0.80&lt;/minimum&gt;
                                &lt;/limit&gt;
                            &lt;/limits&gt;
                            &lt;excludes&gt;
                                &lt;!-- 
                                &lt;exclude&gt;com.test.ExampleExclusion&lt;/exclude&gt;
                                --&gt;
                            &lt;/excludes&gt;
                        &lt;/rule&gt;
                    &lt;/rules&gt;
                &lt;/configuration&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>As you can see, you can also specify files being excluded from coverage calculation.</p>

<h3>References</h3>

<ul>
<li><a href="http://www.jacoco.org/jacoco/trunk/doc/maven.html">Jacoco Maven plugin</a>: there are example POMs.</li>
</ul>


<!--
* [Cross-module reporting](https://stackoverflow.com/questions/41885772/jacoco-simple-integration-test-solution/41901853#41901853)
-->

]]></content>
  </entry>
  
</feed>
