<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2017-12-21T16:20:25-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing Jenkins With NGINX]]></title>
    <link href="http://tdongsi.github.io/blog/2017/09/05/securing-jenkins-with-nginx/"/>
    <updated>2017-09-05T23:41:23-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/09/05/securing-jenkins-with-nginx</id>
    <content type="html"><![CDATA[<p>Demo &ldquo;Securing a Jenkins Instance&rdquo; at Jenkins Booth in Jenkins World 2017 by Claudiu Guiman.</p>

<p><blockquote><p>A set of minimum steps every Jenkins Admin should follow so his public-facing Jenkins instance doesnâ€™t turn into a Bitcoin mine.</p></blockquote></p>

<!--more-->


<pre><code class="plain nginx configuration">server {
    listen 80;
    server_name demo-001.eastus.cloudapp.azure.com;
    location / {
        proxy_set_header        Host $host:$server_port;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_pass              http://localhost:8080;
        proxy_redirect          http://localhost:8080 http://demo-001.eastus.cloudapp.azure.com;
        proxy_read_timeout      90;
    }

    # block requests to /cli
    location /cli {
        deny all;
    }

    # block requests to /login
    location ~ /login* {
        deny all;
    }
}
</code></pre>

<pre><code class="plain Running nginx">$ cp ~/demo/default /etc/nginx/sites-enabled/default
$ sudo service nginx restart
$ sudo ufw deny 8080
</code></pre>

<p>If your Jenkins is hosted in AWS/Google Cloud, you should consider setting this up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Plugin Development]]></title>
    <link href="http://tdongsi.github.io/blog/2017/08/29/jenkins-plugin-development/"/>
    <updated>2017-08-29T08:47:17-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/08/29/jenkins-plugin-development</id>
    <content type="html"><![CDATA[<p>How to create a Jenkins plugin.</p>

<!--more-->


<h3>Basic plugin</h3>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/MarkEWaite/hello-world-plugin/tree/jenkins-world-2017">Tutorial</a></li>
<li><a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=azyv183Ua6U">Video</a></li>
</ul>


<h3>Pipeline plugin</h3>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/jglick/wfdev/tree/pipeline">Tutorial</a></li>
<li><a href="https://github.com/jglick/wfdev/blob/master/preso.pdf">Slides</a></li>
<li><a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/DEVGUIDE.md">Developer&rsquo;s guide</a></li>
</ul>


<h3>Blue Ocean plugin</h3>

<pre><code class="plain Local development of Blue Ocean plugin"># this will build and run the plugin in local Jenkins
mvn install hpi:run
# this will recompile js &amp; less while editing
npm run bundle:watch
</code></pre>

<p><strong><em>Gotcha</em></strong>: extension changes won&rsquo;t update without a Jenkins restart.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins World 2017]]></title>
    <link href="http://tdongsi.github.io/blog/2017/08/29/jenkins-world-2017/"/>
    <updated>2017-08-29T08:47:04-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/08/29/jenkins-world-2017</id>
    <content type="html"><![CDATA[<p>Some interesting talks in <a href="https://www.cloudbees.com/jenkinsworld/schedule">Jenkins World 2017</a> are summarized in this blog post.</p>

<!--more-->


<h3>Jenkins Pipeline on your Local Box to Reduce Cycle Time</h3>

<p>Interesting proposal (with <strong>demo</strong>, a big plus) to resolve the following problems (added my own experience):</p>

<ul>
<li>Non repeatble builds due to allocated physical slaves with reused workspaces.

<ul>
<li>The idea is equivalent to use Dockerized Jenkins for local job runs before running on central Jenkins.</li>
<li>My current alternative is to use containerized Jenkins slaves using Kubernetes plugin.</li>
</ul>
</li>
<li>Merging of two companies (YNAP + GerritForge)

<ul>
<li>Not applicable. However, for large corporates, two product teams can feel like two companies.</li>
</ul>
</li>
<li>Need for fast feedback

<ul>
<li>Same</li>
</ul>
</li>
<li>One master cannot suit all: central CI not flexible to local team needs.

<ul>
<li>Maybe applicable for team CI and company-wide CI.</li>
</ul>
</li>
<li>Scalability: central CI only handle <code>master</code> job runs instead of multiple feature job runs.</li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="https://github.com/NET-A-PORTER/jenkinsworld-2017-sample-app">Code repo</a></li>
</ul>


<pre><code class="groovy default Jenkinsfile">#!/bin/env groovy

node {
    checkout scm

    echo env.JENKINS_URL
    if(env.JENKINS_URL ==~ /.*central-pipeline.*/) {
        echo "loading central"
        load "central/Jenkinsfile"
    } else {
        echo "loading local"
        load "local/Jenkinsfile"
    }
}()
</code></pre>

<pre><code class="groovy local Jenkinsfile">{ -&gt; docker.image('slave-sbt').inside 
    {
        stage('Build') {
            sh sbt('compile')
        }
        stage('Test') {
            sh sbt('test')
        }
        stage('Deploy Locally') {
            sh sbt('docker:publishLocal')

            def dockerTag = (sh(script: "git describe --tags HEAD", returnStdout: true)).trim()
            cleanUpOldContainers(dockerTag)
            runContainer(dockerTag)

            def containerUrl = getRunningContainerURL(dockerTag)

            echo "Running on $containerUrl"
            currentBuild.setDescription("$containerUrl")


        }

        stage('Push to GitHub') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                              credentialsId: 'github',
                              usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "git branch --list ${env.BRANCH_NAME} || git checkout -b ${env.BRANCH_NAME}"
                sh "git push -f https://$USERNAME:$PASSWORD@github.com/NET-A-PORTER/jenkinsworld-2017-sample-app HEAD:refs/heads/${env.BRANCH_NAME}"
            }
        }
    }
}

...
</code></pre>

<pre><code class="groovy central Jenkinsfile">{ -&gt; docker.image('slave-sbt').inside
    {
        stage('Build') {
                sh sbt('compile')
        }
        stage('Creating Docker container') {
                sh sbt('docker:stage')
        }
        if (env.BRANCH_NAME == "master") {
            stage('Deploy to Heroku') {
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                  credentialsId: 'heroku',
                                  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    sh "echo 'machine git.heroku.com login $USERNAME password $PASSWORD' &gt; ~/.netrc"
                    sh "chmod 600 ~/.netrc"
                    sh "git push -f https://git.heroku.com/jenkinsworld-2017-sample-app.git HEAD:master"
                }
            }
        }
    }
}

def sbt(target) {
    return "sbt -no-colors $target"
}
</code></pre>

<h3>Managing Jenkins with CloudBees Jenkins Team</h3>

<p>CloudBees Jenkins is the Enterprise version of Jenkins, as opposed to Open-Source Jenkins.
This enterprise version offers the following features:</p>

<ul>
<li>Beekeeper Upgrade Assistant: Plugin upgrade compatibility, Compliance report.</li>
<li>Upgrade simulations to make sure the upgrade is compatible with current jobs/plugins.</li>
</ul>


<p>Like many other tools presented in the conference, you can do many &ldquo;awesome&rdquo; things <strong>IF</strong> you pay for it.
The only problem is if you have the budget to pay for it.</p>

<h3>Let&rsquo;s build a Jenkins Pipeline</h3>

<p>Basic tutorial on Jenkinsfile with Declarative syntax.
Not that interesting if you are already familiar with Jenkinsfile.</p>

<ul>
<li><a href="https://www.slideshare.net/secret/5d85kTqLfjOgdC">Slides</a></li>
<li><a href="https://gist.github.com/ericlong/25fd60f197f6c4c7b8f265af7a351e75">Code snippets</a></li>
</ul>


<h3>Developing Pipeline Libraries Locally</h3>

<p>If you have ever tried developing Pipeline Libraries, you may have noticed how long it takes to deploy a new version to server to discover just another syntax error. Oleg will show how to edit and test Pipeline libraries locally before committing to the repository (with Configuration-as-Code and Docker).</p>

<ul>
<li><a href="https://hub.docker.com/r/onenashev/demo-jenkins-config-as-code/">DockerHub repo</a></li>
<li><a href="https://github.com/oleg-nenashev/demo-jenkins-config-as-code">Github repo</a></li>
</ul>


<!-- Photos:
IMG_1097
IMG_1098
IMG_1099
-->


<h3>Securing a Jenkins Instance</h3>

<p>See <a href="/blog/2017/09/05/securing-jenkins-with-nginx/">this post</a>.</p>

<!-- Photos:
IMG_[1100..1107]
-->


<h3>Plugin Development for Pipeline</h3>

<p>See <a href="/blog/2017/08/29/jenkins-plugin-development/">Pipeline plugin development</a>.</p>

<h3>Extending Blue Ocean</h3>

<p>See <a href="/blog/2017/08/29/jenkins-plugin-development/">Blue Ocean plugin development</a>.</p>

<!-- Photos:
IMG_[1110..1116]
-->


<h3>Scaling Jenkins with Kubernetes</h3>

<p>We are already using Kubernetes plugin in production.
The talk mostly recaps how to use the plugin.</p>

<ul>
<li><a href="https://github.com/jenkinsci/kubernetes-plugin/tree/master/examples">Examples</a>

<ul>
<li>Interesting examples include <a href="https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/multi-container.groovy">multi-container</a>, <a href="https://github.com/jenkinsci/kubernetes-plugin/blob/master/examples/selenium.groovy">selenium</a>.</li>
</ul>
</li>
</ul>


<!-- Photos:
IMG_[1117..1121]
-->


<h3>Declarative Pipelines in Jenkins</h3>

<p>New features and improvements in Declarative Jenkinsfile are announced.
Those include:</p>

<ul>
<li><code>changelog</code>: examines the commit log messages with a regular expression.</li>
<li><code>changeset</code>: the affected file paths in the changelog.</li>
</ul>


<!-- Photos:
IMG_[1123..1134]
-->


<h3>Codifying the Build and Release Process with a Jenkins Pipeline Shared Library</h3>

<p>Almost all of the Jenkins workflows practiced at FireEye are already implemented in our Jenkins.
It&rsquo;s assuring to know that we are using the best practices and not way behind the pack.
However, I got a glimpse of potential struggles (mostly from inertia) migrating from a legacy Jenkins system (1.x) to Jenkinsfile-based system (2.x).</p>

<!-- Photos:
IMG_[1135..1138]
-->




<!-- Pimp my Blue Ocean
Photos:
IMG_[1139..1144]
-->


<h3>Mozillaâ€™s Declarative + Shared Libraries Setup</h3>

<p>How Mozilla is using <strong>Declarative</strong> Pipelines and shared libraries together.</p>

<ul>
<li><a href="https://github.com/mozilla/fxtest-jenkins-pipeline">Github repo</a></li>
<li><a href="https://github.com/mozilla/mozillians-tests/blob/master/Jenkinsfile">Example Jenkinsfile</a></li>
</ul>


<!-- Photos:
IMG_[1145..1150]
-->


<h3>Pipelines At Scale: How Big, How Fast, How Many?</h3>

<p>Interesting point: Each pipeline step is similar to a database transaction: each step requires an atomic record in case of Jenkins restart.
Therefore, it is better to have a large enough transaction than multiple small transactions (e.g., <code>sh</code> step).</p>

<p>For comprehensive study of this topic (Jenkins performance), there are many articles/blog posts written by same author (Sam Van Oort).</p>

<!-- Photos:
IMG_[1151..1163]
-->


<h3>JenkinsPipelineUnit: Test your Continuous Delivery Pipeline</h3>

<p>JenkinsPipelineUnit allows unit testing the Jenkinsfile locally by mocking the Pipeline steps.
In my opinion, it seems only useful for reducing the <strong>syntax</strong> mistakes when developing Jenkinsfile OR global shared library.
You still have to verify functionality in a real Jenkins system.
Its compatibility with Declarative syntax is also questionable, admitted by the speakers/authors.
In addition, it is NOT for developling a Jenkins plugin. In that case, use JenkinsRule.</p>

<ul>
<li><a href="https://github.com/lesfurets/JenkinsPipelineUnit">Github repo</a></li>
</ul>


<!-- Photos:
IMG_[1164..1170]
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DSL Implementation in Groovy]]></title>
    <link href="http://tdongsi.github.io/blog/2017/08/13/groovy-dsl/"/>
    <updated>2017-08-13T15:18:30-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/08/13/groovy-dsl</id>
    <content type="html"><![CDATA[<p>Domain-Specific Language is a mini language for a specific problem and/or in a narrow context.
For example, internally used automation tools usually define some small DSL for configuration and most users understand the context and what DSL offers.</p>

<p>This blog post offers my simplistic view of how an internal DSL is implemented in Groovy via closure delegation.
It shows the progression from standard Java-like implementation -> its fluent version -> final DSL form.
This might help undrestanding the inner workings of a DSL such as Jenkins&rsquo;s Pipeline steps.
There are probably more advanced methods/frameworks for creating DSL.
However, those are not in the scope of this post.</p>

<!--more-->


<h3>Example DSL</h3>

<p>We want to implement a simple DSL that is similar to <a href="https://jenkins.io/doc/pipeline/steps/">Pipeline steps in Jenkinsfile</a>.</p>

<pre><code class="plain DSL in Jenkinsfile">{
    withEnv("PATH=/usr/bin")
    echo("Starting pipeline")
    sh("ls .")
    error("Error here")
}
</code></pre>

<p>In this DSL example, users will write a sequence of steps using a small, pre-defined set of custom statements such as <code>echo</code> and <code>sh</code> above.
For each step in the DSL, the backend classes and objects will perform some execution in the background, using the relevant context specific to the domain (e.g., Jenkins domain).
For simplicity, <code>println</code> statements will be used in the following examples.</p>

<p>The advantage of DSL is that the <strong>developers</strong> can implement the backend in some fully-featured language such as Java but the <strong>users</strong> don&rsquo;t need to know such language to use it.
Such a separation is common in DevOps and automation frameworks where the users want the flexibility of configuring based on their needs but don&rsquo;t want to get exposed to the implementation details (which are usually ugly and compplicated).
Instead, the <strong>users</strong> only need to learn the DSL to use it while still have the flexibility to do what they want.
One example can be found in data science domain where data scientists are usually more comfortable developing in R or SQL but automated deployment frameworks or tools can be in another language such as Java.</p>

<h3>Version 1: Java-like standard implementation</h3>

<p>First, we show a standard implementation in Java to show how backend execution can be implemented.
In the advanced versions, the difference is only in its public interface to make it more user-friendly but the backend execution will be similar.</p>

<pre><code class="groovy Standard Java implementation">/**
 * Java code with standard implementation
 * Try to simulate some kind of DSL like Pipeline steps in Jenkins
 */
class JavaDsl {

    void echo(String message) {
        println "Echo: $message";
    }

    void sh(String script) {
        println "Shell: $script";
    }

    void error(String message) {
        println "Error here: $message";
    }

    // A more advanced DSL
    void withEnv(String var) {
        println "Using: $var";
    }

    void execute() {
        println "Executing ...";
    }

}

println "1) Standard Java implementation";
JavaDsl javaDsl = new JavaDsl();
javaDsl.withEnv("PATH=/usr/bin");
javaDsl.echo("Starting pipeline");
javaDsl.sh("ls .");
javaDsl.error("Error here");
javaDsl.execute();
println "";
</code></pre>

<p>The problem of this approach is that users have to write Java (or Groovy) code directly to use it.</p>

<h3>Version 2: Fluent interface with Builder pattern</h3>

<pre><code class="groovy Fluent Java implementation">/**
 * Java code with Builder pattern
 * Try to simulate some kind of DSL like Pipeline steps in Jenkins
 */
class JavaBuilderDsl {

    JavaBuilderDsl echo(String message) {
        println "Echo: $message"
        return this
    }

    JavaBuilderDsl sh(String script) {
        println "Shell: $script"
        return this
    }

    JavaBuilderDsl error(String message) {
        println "Error here: $message"
        return this
    }

    // A more advanced DSL
    JavaBuilderDsl withEnv(String var) {
        println "Using: $var"
        return this
    }

    void execute() {
        println "Executing ..."
    }
}

println "2) Fluent Java implementation (Builder)"
JavaBuilderDsl builderDsl = new JavaBuilderDsl()
builderDsl.withEnv("PATH=/usr/bin")
        .echo("Starting pipeline")
        .sh("ls .")
        .error("Error here")
        .execute()
println ""
</code></pre>

<p>In this version, the code is fluent with the object name <code>builderDsl</code> not being repeated every single line.
As a result, the code is less verbose and much more user-friendly.</p>

<h3>Version 3: DSL with Groovy closure</h3>

<pre><code class="groovy Standard Groovy implementation">/**
 * Groovy code with standard implementation
 * Try to simulate some kind of DSL like Pipeline steps in Jenkins
 */
class GroovyDsl {

    def echo(String message) {
        println "Echo: $message"
    }

    def sh(String script) {
        println "Shell: $script"
    }

    def error(String message) {
        println "Error here: $message"
    }

    // A more advanced DSL
    def withEnv(String var) {
        println "Using: $var"
    }

    static void execute(closure) {
        GroovyDsl body = new GroovyDsl()
        closure(body)
        println "Executing ..."
    }

}

println "3) Standard Groovy implementation"
GroovyDsl.execute { dsl -&gt;
    dsl.withEnv("PATH=/usr/bin")
    dsl.echo("Starting pipeline")
    dsl.sh("ls .")
    dsl.error("Error here")
}
println ""
</code></pre>

<p>This first version of Groovy implementation is presented here to show connection with its Java counterparts.
As shown below, the input variable <code>dsl</code> in the closure can be abstracted away using delegate.</p>

<pre><code class="groovy Transparent DSL with delegate">class GroovyDsl {

    def echo(String message) {
        println "Echo: $message"
    }

    def sh(String script) {
        println "Shell: $script"
    }

    def error(String message) {
        println "Error here: $message"
    }

    // A more advanced DSL
    def withEnv(String var) {
        println "Using: $var"
    }

    static void execute(Closure closure) {
        GroovyDsl body = new GroovyDsl()
        // TRICKY: Modify the input var? Hmmm.
        closure.delegate = body
        closure()
        println "Executing ..."
    }

    static void executeBest(Closure closure) {
        GroovyDsl body = new GroovyDsl()
        body.with(closure)
        println "Executing ..."
    }

}

println "4) DSL-style Groovy implementation"
GroovyDsl.execute {
    withEnv("PATH=/usr/bin")
    echo("Starting pipeline")
    sh("ls .")
    error("Error here")
}
println ""

println "4b) DSL-style Groovy (better) implementation"
GroovyDsl.executeBest {
    withEnv("PATH=/usr/bin")
    echo("Starting pipeline")
    sh("ls .")
    error("Error here")
}
println ""
</code></pre>

<p>In this final version, only a very small boiler-plate code <code>GroovyDsl.executeBest</code> remains.
The following lines form a mini language (i.e., DSL) that can be exposed to users.
The users can start using the DSL without having to learn Groovy or Java.</p>

<p>Note that the <code>executeBest</code> is the equivalent but less straight-forward way to do the same thing with delegate.
Compared with <code>execute</code>, it has the benefit of NOT modifying the input reference <code>closure</code>.</p>

<h3>Reference</h3>

<ul>
<li><a href="http://groovy-lang.org/closures.html">Groovy closure</a></li>
<li><a href="https://jenkins.io/doc/pipeline/steps/">Jenkins pipeline steps</a></li>
<li><a href="https://dzone.com/articles/groovy-dsl-simple-example">Another example Groovy implementation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github REST API Cookbook]]></title>
    <link href="http://tdongsi.github.io/blog/2017/08/06/github-rest-api/"/>
    <updated>2017-08-06T21:37:20-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/08/06/github-rest-api</id>
    <content type="html"><![CDATA[<p>The blog post shows some useful snippets for interacting with Github API.
Jenkins pipelines regularly interacts with Github (public or Enterprise) API to perform some query/posting, for example, regarding the current pull request.
For that reason, some of the following snippets are either in Groovy or <code>curl</code> commands embedded in Groovy-based Jenkinsfile code with some Jenkinsfile DSLs.</p>

<!--more-->


<h3>Working with Pull Requests</h3>

<h4>Extracting Pull Request details</h4>

<pre><code class="groovy Get PR body text">import groovy.json.JsonSlurper

def getPrBody(String githubUsername, String githubToken, String repo, String id) {
  String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

  String url = "${GITHUB_API}/${githubUsername}/${repo}/pulls/${id}"
  println "Querying ${url}"
  def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
  def json = new JsonSlurper().parseText(text)
  def bodyText = json.body

  return bodyText
}
</code></pre>

<p>The equivalent <code>curl</code> command is as follows, with JSON processing is done in <code>jq</code>:</p>

<pre><code class="groovy Equivalent curl | jq command in Jenkisfile">sh """
curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" ${GITHUB_API}/${org}/${repo}/pulls/${env.CHANGE_ID} | jq '.body' -r &gt; pr_body.txt
"""
</code></pre>

<h4>Posting comment on the Pull Request</h4>

<p>Reference: <a href="https://developer.github.com/v3/issues/comments/#create-a-comment">Create a comment</a>.</p>

<pre><code class="groovy Equivalent curl in Jenkinsfile">sh """
curl -s -X POST -H "Authorization: token ${env.GITHUB_TOKEN}" --data '{"body": "${comment}"}' ${GITHUB_API}/${org}/${repo}/issues/${env.CHANGE_ID}/comments
"""
</code></pre>

<h4>Merge Pull Request</h4>

<p>Based on <a href="http://www.cloudypoint.com/Tutorials/discussion/jenkins-solved-how-to-merge-a-successful-build-of-a-pull-request-using-a-jenkinsfile/">this article</a>.</p>

<pre><code class="groovy Merge pull request">stage ("Merge PR") {
    steps { 
        withCredentials([usernamePassword(credentialsId: 'credential-value', usernameVariable: 'ACCESS_TOKEN_USERNAME', passwordVariable: 'ACCESS_TOKEN_PASSWORD',)]) {
            def GITHUB = 'https://github.ibm.com/api/v3/repos'
            sh "curl -X PUT -d '{\"commit_title\": \"Merge pull request\"}' ${GITHUB}/org-name/repo-name/pulls/${env.CHANGE_ID}/merge?access_token=${env.ACCESS_TOKEN_PASSWORD}"
        }
    }
}
</code></pre>

<p>The Jenkins-provided environment variable <code>$CHANGE_ID</code>, in the case of a pull request, is the pull request number.</p>

<h3>Working with Branches</h3>

<h4>Getting email of branch maintainer</h4>

<p>At the end of a Jenkins build for a feature branch (NOT <code>develop</code>/<code>master</code>), you may want to email some developer of its status, as opposed to blasting a whole distribution list.
Note that in Git, there is no such metadata for branch creator, as discussed <a href="https://stackoverflow.com/questions/12055198/find-out-git-branch-creator/19135644">here</a>.
Instead, it makes more sense to notify the latest/active committer which is likely the owner of the branch.</p>

<!--
Furthermore, while most of the branches in Git has short lifetime, some branches such as `master` and `develop` can stay around for a long time.
That person may be not active or leave the project entirely.
-->


<pre><code class="groovy Get email of branch maintainer.">def getBranchCreator(String githubUsername, String githubToken, String repo, String branch) {
    String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

    String url = "${GITHUB_API}/${githubUsername}/${repo}/branches/${branch}"
    println "Querying ${url}"
    def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
    def json = new JsonSlurper().parseText(text)

    // Get last committer.
    def creator = json.commit.commit.committer.email
    // TRICKY: json.commit.commit.committer.email is not valid if someone commits from Github web interface.
    // In the case, committer name is 'GitHub Enterprise'.
    if (json.commit.commit.committer.name == 'GitHub Enterprise') {
    // Use author's email instead
    creator = json.commit.commit.author.email
    }
    // TRICKY: the following can return inconsistent data, including "null".
    // def author = json.author
    return creator
}

// Calling from Jenkinsfile
withCredentials([
    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'my-credentials', 
        passwordVariable: 'GITHUB_PASSWORD', usernameVariable: 'GITHUB_USERNAME']
]) {
    if (env.BRANCH_NAME ==~ /PR-\d+/ ) {
        // If it is a PR build, use some distribution list
        email = 'someemail@enterprise.com'
    } else {
        // TODO: Replace env.GITHUB_USERNAME with the correct Github org name.
        email = getBranchCreator(env.GITHUB_USERNAME, env.GITHUB_PASSWORD, 'my_repo', env.BRANCH_NAME)
    }
}  
</code></pre>

<h4>Deleting a branch</h4>

<p>Searching how to delete a branch in Github API&rsquo;s <a href="https://developer.github.com/v3/repos/branches/">Branches reference</a> does not return anything.
In fact, to delete a branch, we have to delete its HEAD reference as shown <a href="https://developer.github.com/v3/git/refs/#delete-a-reference">here</a>.</p>

<pre><code class="plain Deleting a branch">DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a
</code></pre>

<h3>More tips on Github API</h3>

<p>1) When processing data from Github API, note that any commit has an author and a committer, as shown below.</p>

<pre><code class="json Example commit data">        "commit": {
            "author": {
                "name": "Cuong Dong-Si",
                "email": "tdongsi@example.com",
                "date": "2017-08-17T05:33:46Z"
            },
            "committer": {
                "name": "Tue-Cuong Dong-Si",
                "email": "tdongsi@example.com",
                "date": "2017-08-17T05:33:46Z"
            },
            "message": "@JIRA-4214772@: Add function.",
            "tree": {
                "sha": "xxx",
                "url": "xxx"
            },
            "url": "xxx",
            "comment_count": 0
        },
</code></pre>

<p>While the two fields are usually the same in normal commits (with same associated email and timestamp), they have different meanings.
In summary, the author is the one who created the content, and the committer is the one who committed it.
The two fields can be different in some common Github workflows:</p>

<ul>
<li>Commit a change from Github web interface: The author is the logged-in user (e.g., tdongsi) but the &ldquo;committer&rdquo; field usually has the Github default name and email, e.g., &ldquo;Github Enterprise&rdquo; and &ldquo;<a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x6e;&#111;&#45;&#114;&#x65;&#x70;&#x6c;&#121;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#110;&#x6f;&#45;&#x72;&#x65;&#x70;&#x6c;&#x79;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>&rdquo;.</li>
<li>Make and/or merge a pull request from Github: For example, Alice submitted a pull request which was accepted and then merged by Betty (the repository owner). In that case, the author is Alice and the committer is Betty.</li>
</ul>


<p>Due to that subtle difference in committer and author in different scenarios, one has to be careful when using data sent by Github API in a Jenkins pipeline.
For example, you want to send email to the repository owner (committer) at the end of a Pull Request build, but what if someone adds a commit via Github web interface (commiter email would be &ldquo;<a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x6e;&#x6f;&#x2d;&#114;&#101;&#x70;&#x6c;&#121;&#64;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#x6e;&#111;&#45;&#114;&#101;&#x70;&#108;&#x79;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>&rdquo; which is not helpful).</p>

<p>2) There is an API rate limit for the free public Github API (note &ldquo;X-RateLimit-Limit&rdquo; and &ldquo;X-RateLimit-Remaining&rdquo; in output below).</p>

<pre><code class="plain Github API limit">tdongsi-mac:dev tdongsi$ curl -i https://api.github.com/users/tdongsi
HTTP/1.1 200 OK
Date: Fri, 09 Jun 2017 16:16:49 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 1236
Server: GitHub.com
Status: 200 OK
X-RateLimit-Limit: 60
X-RateLimit-Remaining: 55
X-RateLimit-Reset: 1497025098
Cache-Control: public, max-age=60, s-maxage=60
Vary: Accept
ETag: "4d7770cf5c2478bf64d23bc908494172"
Last-Modified: Thu, 01 Jun 2017 01:09:00 GMT
X-GitHub-Media-Type: github.v3; format=json
Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Access-Control-Allow-Origin: *
Content-Security-Policy: default-src 'none'
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-XSS-Protection: 1; mode=block
X-Runtime-rack: 0.030687
Vary: Accept-Encoding
X-Served-By: 62cdcc2d03a2f173f1c58590d1a90077
Vary: Accept-Encoding
X-GitHub-Request-Id: FADF:2CB6E:44F743B:56EDC6F:593AC9F1

...
</code></pre>

<p>You are likely to hit this rate limit quickly if you are polling the repos for updates.
Instead of polling from your CI (e.g., Jenkins) system, it is recommended to use <a href="https://developer.github.com/webhooks/creating/">Github webhooks</a>.</p>

<h3>Reference</h3>

<ul>
<li><a href="/blog/2015/08/04/curl-cookbook/">curl cookbook</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
