<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Performance | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2021-03-11T14:53:15-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Datadog]]></title>
    <link href="http://tdongsi.github.io/blog/2016/10/11/datadog/"/>
    <updated>2016-10-11T17:25:38-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/10/11/datadog</id>
    <content type="html"><![CDATA[<p>This post summarizes what I learnt about Datadog, a third-party monitoring service.</p>

<!--more-->


<h3>Features</h3>

<ul>
<li>Presents multiple dashboards to keep an eye on how well everything&rsquo;s running</li>
<li>Parsing of logs from Heroku, JMX</li>
<li>Using analytics from Datadog to help build self-healing systems</li>
<li>Agent-based monitoring, arbitrary configuration of log sources

<ul>
<li>dogstatsd - Aggregation of metrics and stats</li>
<li>Log collector. Forwarded to Datadog&rsquo;s back-end</li>
</ul>
</li>
<li>Can execute specific commands to collect information, health checking, &hellip;</li>
<li>Events and metrics can be tagged arbitrary for organization&rsquo;s sake</li>
<li>Usage rate: Roughly 4.5m metrics collected/hour. Roughly 1250 metrics/second</li>
<li>Integrations for other products (Slack, Pagerduty, et al).</li>
<li>Monitors are built with a visual construction kit:

<ul>
<li>Dropdowns, pick-and-place.</li>
<li>Graphs, charts</li>
<li>Timeboards and Screenboards</li>
<li>Averages, time between events, events/unit of time, above/below (and/or equal to)</li>
<li>How to treat those metrics (sums, differences, averages)</li>
<li>Types of alerts</li>
</ul>
</li>
<li>Basic widgets are used to construct the dashboards. Each widget is configurable.</li>
<li>Basic health checks (OK/NOT OKAY) are possible.</li>
<li>Application tracing - Python lib that you can include in your application, and it adds native Datadog monitoring hooks.</li>
</ul>


<h3>Notable shortcomings</h3>

<ul>
<li>Only in us-east-1 region.</li>
<li>Some reliability issues (could be AWS, could be them). They&rsquo;re working on it.</li>
<li>If an app doesn&rsquo;t come up, it doesn&rsquo;t send an event, so they don&rsquo;t know that something went wrong.</li>
<li>Because all teams are generating events, it&rsquo;s hard to figure out what&rsquo;s actually going on. Sometimes the tags don&rsquo;t make sense&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Performance Logging and Plotting for Cassandra]]></title>
    <link href="http://tdongsi.github.io/blog/2015/11/14/automated-performance-logging-and-plotting-for-cassandra/"/>
    <updated>2015-11-14T19:57:43-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/11/14/automated-performance-logging-and-plotting-for-cassandra</id>
    <content type="html"><![CDATA[<p>In this <a href="https://github.com/tdongsi/python/tree/master/PerformanceLog">mini-project</a>, I created a Python script (PerformanceLog.py) to record JMX values from a running Cassandra instance, using JMXTerm (<a href="http://wiki.cyclopsgroup.org/jmxterm/">http://wiki.cyclopsgroup.org/jmxterm/</a>), and do the following:</p>

<ul>
<li>Put the records into a Cassandra table.</li>
<li>Plot the results.</li>
</ul>


<p>The project is based on a Cassandra interview question found on Glassdoor.</p>

<p>Currently, the first version only works with Windows version of Cassandra (using DataStax Community installer). Developed and tested in Python 2.7.</p>

<!--more-->


<h3>Input/Output</h3>

<p><strong>Input</strong></p>

<p>When running the script from command line, the following arguments must be provided:</p>

<ul>
<li>installDir INSTALLDIR:  Path to installation directory.</li>
<li>host HOST: URL string for Cassandra instance. Only localhost tested.</li>
<li>jmxTerm JMXTERM: Path to jmxterm jar file.</li>
<li>osString OSSTRING: String that represents the current OS. Windows: win. Mac: mac. Unix/Linux: linux.</li>
</ul>


<p>Example:</p>

<pre><code class="plain">&gt; python PerformanceLog.py -installDir C:\datastax -host localhost -jmxTerm lib\jmxterm.jar -osString win
</code></pre>

<p><strong>Output</strong></p>

<ul>
<li>CSV file with each field for each JMX metric. Example:</li>
</ul>


<pre><code class="plain CSV output">SSTableCount,DataSize,c95thPercentile
0,0,0.0
7,31306299,9337.784849999995
7,31306299,9262.307649999999
...
</code></pre>

<ul>
<li>Records in a Cassandra table</li>
<li>Performance plot as PNG file (automatically generated from CSV output file). Example:</li>
</ul>


<p><img src="https://dl.dropbox.com/s/0vy2u8b7hb7djjv/jmxMetrics.png?raw=1" title="Performance Plot" alt="Performance plot" /></p>

<h3>Python modules</h3>

<ol>
<li>PerformanceLog.py: Main module to run the automated tasks. Please use &ldquo;python PerformanceLog -h&rdquo; for the required arguments. Example call for Windows is in the doc string.</li>
<li>MyLogger.py: Logging support module</li>
<li>CassandraRecord.py: Support module to record metrics into a Cassandra table.</li>
<li>Plotter.py: Support module to plot metrics into plots and save into PNG file.</li>
</ol>


<h4>Automated tasks by the modules</h4>

<ol>
<li>Check if Cassandra is Running</li>
<li>Record certain JMX Metrics</li>
<li>Runs the external tool Cassandra Stress</li>
<li>Once the stress session has completed, stop recording JMX Metrics</li>
<li>Record the metrics back into a Cassandra Table</li>
<li>Graph the results (create these graphs at the end of the run).</li>
</ol>


<h3>External Python libraries required</h3>

<h4>For CassandraRecord.py</h4>

<p>This module requires Datastax&rsquo;s Python driver: <a href="http://datastax.github.io/python-driver/installation.html">http://datastax.github.io/python-driver/installation.html</a></p>

<h4>For Plotter.py</h4>

<p>This Python module used Matplotlib library. Please install the following Python libraries: matplotlib, numpy, dateutil, pytz, pyparsing, six (optionally: pillow, pycairo, tornado, wxpython, pyside, pyqt, ghostscript, miktex, ffmpeg, mencoder, avconv, or imagemagick).</p>

<p>Installation of these Python libraries are straight-forward on Linux and Win32. On Win64, please find their installers here: <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>

<h3>Other files</h3>

<p>The following output files are produced. For consistency check, they are left behind.
In the final version of the script, they may be cleaned up accordingly.</p>

<ul>
<li>tempout: Output from JmxTerm session</li>
<li>jmxMetrics.csv: The cvs file that records the interested JMX metrics.</li>
<li>CassandraTest.log: The log file for the script.</li>
</ul>

]]></content>
  </entry>
  
</feed>
