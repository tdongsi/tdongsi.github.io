<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jsonnet | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/jsonnet/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2021-06-23T13:02:12-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jsonnet Code Recipes]]></title>
    <link href="http://tdongsi.github.io/blog/2018/07/12/jsonnet-snippets/"/>
    <updated>2018-07-12T14:24:32-07:00</updated>
    <id>http://tdongsi.github.io/blog/2018/07/12/jsonnet-snippets</id>
    <content type="html"><![CDATA[<p>If you are sending/working with lots of JSON data in files such as AWS CloudFormation templates, <a href="http://jsonnet.org/"><code>Jsonnet</code> tool</a> can help reducing the hassle of maintaining.
Using Jsonnet templates, it is easier to organize data and reduce repeated code present in such JSON data.
This post goes over a few common Jsonnet code recipes for generating JSON data.</p>

<!--more-->


<h3>Automated tests</h3>

<p>At least, make sure your jsonnet template files can compile.
The following example bash script will find all the manifest files and try to compile that:</p>

<pre><code class="bash"># Provide a superset of required parameters
for i in `find Project1/manifests Project2/manifests   -name "*.jsonnet"`; 
do
  jsonnet -V param1=1 -V param2=dummy -V param3=1 "${i}" &gt;&gt; /dev/null
done;
# This will lint-test the files, including libsonnet files.
for i in `find Project1 Project2 -name "*.*sonnet"`;
do
  jsonnet fmt -i -n 2 "${i}" --test
done;
</code></pre>

<h3>Conditional add</h3>

<p>Conditionally adding items to a list.</p>

<pre><code class="json ">  ports: [
           {
             port: $.httpPort,
             targetport: $.httpTargetPort,
           },
           {
             port: $.jnlpPort,
             targetport: 15372,
           },
         ] +
         (if $.sshEnabled then
            [{
              port: $.sshPort,
              targetport: 15373,
            }] else []),
</code></pre>

<p>Conditionally adding attributes to an object/map.</p>

<pre><code class="json">  defaultContainerEnv:: {
    LOGGING_STDERR_LEVEL: "ALL",
    JENKINS_USER: "jenkins",
  } + (if $.sshEnabled then {
          SSH_PORT: 7012,
        } else {}
      )
</code></pre>
]]></content>
  </entry>
  
</feed>
