<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2015-12-17T10:45:54-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Netezza CLI Tools]]></title>
    <link href="http://tdongsi.github.io/blog/2015/12/09/netezza-cli/"/>
    <updated>2015-12-09T18:34:12-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/12/09/netezza-cli</id>
    <content type="html"><![CDATA[<p>In addition to using third party GUI clients such as SQuirreLSQL, you can also interact with Netezza through its command line interface (CLI) tools.
These are programs that let you do useful things like importing and exporting large volumes of data, invoking Netezza from bash scripts, controlling sessions and queries, etc.
The following is a quick overview of just the <code>nzsql</code> and <code>nzload</code> commands.
For a description of all the CLI tools, see the documentation <a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.adm.doc/r_sysadm_summary_of_commands.html?lang=en">here</a>.
You can install the Netezza CLI tools directly onto your system by following the instructions <a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.adm.doc/c_sysadm_client_software_install.html">here</a>.</p>

<h3>nzsql command</h3>

<p>First confirm that <code>nzsql</code> is installed:
<code>
-bash-4.1$ which nzsql
/app/netezza/bin/nzsql
</code>
You can use <code>nzsql</code> in interactive terminal mode by executing the command:</p>

<pre><code>nzsql -host &lt;hostname&gt; -u &lt;username&gt; -pw &lt;password&gt; -d &lt;database&gt;

Welcome to nzsql, the IBM Netezza SQL interactive terminal.

Type:  \h for help with SQL commands
       \? for help on internal slash commands
       \g or terminate with semicolon to execute query
       \q to quit

ws(user)=&gt;
</code></pre>

<p>which puts you in the nzsql command line interpreter.</p>

<p>From there, you can execute SQL commands:</p>

<pre><code>ws(user)=&gt; select count(*) from dwh..companies;
COUNT
---------
6286
(1 row)
</code></pre>

<p>and you can also execute &ldquo;slash&rdquo; commands.  For example, to change the database to <code>dwh</code> and describe the table <code>companies</code>:
<code>
ws(user)=&gt; \c dwh
You are now connected to database dwh.
ws(user)=&gt; \d companies
                                 View "COMPANIES"
           Attribute           |          Type           | Modifier | Default Value
-------------------------------+-------------------------+----------+---------------
 COMPANY_ID                    | NUMERIC(38,0)           | NOT NULL |
 COMPANY_NAME                  | CHARACTER VARYING(100)  |          |
 COMPANY_STATUS                | NUMERIC(38,0)           |          |
 STATUS_MESSAGE                | CHARACTER VARYING(2000) |          |
 CREATE_DATE                   | DATE                    |          |
 CREATE_VERSION                | CHARACTER VARYING(20)   |          |
 ASSIGNED_DATE                 | DATE                    |          |
 ASSIGNED_VERSION              | CHARACTER VARYING(20)   |          |
...
</code></p>

<p>To see all the available slash commands, type <code>\?</code> at the prompt:</p>

<pre><code>ws(user)=&gt; \?
 \a              toggle between unaligned and aligned mode
 \act            show current active sessions
 \c[onnect] [dbname [user] [password]]  connect to new database (currently 'UED_QBO_WS')
 \C &lt;title&gt;      HTML table title
 \copy ...       perform SQL COPY with data stream to the client machine
 \d &lt;table&gt;      describe table (or view, index, sequence, synonym)
 \d{t|v|i|s|e|x} list tables/views/indices/sequences/temp tables/external tables
 \d{m|y}         list materialized views/synonyms
 \dS{t|v|i|s}    list system tables/views/indexes/sequences
 \dM{t|v|i|s}    list system management tables/views/indexes/sequences
 \dp &lt;name&gt;      list user permissions
 \dpu &lt;name&gt;     list permissions granted to a user
 \dpg &lt;name&gt;     list permissions granted to a group
 \dgp &lt;name&gt;     list grant permissions for a user
 \dgpu &lt;name&gt;    list grant permissions granted to a user
 \dgpg &lt;name&gt;    list grant permissions granted to a group
...
</code></pre>

<p>To escape from the nzsql interactive terminal mode, type <code>\q</code> at the prompt.</p>

<p>You can also use the <code>nzsql</code> command directly from the command line, by invoking it with various parameters.
See the documentation <a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.adm.doc/r_sysadm_nzsql_command.html">here</a> for all the parameters that can be used with the <code>nzsql</code> command.
As an example, to execute a single SQL statement and print the results to the terminal:</p>

<pre><code>-bash-4.1$ nzsql -host myHost -u username -pw password -d ws -c 'select count(*) from companies'
COUNT  
---------
9032
(1 row)
</code></pre>

<p>Or, to direct the output to a specific file in the local file system:</p>

<pre><code>-bash-4.1$ nzsql -host myHost -u username -pw password -d ws -c 'select count(*) from companies' -o output.txt
-bash-4.1$ cat output.txt
COUNT  
---------
9032
(1 row)
</code></pre>

<p>And, to run a SQL script that is located in the local file system:</p>

<pre><code>-bash-4.1$ cat my_script.sql
select count(*) from companies;
-bash-4.1$ nzsql -host myHost -u username -pw password -d ws -f my_script.sql
COUNT
---------
9032
(1 row)
</code></pre>

<h3>nzload command</h3>

<p>The <code>nzload</code> command is used to move large volumes of data in to and out of Netezza.
This is a very broad subject, and you can find all the details <a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.load.doc/c_load_overview.html?cp=SSULQD_7.2.0%2F5&amp;lang=en">here</a>.
As a toy example, suppose you have the following data in the local filesystem:</p>

<pre><code>-bash-4.1$ cat my_data.txt
Fred, 2
Betty, 7
Wilma, 10
Barney, 5
</code></pre>

<p>You can create a Netezza to hold this data, using the <code>nzsql</code> command:</p>

<pre><code>-bash-4.1$ nzsql -host myHost -u username -pw password -d ws -c 'create table my_table (name varchar(80), rocks int)'
</code></pre>

<p>And then you can populate the table using the <code>nzload</code> command:</p>

<pre><code>nzload -host myHost -u username -pw password -db ws -t my_table -df my_data.txt -delim ','
Load session of table 'MY_TABLE' completed successfully
</code></pre>

<p>Finally, you can confirm that the table was populated using the <code>nzsql</code> command:</p>

<pre><code>-bash-4.1$ nzsql -host myHost -u username -pw password -d ws -c 'select * from my_table'
  NAME  | ROCKS 
--------+-------
 Wilma  |    10
 Betty  |     7
 Barney |     5
 Fred   |     2
(4 rows)
</code></pre>

<h3>External Links</h3>

<ol>
<li><a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.adm.doc/r_sysadm_summary_of_commands.html?lang=en">List of Netezza CLI tools</a></li>
<li><a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.adm.doc/c_sysadm_client_software_install.html">Installing the Netezza CLI tools</a></li>
<li><a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.adm.doc/r_sysadm_nzsql_command.html">Nzsql CLI tool</a></li>
<li><a href="http://www-01.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.load.doc/c_load_overview.html?cp=SSULQD_7.2.0%2F5&amp;lang=en">Nzload CLI tool</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some NZSQL Tips for New Netezza Users]]></title>
    <link href="http://tdongsi.github.io/blog/2015/12/07/some-netezzas-nzsql-tips/"/>
    <updated>2015-12-07T11:11:06-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/12/07/some-netezzas-nzsql-tips</id>
    <content type="html"><![CDATA[<ul>
<li>By default, identifiers are treated as UPPERCASE, even if you type them as LOWERCASE. So, for example, these create statements:</li>
</ul>


<pre><code class="sql">create table my_table (name varchar(80), address varchar(80));
create table my_table (NaMe varchar(80), adDresS varchar(80));
</code></pre>

<p>  are equivalent to:</p>

<pre><code class="sql">create table my_table (NAME varchar(80), ADDRESS varchar(80));
</code></pre>

<p>  The same is true for <code>SELECT</code> statements. These two SQL statements:</p>

<pre><code class="sql">select name from my_table;
select NaMe from my_table;
</code></pre>

<p>  are equivalent to:</p>

<pre><code class="sql">select NAME from my_table;
</code></pre>

<ul>
<li>The best practice is that you should never care or override the above default behavior: your identifiers should be case-insensitive. Unfortunately, if you have to override the above default behavior, then you must surround the identifier with double-quotes whenever you reference it. For example, if you create a table using this statement:</li>
</ul>


<pre><code class="sql">create table my_table ("Name" varchar(80), "Address" varchar(80));
</code></pre>

<p>then you must reference the identifiers by surrounding them with double-quotes. For example:</p>

<pre><code class="sql">select "Name" from my_table;
</code></pre>

<ul>
<li>The most perplexing feature for new Netezza users when reading a NZSQL script is probably the &ldquo;dot dot&rdquo; notation of database object names, i.e., the two dots in <code>my_dwh..companies</code>. It is simply the short-hand notation for database object names, <code>database-name..object-name</code>. The fully qualified form of object names in Netezza has <strong>three-level</strong> as <code>database-name.schema.object-name</code>. One example of using such notation is shown below:</li>
</ul>


<pre><code class="sql">select count(*) from (select company_name from my_dwh..companies where company_name like '%e%') as x;
</code></pre>

<h4>External Links</h4>

<ol>
<li><a href="https://www-304.ibm.com/support/knowledgecenter/SSULQD_7.2.0/com.ibm.nz.dbu.doc/c_dbuser_database_object_naming.html">Database Object Naming</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pushing Local Jar File Into Your Local Maven (M2) Repository]]></title>
    <link href="http://tdongsi.github.io/blog/2015/11/17/pushing-local-jar-file-into-your-local-maven-m2-repository/"/>
    <updated>2015-11-17T16:46:49-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/11/17/pushing-local-jar-file-into-your-local-maven-m2-repository</id>
    <content type="html"><![CDATA[<h4>Problem:</h4>

<p>I want to use Vertica JDBC driver in my Eclipse Maven project. I have the jar file from the vendor (i.e., downloaded from HP-Vertica support website) but, obviously, that file is not in Maven central repository. My Maven build will not work without that dependency.</p>

<p>This post will also apply if you are behind a firewall and/or do not have external access for some reason.</p>

<h4>Solution:</h4>

<ul>
<li>Download the jar file (e.g., the Vertica JDBC jar file).</li>
<li>At the same directory as the jar file, run the following command to install the jar to the local Maven repository (running in a different directory seems not work).</li>
</ul>


<pre><code class="bash General Maven command">$ mvn install:install-file -DgroupId=&lt;GROUP_ID&gt; -DartifactId=&lt;ARTIFACT_ID&gt; -Dversion=&lt;VERSION&gt; -Dpackaging=jar -Dfile=&lt;LOCAL_PATH_FOR_JAR&gt; -DgeneratePom=true
</code></pre>

<p>Example:</p>

<pre><code class="bash Example Maven command for Vertica JDBC">$ mvn install:install-file -DgroupId=vertica -DartifactId=vertica-jdbc -Dversion=7.0.1 -Dpackaging=jar -Dfile=~/Downloads/vertica/vertica-jdbc-7.0.1.jar -DgeneratePom=true
</code></pre>

<ul>
<li>Now when you run your maven goals, it will not look for this particular jar file in any external repository such as Maven Central Repository since Maven checks and perceives that it is already in your local repository (your ~/.m2 directory).</li>
</ul>


<p>If you want your Eclipse to start using this jar from your local repository:</p>

<ul>
<li>In Eclipse Luna on a Mac/Windows, go to Navigate > Show View > Other > Maven > Maven Repository.</li>
<li>Open Local Repositories > Local Repository.</li>
<li>Right click for the context menu > Rebuild Index.</li>
</ul>


<p>Now it should show up in “Add…” dialog in pom.xml edit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Performance Logging and Plotting for Cassandra]]></title>
    <link href="http://tdongsi.github.io/blog/2015/11/14/automated-performance-logging-and-plotting-for-cassandra/"/>
    <updated>2015-11-14T19:57:43-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/11/14/automated-performance-logging-and-plotting-for-cassandra</id>
    <content type="html"><![CDATA[<p>In this <a href="https://github.com/tdongsi/python/tree/master/PerformanceLog">mini-project</a>, I created a Python script (PerformanceLog.py) to record JMX values from a running Cassandra instance, using JMXTerm (<a href="http://wiki.cyclopsgroup.org/jmxterm/">http://wiki.cyclopsgroup.org/jmxterm/</a>), and do the following:</p>

<ul>
<li>Put the records into a Cassandra table.</li>
<li>Plot the results.</li>
</ul>


<p>Based on a Cassandra question on Glassdoor.</p>

<p>Currently, the first version only works with Windows version of Cassandra (using DataStax Community installer). Developed and tested in Python 2.7.</p>

<h2>Input/Output</h2>

<p><strong>Input</strong></p>

<p>If running the script from command line, the following arguments must be provided:</p>

<ul>
<li>installDir INSTALLDIR:  Path to installation directory.</li>
<li>host HOST: URL string for Cassandra instance. Only localhost tested.</li>
<li>jmxTerm JMXTERM: Path to jmxterm jar file.</li>
<li>osString OSSTRING: String that represents the current OS. Windows: win. Mac: mac. Unix/Linux: linux.</li>
</ul>


<p>Example:</p>

<blockquote><p>python PerformanceLog.py -installDir C:\datastax -host localhost -jmxTerm lib\jmxterm.jar -osString win</p></blockquote>

<p><strong>Output</strong></p>

<ul>
<li>CSV file with each field for each JMX metric.</li>
</ul>


<p>Example:</p>

<blockquote><p>  SSTableCount,DataSize,c95thPercentile</p>

<p>  0,0,0.0</p>

<p>  7,31306299,9337.784849999995</p>

<p>  7,31306299,9262.307649999999</p>

<p>  &hellip;</p></blockquote>

<ul>
<li><p>Records in a Cassandra table</p></li>
<li><p>Performance plot as PNG file (automatically generated from CSV output file)</p></li>
</ul>


<p>Example:</p>

<p><img src="https://dl.dropbox.com/s/0vy2u8b7hb7djjv/jmxMetrics.png" title="Performance Plot" alt="alt text" /></p>

<h2>Python modules</h2>

<ol>
<li>PerformanceLog.py: Main module to run the automated tasks. Please use &ldquo;python PerformanceLog -h&rdquo;
for the required arguments. Example call for Windows is in the doc string.</li>
<li>MyLogger.py: Logging support module</li>
<li>CassandraRecord.py: Support module to record metrics into a Cassandra table.</li>
<li>Plotter.py: Support module to plot metrics into plots and save into PNG file.</li>
</ol>


<h3>Automated tasks by the modules</h3>

<ol>
<li>Check if Cassandra is Running</li>
<li>Record certain JMX Metrics</li>
<li>Runs the external tool Cassandra Stress</li>
<li>Once the stress session has completed, stop recording JMX Metrics</li>
<li>Record the metrics back into a Cassandra Table</li>
<li>Graph the results (create these graphs at the end of the run).</li>
</ol>


<h2>External Python libraries required</h2>

<h4>For CassandraRecord.py</h4>

<p>This module requires Datastax&rsquo;s Python driver: <a href="http://datastax.github.io/python-driver/installation.html">http://datastax.github.io/python-driver/installation.html</a></p>

<h4>For Plotter.py</h4>

<p>This Python module used Matplotlib library. Please install the following Python libraries: matplotlib, numpy, dateutil, pytz, pyparsing, six (optionally: pillow, pycairo, tornado, wxpython, pyside, pyqt, ghostscript, miktex, ffmpeg, mencoder, avconv, or imagemagick).</p>

<p>Installation of these Python libraries are straight-forward on Linux and Win32. On Win64, please find their installers here: <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>

<h2>Other files</h2>

<p>The following output files are produced. For consistency check, they are left behind.
In the final version of the script, they may be cleaned up accordingly.</p>

<ul>
<li>tempout: Output from JmxTerm session</li>
<li>jmxMetrics.csv: The cvs file that records the interested JMX metrics.</li>
<li>CassandraTest.log: The log file for the script.</li>
</ul>

]]></content>
  </entry>
  
</feed>
