<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automation | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/automation/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2016-02-14T00:37:44-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocking Current Date and Time in Python]]></title>
    <link href="http://tdongsi.github.io/blog/2016/01/27/python-post-1/"/>
    <updated>2016-01-27T17:36:53-08:00</updated>
    <id>http://tdongsi.github.io/blog/2016/01/27/python-post-1</id>
    <content type="html"><![CDATA[<h3>Calendar types</h3>

<p>There are surprisingly many types of calendar. Some of them are:</p>

<ol>
<li><strong>Regular Calendar</strong>: regular solar calendar date range as we know.

<ul>
<li>Example: January 01, 2006 to December 31, 2006.</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/Lunar_calendar"><strong>Lunar Calendar</strong></a>: based on cycles of the lunar phases.

<ul>
<li>Example: January 29, 2006 to February 17, 2007.</li>
<li>A lunar year is defined as 12 lunations, which is about 354 days.</li>
<li>In every two or three years, a <a href="https://en.wikipedia.org/wiki/Lunisolar_calendar">thirteenth-month</a> (intercalary month or leap month) is added to bring the calendar year into synchronisation with the solar year.</li>
</ul>
</li>
<li><strong>Fiscal Calendar</strong>: a company’s selected calendar date range for required SEC financial statement filing.

<ul>
<li>Example: August 01, 2005 to July 31, 2006 is my company&rsquo;s fiscal year 2006.</li>
</ul>
</li>
<li><strong>Tax Calendar</strong>: A number sequence representing weeks in a Tax year which begins right after the US Tax Day.

<ul>
<li>Example: April 16, 2005 to April 15, 2006.</li>
</ul>
</li>
<li><strong>Retail Calendar</strong>: also known as <a href="https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar">4-4-5 Calendar</a> or 544 calendar. 544 describes the number of weeks for a given quarter. Each quarter begins with a 5 week &ldquo;month&rdquo;, followed by 2 four week &ldquo;months&rdquo;.

<ul>
<li>Example: July 31, 2005 to July 29, 2006.</li>
<li>Why? This calendar ensures all 4 quarters in a calendar year are equal. This allows comparing weekly data (e.g., retail sales) to the prior year without correcting for times when regular calendar weeks break across months or quarters.</li>
<li>How? It usually uses the same end month as the fiscal calendar and each retail week consists of Sunday through Saturday.

<ul>
<li>The retail year end is defined as &ldquo;the last Saturday of the month at the fiscal year end&rdquo;.</li>
<li>If August 1st is Sunday, it is retail calendar&rsquo;s starting date. The Saturday July 31st is the last Saturday and end of the last retail year.</li>
<li>If August 1st is Monday, then Saturday July 30th is end of the last retail year, and July 31st is the start of the current retail year.</li>
</ul>
</li>
</ul>
</li>
<li><strong>ISO calendar</strong>: provided in Python <code>datetime</code> module.

<ul>
<li>Example: January 02, 2006 to December 31, 2006.</li>
<li>The first week of an ISO year is the first (Gregorian/regular) calendar week of a year containing a Thursday.</li>
<li>Each week starts at Monday and ends at Sunday.</li>
</ul>
</li>
</ol>


<p>Out of the above calendar types, retail calendar seems to have more complex rules. However, this calendar type is frequently used in industries like retail and manufacturing for ease of planning around it.</p>

<h3>Mocking current time in Python</h3>

<p>Due to retail calendar&rsquo;s desirable characteristics, we may have code that work with retail calendars in commercial applications eventually.
I ended up working with a utility Python module for retail calendar with functions which return values based on current time/date.
For example, a utility function to check if a given date is in the current 544 year works like this:</p>

<pre><code class="python Original version">def is_current_year_544(given_date):
    my_today = datetime.date.today()
    if year_start_544(my_today) &lt;= given_date &lt;= year_end_544(my_today):
        return "Y"
    else:
        return "N"
</code></pre>

<p>Some utility functions in that module are even more complicated than this example function.
For those, I think calling <code>today</code> or <code>now</code> inside those functions is a bad design.
They are essentially another <em>variable</em> in those functions (i.e., when do you run?), and it is better to expose that variable as an input parameter.
In addition, being able to specify what &ldquo;today&rdquo; or &ldquo;now&rdquo; value is will make automated unit testing easier.
For example, I want to know how my Python programs work if it runs on a particular date, such as end of retail year July 29, 2006.
A probably better, more testable function would be something like this.</p>

<pre><code class="python More desirable">def is_current_year_544(given_date, run_date = datetime.date.today()):
    if year_start_544(run_date) &lt;= given_date &lt;= year_end_544(run_date):
        return "Y"
    else:
        return "N"
</code></pre>

<p>However, in reality, you sometimes have to live with the original utility Python module.
Then, the workaround for unit testing it is to &ldquo;mock&rdquo; current date and time, i.e., overriding those returned by <code>today</code> and <code>now</code> methods with some specific values.
In Python, it can be done by using some mocking framework, such as illustrated <a href="http://www.voidspace.org.uk/python/mock/examples.html#partial-mocking">here</a>.
Fortunately, my life was made even easier with <a href="https://github.com/spulec/freezegun"><code>freezegun</code> library</a>.
To install <code>freezegun</code> on Mac OSX, simply run</p>

<pre><code class="plain   ">pip install freezegun
</code></pre>

<p>Using this <code>freezegun</code> library, I can easily specify my &ldquo;current date&rdquo; as &ldquo;July 29, 2006&rdquo; by adding the following decorator with some string &ldquo;2006-07-29&rdquo; for that date.</p>

<pre><code class="python Unit test with mocking">    @freeze_time("2006-07-29")
    def test_year544_end(self):
        """
        Mock today() at 2006-07-29
        """
        self._verify_544_methods()
</code></pre>

<p>For full usage of <code>freezegun</code>, refer to its <a href="https://github.com/spulec/freezegun">quickstart guide</a>.
It should be noted that <code>freezegun</code> can mock <code>datetime</code> calls from other modules and it works great for testing with <code>datetime</code> calls.
However, you might encounter some occasional failures in your unit tests when working with <code>time</code> module.
From my personal experience, in those cases, note that time zones must be accounted for when mocking with <code>time</code> module by specifying <code>tz_offset</code> in the decorator <code>freeze_time</code>.</p>

<h3>External Links</h3>

<ul>
<li><a href="https://github.com/spulec/freezegun">freeze_gun</a></li>
<li><a href="https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar">Retail Calendar</a></li>
<li><a href="http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm">ISO Calendar</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode in Perl]]></title>
    <link href="http://tdongsi.github.io/blog/2015/11/18/unicode-in-perl/"/>
    <updated>2015-11-18T15:40:20-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/11/18/unicode-in-perl</id>
    <content type="html"><![CDATA[<p>For automation in Perl, Unicode can be tricky, especially when you want your automated jobs/tests to work across platforms (Windows and *nix). If you have a choice, another scripting language like Python may be better off in dealing with Unicode texts. If you don&rsquo;t have a choice and must use Perl (specifically Perl 5) like I used to, some of these tips may help get you started.</p>

<p>The most common code snippet that I used in my Perl codes when dealing with Unicode texts is this Unicode preamble:</p>

<pre><code class="perl Unicode preamble">#!/usr/bin/env perl
use strict;

##############################################################
#### Unicode preamble
use utf8;      # so literals and identifiers in Perl scripts can be in UTF-8
use warnings;  # on by default
use warnings  qw(FATAL utf8);    # fatalize encoding glitches
use open      qw(:std :utf8);    # undeclared streams in UTF-8
use charnames qw(:full :short);  # unneeded in v5.16

##############################################################

my $name = '你好世界';
my $checkPrint = "Print Unicode variable: $name \n";
print $checkPrint;
</code></pre>

<p>The first two lines are standard and should be included in any Perl script. The rest are specifically for dealing with UTF-8 (the most commonly used encoding of Unicode). Another useful code snippet is for printing Unicode codepoints (Quiz: what is the difference between a codepoint and its encoding?):</p>

<pre><code class="perl Print Unicode codepoints">my $unicode_helloworld = "\x{4F60}\x{597D}\x{4E16}\x{754C}";
print "Unicode codepoints: $unicode_helloworld\n";
</code></pre>

<p>More recipes for working with Unicode in Perl 5 can be found in References below.</p>

<p>One dilemma you might be facing when your Perl codes run in Windows is to choose which encoding for your script files: ANSI or UTF-8. In my own experience:</p>

<ul>
<li>If the script file encoding is ANSI, I usually have better luck in &ldquo;What you see is what you get&rdquo; department: for example, files created in filesystem have the filenames with same Unicode characters, such as Japanese/Chinese characters, in Perl scripts. The downside of ANSI encoding is when I try to do regex matching of those Japanese/Chinese characters, I get &ldquo;malformed regex&rdquo; error.</li>
<li>If the script file encoding is UTF-8, the files created in filesystem usually have different Japanese/Chinese characters from those in Perl scripts. However, Japanese/Chinese characters in other places such as log files are matching with ones in Perl scripts. There is no &ldquo;malformed regex&rdquo; error when doing regex matching. However, that correctly formed regex matching may be useless if you need to do matching for output from filesystem such as &ldquo;ls&rdquo; command&rsquo;s output.</li>
</ul>


<!---
Overall, I used ANSI encoding for my Perl scripts as my automation project at that time has to run on Windows/Linux/Mac and interacts regularly with filesystem.
-->


<p>References:</p>

<ol>
<li><a href="http://perldoc.perl.org/perluniintro.html">http://perldoc.perl.org/perluniintro.html</a></li>
<li><a href="https://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8">https://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8</a></li>
<li><a href="http://www.perl.com/pub/2012/04/perlunicook-standard-preamble.html">http://www.perl.com/pub/2012/04/perlunicook-standard-preamble.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Performance Logging and Plotting for Cassandra]]></title>
    <link href="http://tdongsi.github.io/blog/2015/11/14/automated-performance-logging-and-plotting-for-cassandra/"/>
    <updated>2015-11-14T19:57:43-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/11/14/automated-performance-logging-and-plotting-for-cassandra</id>
    <content type="html"><![CDATA[<p>In this <a href="https://github.com/tdongsi/python/tree/master/PerformanceLog">mini-project</a>, I created a Python script (PerformanceLog.py) to record JMX values from a running Cassandra instance, using JMXTerm (<a href="http://wiki.cyclopsgroup.org/jmxterm/">http://wiki.cyclopsgroup.org/jmxterm/</a>), and do the following:</p>

<ul>
<li>Put the records into a Cassandra table.</li>
<li>Plot the results.</li>
</ul>


<p>The project is based on a Cassandra interview question found on Glassdoor.</p>

<p>Currently, the first version only works with Windows version of Cassandra (using DataStax Community installer). Developed and tested in Python 2.7.</p>

<h2>Input/Output</h2>

<p><strong>Input</strong></p>

<p>When running the script from command line, the following arguments must be provided:</p>

<ul>
<li>installDir INSTALLDIR:  Path to installation directory.</li>
<li>host HOST: URL string for Cassandra instance. Only localhost tested.</li>
<li>jmxTerm JMXTERM: Path to jmxterm jar file.</li>
<li>osString OSSTRING: String that represents the current OS. Windows: win. Mac: mac. Unix/Linux: linux.</li>
</ul>


<p>Example:</p>

<blockquote><p>python PerformanceLog.py -installDir C:\datastax -host localhost -jmxTerm lib\jmxterm.jar -osString win</p></blockquote>

<p><strong>Output</strong></p>

<ul>
<li>CSV file with each field for each JMX metric.</li>
</ul>


<p>Example:</p>

<blockquote><p>  SSTableCount,DataSize,c95thPercentile</p>

<p>  0,0,0.0</p>

<p>  7,31306299,9337.784849999995</p>

<p>  7,31306299,9262.307649999999</p>

<p>  &hellip;</p></blockquote>

<ul>
<li><p>Records in a Cassandra table</p></li>
<li><p>Performance plot as PNG file (automatically generated from CSV output file)</p></li>
</ul>


<p>Example:</p>

<p><img src="https://dl.dropbox.com/s/0vy2u8b7hb7djjv/jmxMetrics.png" title="Performance Plot" alt="alt text" /></p>

<h2>Python modules</h2>

<ol>
<li>PerformanceLog.py: Main module to run the automated tasks. Please use &ldquo;python PerformanceLog -h&rdquo; for the required arguments. Example call for Windows is in the doc string.</li>
<li>MyLogger.py: Logging support module</li>
<li>CassandraRecord.py: Support module to record metrics into a Cassandra table.</li>
<li>Plotter.py: Support module to plot metrics into plots and save into PNG file.</li>
</ol>


<h3>Automated tasks by the modules</h3>

<ol>
<li>Check if Cassandra is Running</li>
<li>Record certain JMX Metrics</li>
<li>Runs the external tool Cassandra Stress</li>
<li>Once the stress session has completed, stop recording JMX Metrics</li>
<li>Record the metrics back into a Cassandra Table</li>
<li>Graph the results (create these graphs at the end of the run).</li>
</ol>


<h2>External Python libraries required</h2>

<h4>For CassandraRecord.py</h4>

<p>This module requires Datastax&rsquo;s Python driver: <a href="http://datastax.github.io/python-driver/installation.html">http://datastax.github.io/python-driver/installation.html</a></p>

<h4>For Plotter.py</h4>

<p>This Python module used Matplotlib library. Please install the following Python libraries: matplotlib, numpy, dateutil, pytz, pyparsing, six (optionally: pillow, pycairo, tornado, wxpython, pyside, pyqt, ghostscript, miktex, ffmpeg, mencoder, avconv, or imagemagick).</p>

<p>Installation of these Python libraries are straight-forward on Linux and Win32. On Win64, please find their installers here: <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>

<h2>Other files</h2>

<p>The following output files are produced. For consistency check, they are left behind.
In the final version of the script, they may be cleaned up accordingly.</p>

<ul>
<li>tempout: Output from JmxTerm session</li>
<li>jmxMetrics.csv: The cvs file that records the interested JMX metrics.</li>
<li>CassandraTest.log: The log file for the script.</li>
</ul>

]]></content>
  </entry>
  
</feed>
