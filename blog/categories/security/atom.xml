<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2022-04-04T13:51:52-07:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy Hook Script and Jenkins Configuration as Code]]></title>
    <link href="http://tdongsi.github.io/blog/2017/12/30/groovy-hook-script-and-jenkins-configuration-as-code/"/>
    <updated>2017-12-30T21:02:48-08:00</updated>
    <id>http://tdongsi.github.io/blog/2017/12/30/groovy-hook-script-and-jenkins-configuration-as-code</id>
    <content type="html"><![CDATA[<p>This post discusses <a href="https://wiki.jenkins.io/display/JENKINS/Groovy+Hook+Script">Groovy Hook Scripts</a> and how to use them for full configuration-as-code in Jenkins with Docker, Pipeline.
This can help us to set up local environment for developing Jenkins Pipeline libraries and to evaluate various Jenkins features.</p>

<!--more-->


<h3>Groovy Hook Scripts</h3>

<p>These scripts are written in Groovy, and get executed inside the same JVM as Jenkins, allowing full access to the domain model of Jenkins.
For a given hook <code>HOOK</code>, the following locations are searched:</p>

<pre><code>WEB-INF/HOOK.groovy in jenkins.war
WEB-INF/HOOK.groovy.d/*.groovy in the lexical order in jenkins.war
$JENKINS_HOME/HOOK.groovy
$JENKINS_HOME/HOOK.groovy.d/*.groovy in the lexical order
</code></pre>

<p>The <code>init</code> is the most commonly used hook (i.e., <code>HOOK=init</code>).
The following sections show how some of the most common tasks and configurations in Jenkins can be achieved by using such Groovy scripts.
For example, in <a href="https://github.com/tdongsi/jenkins-config">this project</a>, many of such scripts are added into a Dockerized Jenkins master and executed when
starting a container to replicate configurations of the Jenkins instance in production.
It will give us ability to quickly spin up local Jenkins instances for development or troubleshooting issues in production Jenkins.</p>

<p>On a side note, IntelliJ IDEA is probably the best development tool for working with these Groovy Scripts.
Check out <a href="https://github.com/tdongsi/jenkins-config/blob/develop/docs/IDE.md">these instructions on how to set it up in IntelliJ</a>.
<em>UPDATED ON 2018/09/29</em>: More on IntelliJ setup is discussed in <a href="/blog/2018/02/09/intellij-setup-for-jenkins-shared-library-development/">this blog post</a>.</p>

<h3>Authorization</h3>

<p>This section shows how to enable different authorization strategies in Groovy code.</p>

<pre><code class="groovy "Logged-in users can do anything"">import jenkins.model.*
def instance = Jenkins.getInstance()

import hudson.security.*
def realm = new HudsonPrivateSecurityRealm(false)
instance.setSecurityRealm(realm)

def strategy = new hudson.security.FullControlOnceLoggedInAuthorizationStrategy()
strategy.setAllowAnonymousRead(false)
instance.setAuthorizationStrategy(strategy)

instance.save()
</code></pre>

<p>Matrix-based authorization: Gives all authenticated users admin access:</p>

<pre><code class="groovy Matrix-based authorization">import jenkins.model.*
def instance = Jenkins.getInstance()

import hudson.security.*
def realm = new HudsonPrivateSecurityRealm(false)
instance.setSecurityRealm(realm)

def strategy = new hudson.security.GlobalMatrixAuthorizationStrategy()
strategy.add(Jenkins.ADMINISTER, 'authenticated')
instance.setAuthorizationStrategy(strategy)

instance.save()
</code></pre>

<p>For importing GlobalMatrixAuthorizationStrategy class, make sure that <a href="https://wiki.jenkins.io/display/JENKINS/Matrix+Authorization+Strategy+Plugin"><code>matrix-auth</code> plugin</a> is installed.
For full list of standard permissions in the matrix, see <a href="https://gist.github.com/jnbnyc/c6213d3d12c8f848a385">this code snippet</a>.
Note that the matrix can be different if different plugins are installed.
For example, the &ldquo;Replay&rdquo; permission for Runs is not simply <code>hudson.model.Run.REPLAY</code> since there is no such static constant.
Such permission is only available after <a href="https://github.com/jenkinsci/workflow-cps-plugin">Workflow CPS plugin</a> is installed.
Therefore, we can only set &ldquo;Replay&rdquo; permission for Runs with the following:</p>

<pre><code class="groovy">strategy.add(org.jenkinsci.plugins.workflow.cps.replay.ReplayAction.REPLAY,USER)
</code></pre>

<p><strong>References</strong></p>

<ul>
<li><a href="https://gist.github.com/jnbnyc/c6213d3d12c8f848a385">Matrix-based Authorizaiton</a></li>
<li><a href="https://github.com/oleg-nenashev/demo-jenkins-config-as-code">Jenkins config as code</a></li>
</ul>


<h3>Basic Jenkins security</h3>

<p>In addition to enable authorization strategy, we should also set some basic configurations for hardening Jenkins.
Those includes various options that you see in Jenkins UI when going to Manage Jenkins > Configure Global Security.</p>

<ul>
<li><a href="https://support.cloudbees.com/hc/en-us/articles/234709648-Disable-Jenkins-CLI">Disable Jenkins CLI</a></li>
<li>Limit Jenkins agent protocols.</li>
<li>&ldquo;Enable Slave -> Master Access Control&rdquo;</li>
<li>&ldquo;Prevent Cross Site Request Forgery exploits&rdquo;</li>
</ul>


<pre><code class="groovy Basic Jenkins security">import hudson.security.csrf.DefaultCrumbIssuer
import jenkins.model.Jenkins
import jenkins.model.JenkinsLocationConfiguration
import jenkins.security.s2m.AdminWhitelistRule
import org.kohsuke.stapler.StaplerProxy
import hudson.tasks.Mailer

println("--- Configuring Remoting (JNLP4 only, no Remoting CLI)")
Jenkins.instance.getDescriptor("jenkins.CLI").get().setEnabled(false)
Jenkins.instance.agentProtocols = new HashSet&lt;String&gt;(["JNLP4-connect"])

println("--- Enable Slave -&gt; Master Access Control")
Jenkins.instance.getExtensionList(StaplerProxy.class)
    .get(AdminWhitelistRule.class)
    .masterKillSwitch = false

println("--- Checking the CSRF protection")
if (Jenkins.instance.crumbIssuer == null) {
    println "CSRF protection is disabled, Enabling the default Crumb Issuer"
    Jenkins.instance.crumbIssuer = new DefaultCrumbIssuer(true)
}

println("--- Configuring Quiet Period")
// We do not wait for anything
Jenkins.instance.quietPeriod = 0
Jenkins.instance.save()

println("--- Configuring Email global settings")
JenkinsLocationConfiguration.get().adminAddress = "admin@non.existent.email"
Mailer.descriptor().defaultSuffix = "@non.existent.email"
</code></pre>

<p>Some are not working for versions before 2.46, according to <a href="https://support.cloudbees.com/hc/en-us/articles/234709648-Disable-Jenkins-CLI">this</a>.
For disabling Jenkins CLI, you can simply add the java argument <code>-Djenkins.CLI.disabled=true</code> on Jenkins startup.</p>

<p><strong>References</strong></p>

<ul>
<li><a href="https://support.cloudbees.com/hc/en-us/articles/234709648-Disable-Jenkins-CLI">Disable Jenkins CLI: different versions</a></li>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Slave+To+Master+Access+Control">Slave to Master Access Control</a></li>
</ul>


<h3>Create Jobs and Items</h3>

<pre><code class="groovy Create "Pipeline script from SCM" job">import hudson.plugins.git.*;

def scm = new GitSCM("git@github.com:dermeister0/Tests.git")
scm.branches = [new BranchSpec("*/develop")];

def flowDefinition = new org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition(scm, "Jenkinsfile")

def parent = Jenkins.instance
def job = new org.jenkinsci.plugins.workflow.job.WorkflowJob(parent, "New Job")
job.definition = flowDefinition
</code></pre>

<ul>
<li><a href="https://stackoverflow.com/questions/16963309/how-create-and-configure-a-new-jenkins-job-using-groovy">Stackoverflow thread</a></li>
<li><a href="https://github.com/linagora/james-jenkins/blob/master/create-dsl-job.groovy">More example</a></li>
</ul>


<h3>Create different kinds of Credentials</h3>

<p>Adding Credentials to a new, local Jenkins for development or troubleshooting can be a daunting task.
However, with the following scripts and the right setup (NEVER commit your secrets into VCS), developers can automate adding the required Credentials into the new Jenkins.</p>

<pre><code class="groovy Preamble">import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.CredentialsScope
import jenkins.model.Jenkins
import hudson.util.Secret
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
import com.cloudbees.plugins.credentials.impl.CertificateCredentialsImpl
import com.cloudbees.plugins.credentials.SecretBytes

def domain = Domain.global()
def store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
</code></pre>

<pre><code class="groovy "Username with Password" type">def githubAccount = new UsernamePasswordCredentialsImpl(
        CredentialsScope.GLOBAL, "test-github", "Test Github Account",
        "testuser",
        "testpassword"
)
store.addCredentials(domain, githubAccount)
</code></pre>

<pre><code class="groovy "Secret text" type">def secretString = new StringCredentialsImpl(
        CredentialsScope.GLOBAL, "test-secret-string", "Test Secret String",
        Secret.fromString("testpassword")
)
store.addCredentials(domain, secretString)
</code></pre>

<pre><code class="groovy "Secret file" type">// Text file
def secret = '''Hi,
This is the content of the file.
'''

def secretBytes = SecretBytes.fromBytes(secret.getBytes())
def secretFile = new FileCredentialsImpl(
  CredentialsScope.GLOBAL, 
  'text-secret-file', 
  'description', 
  'file.txt', 
  secretBytes)
store.addCredentials(domain, secretFile)

// Binary file
Path fileLocation = Paths.get("/path/to/some/file.tar");
def secretBytes = SecretBytes.fromBytes(Files.readAllBytes(fileLocation))
def secretFile = new FileCredentialsImpl(
  CredentialsScope.GLOBAL, 
  'binary-secret-file', 
  'description', 
  'file.tar', 
  secretBytes)
store.addCredentials(domain, secretFile)
</code></pre>

<pre><code class="groovy "SSH Username with private key" type">String keyfile = "/var/jenkins_home/.ssh/id_rsa"
def privateKey = new BasicSSHUserPrivateKey(
        CredentialsScope.GLOBAL,
        "jenkins_ssh_key",
        "git",
        new BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource(keyfile),
        "",
        ""
)
store.addCredentials(domain, privateKey)
</code></pre>

<pre><code class="groovy "Certificate" type">String minikubeKeyfile = "/var/jenkins_home/secret_data/minikube.pfx"
def minikubeCreds = new CertificateCredentialsImpl(
        CredentialsScope.GLOBAL,
        "minikube",
        "Minikube client certificate",
        "secret",
        new CertificateCredentialsImpl.FileOnMasterKeyStoreSource(minikubeKeyfile))
store.addCredentials(domain, minikubeCreds)
</code></pre>

<ul>
<li><a href="https://support.cloudbees.com/hc/en-us/articles/217708168-create-credentials-from-groovy">CloudBees tutorial</a></li>
<li><a href="https://github.com/tdongsi/jenkins-config/blob/develop/init_scripts/src/main/groovy/scripts/Credentials.groovy">Examples</a></li>
</ul>


<h3>Notifications</h3>

<pre><code class="groovy Configure Slack">import jenkins.model.*
def instance = Jenkins.getInstance()

// configure slack
def slack = Jenkins.instance.getExtensionList(
  jenkins.plugins.slack.SlackNotifier.DescriptorImpl.class
)[0]
def params = [
  slackTeamDomain: "domain",
  slackToken: "token",
  slackRoom: "",
  slackBuildServerUrl: "$JENKINS_URL",
  slackSendAs: ""
]
def req = [
  getParameter: { name -&gt; params[name] }
] as org.kohsuke.stapler.StaplerRequest
slack.configure(req, null)
slack.save()
</code></pre>

<pre><code class="groovy Global email settings">import jenkins.model.*
def instance = Jenkins.getInstance()

// set email
def location_config = JenkinsLocationConfiguration.get()
location_config.setAdminAddress("jenkins@skynet.net")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS: Setting Up Multi-Factor Authentication (MFA)]]></title>
    <link href="http://tdongsi.github.io/blog/2016/01/22/aws-setup-MFA/"/>
    <updated>2016-01-22T18:37:23-08:00</updated>
    <id>http://tdongsi.github.io/blog/2016/01/22/aws-setup-MFA</id>
    <content type="html"><![CDATA[<p>This process is simple and most people should use MFA when developing a serious AWS application. Follow the following steps to enable MFA for AWS.</p>

<!--more-->


<ul>
<li>Launch the AWS Console with your AWS Account. From the AWS Console, select &ldquo;Identity &amp; Access Management&rdquo;.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step1_iam.png" width="350" height="200" title="Screenshot" ></p>

<ul>
<li>Select &ldquo;Users&rdquo; tab on the left side.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step2_users.png" width="447" height="460" title="Screenshot" ></p>

<ul>
<li>Click on your username from the list of users.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step3_you.png" width="555" height="256" title="Screenshot" ></p>

<ul>
<li>Make sure that &ldquo;Security Credentials&rdquo; tab is selected. Scrolling down to the bottom, under &ldquo;Sign-in Credentials&rdquo; section, select &ldquo;Manage MFA Device&rdquo;.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step4_signin.png" width="603" height="314" title="Screenshot" ></p>

<ul>
<li>In the pop-up window, you are allowed to choose a virtual MFA device or a physical MFA device. The most convenient option is a virtual MFA device which only requires you to have a smartphone with some AWS MFA-compatible application. The list of AWS MFA-compatible applications are listed in <a href="http://aws.amazon.com/iam/details/mfa/">here</a>.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step5_device.png" title="Screenshot" ></p>

<ul>
<li>In my case, I use <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Google Authenticator</a>. After installing the app, simply add an account and select &ldquo;Scan a barcode&rdquo;.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step6_app.png" width="300" height="258" title="Screenshot" ></p>

<ul>
<li>Follow the prompts on AWS MFA webpages to arrive at the following page with QR code. You will then enter the first 6 digit PIN from Google Authenticator into Code 1 box. Wait for it to change and then add the second code into Code 2 box.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step7_setup.png" width="495" height="444" title="Screenshot" ></p>

<ul>
<li>You are now all set for MFA. All future accesss will require you to enter the MFA code from the Google Authenticator on your Android/iPhone during login.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step8_mfa.png" width="300" height="185" title="Screenshot" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curl Cookbook]]></title>
    <link href="http://tdongsi.github.io/blog/2015/08/04/curl-cookbook/"/>
    <updated>2015-08-04T10:43:42-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/08/04/curl-cookbook</id>
    <content type="html"><![CDATA[<p>This blog lists some recipes for <code>curl</code> command.</p>

<!--more-->


<h3>Alternatives to <code>curl</code></h3>

<h4>Simple connectivity test</h4>

<p><code>telnet</code>: Most of <code>curl</code> uses are to simply check if you can connect to some endpoint at some port number.</p>

<p><code>python</code>: In some Linux systems, <code>telnet</code> is not installed and cannot be installed but <code>python</code> is present. In that case, you can use the following Python snippet:</p>

<pre><code class="plain Connectivity test with Python">$ python
Python 2.7.5 (default, Nov  6 2016, 00:28:07)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import socket
&gt;&gt;&gt; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&gt;&gt;&gt; s.connect(('my.service.net',8080))
</code></pre>

<h4>Full replacement</h4>

<p><code>java</code>: <a href="https://hc.apache.org/index.html">Apache HttpClient</a>.</p>

<p><code>python</code>: <a href="http://docs.python-requests.org/en/master/">requests module</a>. An <a href="https://github.com/tdongsi/bart-parking">example project</a>.</p>

<p><code>groovy</code>: String&rsquo;s <code>toURL().getText()</code> together with JsonSlurper.</p>

<pre><code class="groovy Example Groovy">import groovy.json.JsonSlurper

def getPrBody(String githubUsername, String githubToken, String repo, String id) {
  String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

  String url = "${GITHUB_API}/${githubUsername}/${repo}/pulls/${id}"
  println "Querying ${url}"
  def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
  def json = new JsonSlurper().parseText(text)
  def bodyText = json.body

  return bodyText
}
</code></pre>

<h3>Standard options by functionality</h3>

<h4>General usage</h4>

<pre><code class="plain Options">-X: HTTP method. For example: -X PUT.
-O: binary download.

-s: silent. It will only output the data you ask for.
</code></pre>

<h4>Secure connections</h4>

<pre><code class="plain Options">-k, --insecure: curl to proceed and operate even for server connections otherwise considered insecure.
</code></pre>

<h3>Cookbook</h3>

<h4>Standard usage</h4>

<pre><code class="plain etcd examples">curl -X GET http://master-1:2379/v2/keys/coreos.com/network/config
</code></pre>

<p>Some examples with <a href="/blog/2017/08/06/github-rest-api/">Github API</a>.</p>

<pre><code class="plain Other Github API examples"># PUT with data: Merging a PR
curl -X PUT -d '{\"commit_title\": \"Merge pull request\"}' ${GITHUB}/org-name/repo-name/pulls/${env.CHANGE_ID}/merge?access_token=${env.ACCESS_TOKEN_PASSWORD}

# GET with authentication: Get PR details
curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" ${GITHUB}/${org}/${repo}/pulls/${env.CHANGE_ID}

# With proxy
curl -L -x public0-proxy1.company.net:8080 https://api.github.com
</code></pre>

<h3>Common problems</h3>

<h4>Passing certificate and private key gives <code>OSStatus -25299</code> error</h4>

<p>You might encounter the following problem with the default <code>curl</code> on MacOS.</p>

<pre><code class="plain Error message">tdongsi-ltm4:download tdongsi$ curl --cert hostcert.crt --key hostcert.key "https://myurl:9093/namespaces/something"
curl: (58) SSL: Can't load the certificate "hostcert.crt" and its private key: OSStatus -25299
</code></pre>

<p>As explained in <a href="https://github.com/curl/curl/issues/283">this Github bug</a>, the certificate must be in PKCS#12 format if using Secure Transport.</p>

<p><blockquote><p>the Secure Transport back-end to curl only supports client IDs that are in PKCS#12 (P12) format; it does not support client IDs in PEM format because Apple does not allow us to create a security identity from an identity file in PEM format without using a private API. And we can&rsquo;t use the private API, because apps that use private API are not allowed in any of Apple&rsquo;s app stores.</p></blockquote></p>

<p>You can use <code>openssl</code> to convert your private key + certificate to PKCS12 format, as follows.</p>

<pre><code class="plain Convert to PKCS12 and retry">tdongsi-ltm4:download tdongsi$ openssl pkcs12 -export -in hostcert.crt -inkey hostcert.key -out ajna.p12
Enter Export Password:
Verifying - Enter Export Password:

tdongsi-ltm4:download tdongsi$ curl -v -k -E ./ajna.p12:testing "https://myurl:9093/namespaces/something"
</code></pre>

<p>In the second command above, <code>testing</code> is the password of your choice when you create <code>ajna.p12</code> keystore with the first command.
Note that if <code>curl</code> is installed from <code>homebrew</code> on MacOS, you can use the certificate and its key without <code>openssl</code> conversion step.</p>

<h3>References</h3>

<ul>
<li><a href="https://curl.haxx.se/docs/manpage.html">curl man page</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Cookbook: Ssh-add]]></title>
    <link href="http://tdongsi.github.io/blog/2015/05/16/ssh-add-cookbook/"/>
    <updated>2015-05-16T16:38:46-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/05/16/ssh-add-cookbook</id>
    <content type="html"><![CDATA[<p>Recipes with <code>ssh-add</code> command.</p>

<!--more-->


<h3>Simple usages</h3>

<pre><code class="plain Adding identity file">ssh-add /path/to/file/id_rsa.pem
</code></pre>

<pre><code class="plain Listing identities"># Display the keys' fingerprints only
ssh-add -l
# Display same in MD5 format
ssh-add -l -E md5
# Display the entire public key
ssh-add -L
</code></pre>

<pre><code class="plain Deleting identity"># Delete a key
ssh-add -d /path/to/file
# Clear all keys
ssh-add -D
</code></pre>

<h3>OSX specific</h3>

<p>On OS X <code>ssh-add</code> is integrated with the system keychain. If you give the <code>-K</code> option, as in <code>ssh-add -K</code>, when you add a key, that key’s password will be added to the keychain. As long as your keychain is unlocked, a key that has been stored in this way doesn’t require a password to be loaded into the agent.</p>

<p>All keys with their password stored in the keychain will automatically be loaded when you run <code>ssh -A</code>. This happens automatically on login.</p>

<p>When a password has been stored in keychain, <code>ssh -K -d key-file</code> both removes the key from the agent and removes it password from the keychain. Without <code>-K</code>, <code>-d</code> does not change the keychain and the key can be reloaded without a password. <code>-D</code> silently ignores <code>-K</code>.</p>

<h3>Recipe: Connecting without a passphrase</h3>

<p><code>ssh-add</code> is commonly used to simplify <code>ssh</code> command.
In the following example, you need to specify a private key file in some location.</p>

<pre><code class="plain Before">mymac:~ tdongsi$ ssh -i ~/.ssh/private.key centos@k8s-worker-10
Enter passphrase for key '/Users/tdongsi/.ssh/private.key':
Last login: Mon May 15 20:17:13 2017 from 10.3.52.223
[centos@k8s-worker-10 ~]$ exit
logout
Connection to k8s-worker-10 closed.
</code></pre>

<p>By adding the private key to the authentication agent with <code>ssh-add</code>, you can simplify the <code>ssh</code> command as follows:</p>

<pre><code class="plain After">mymac:~ tdongsi$ ssh-add ~/.ssh/private.key
Enter passphrase for /Users/tdongsi/.ssh/private.key:
Identity added: /Users/tdongsi/.ssh/private.key (/Users/tdongsi/.ssh/private.key)
mymac:~ tdongsi$ ssh-add -l
2048 SHA256:WKysqi9jq735mRK0U2MNS5A /Users/tdongsi/.ssh/private.key (RSA)

mymac:~ tdongsi$ ssh centos@k8s-worker-10
Last login: Mon May 15 20:23:46 2017 from 10.10.74.67
[centos@k8s-worker-10 ~]$ exit
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="https://help.github.com/articles/error-permission-denied-publickey/">ssh-add</a>

<ul>
<li><a href="http://stuff-things.net/2016/02/11/stupid-ssh-add-tricks/">ssh-add tips</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Cookbook: Ssh]]></title>
    <link href="http://tdongsi.github.io/blog/2015/05/11/ssh-cookbook/"/>
    <updated>2015-05-11T13:45:35-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/05/11/ssh-cookbook</id>
    <content type="html"><![CDATA[<p>This blog lists some recipes that is related to <code>ssh</code> commands.</p>

<!--more-->


<h3>Quick recipes</h3>

<p>Recipe 1: <a href="https://askubuntu.com/questions/53553/how-do-i-retrieve-the-public-key-from-a-ssh-private-key">link</a></p>

<pre><code class="plain Recipe 1: Generate public key from private key">ssh-keygen -y -f ~/.ssh/id_rsa &gt; ~/.ssh/id_rsa.pub
</code></pre>

<p>Recipe 2: <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#verify-key-pair-fingerprints">link</a></p>

<pre><code class="plain Recipe 2: Show fingerprint of the private key in MD5 format (used by Github, AWS)">openssl rsa -in ~/.ssh/id_rsa -pubout -outform DER | openssl md5 -c
</code></pre>

<p>Recipe 3: <a href="https://serverfault.com/questions/132970/can-i-automatically-add-a-new-host-to-known-hosts">link</a>.</p>

<pre><code class="plain Recipe 3: Add new hosts to known_hosts file">ssh-keyscan -H [ip_address] &gt;&gt; ~/.ssh/known_hosts
ssh-keyscan -H [hostname] &gt;&gt; ~/.ssh/known_hosts
</code></pre>

<p>Recipe 4: <a href="https://github.com/jenkinsci/slack-plugin/issues/149">link</a></p>

<pre><code class="plain Recipe 4: Add self-signed certificates into cacerts">openssl s_client -connect nexus.company.com:443 &lt; /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; public.crt
/opt/jdk-latest/jre/bin/keytool -import -alias nexus.company.com  -keystore /opt/jdk-latest/jre/lib/security/cacerts -file public.crt

# Typical error in Java
javax.net.ssl.SSLHandshakeException: 
sun.security.validator.ValidatorException: PKIX path building failed: 
sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
</code></pre>

<p>Recipe 4: <a href="https://www.youtube.com/watch?v=fQEhA79ifnI">Java keystore</a></p>

<pre><code class="plain Recipe 4: Java keystore related commands"># Generate Root CA
keytool -genkey -v -alias rootca -keyalg RSA -keystore kstore
# Generate Intermediate CA
keytool -genkey -v -alias CA -keyalg RSA -keystore kstore
# Export certificate
keytool -export -alias CAsigned -keystore kstore -file CAsigned.crt
# Import cert
keytool -import -alias CA -keystore kstore -file CAsigned.crt
# List keystore
keytool -list -v -keystore kstore

# Import internal root CA with default path
keytool -import -alias "sfdc root" -keystore $JAVA_HOME/jre/lib/security/cacerts -file ~/Downloads/sfdc_root.cert 
</code></pre>

<p>Recipe 5: How to check if a private key file matches a public key file (both in PEM format).</p>

<pre><code class="plain Recipe 5: Check if public and private key match"># openssl x509 -noout -modulus -in chain.pem | openssl md5
(stdin)= c416781461f0c1c5c59489e658e4b4c5

# openssl rsa -noout -modulus -in key.pem | openssl md5
Enter pass phrase for key.pem:
(stdin)= c416781461f0c1c5c59489e658e4b4c5
</code></pre>

<h3><code>-R</code> and <code>-L</code> of <code>ssh</code></h3>

<p>Those options stands for remote and local port forwarding.
There are blog posts explain these options better than <a href="https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot#">this</a>.
The awesome answer and sketches are reproduced here for occasional review:</p>

<p><img class="center" src="/images/bash/LocalForwarding.png" width="600" height="500"></p>

<p><img class="center" src="/images/bash/RemoteForwarding.png" width="490" height="500"></p>

<pre><code class="plain Example 1">ssh -L 80:localhost:80 SUPERSERVER
</code></pre>

<p>In Example 1, you specify that a connection made to the local port 80 is to be forwarded to port 80 on SUPERSERVER.
That means if someone connects to your computer with a webbrowser, he gets the response of the webserver running on SUPERSERVER.
You, on your local machine, have no webserver running.</p>

<pre><code class="plain Example 2">ssh -R 80:localhost:80 tinyserver
</code></pre>

<p>In Example 2, you specify, that a connection made to the port 80 of tinyserver is to be forwarded to port 80 on your local machine.
That means if someone connects to the small and slow server with a webbrowser, he gets the response of the webserver running on your local machine.
The tinyserver, which has not enough diskspace for the big website, has no webserver running.
But people connecting to tinyserver think so.</p>

<p>Other things could be: The powerful machine has five webservers running on five different ports.
If a user connects to one of the five tinyservers at port 80 with his webbrowser, the request is redirected to the corresponding webserver running on the powerful machine.
That would be</p>

<pre><code class="plain Example 3 (before)">ssh -R 80:localhost:30180 tinyserver1
ssh -R 80:localhost:30280 tinyserver2
etc.
</code></pre>

<p>Or maybe your machine is only the connection between the powerful and the small servers.
Then it would be (for one of the tinyservers that play to have their own webservers):</p>

<pre><code class="plain Example 3 (after)">ssh -R 80:SUPERSERVER:30180 tinyserver1
ssh -R 80:SUPERSERVER:30280 tinyserver2
etc
</code></pre>
]]></content>
  </entry>
  
</feed>
