<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2017-12-31T16:42:32-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Datadog]]></title>
    <link href="http://tdongsi.github.io/blog/2016/10/11/datadog/"/>
    <updated>2016-10-11T17:25:38-07:00</updated>
    <id>http://tdongsi.github.io/blog/2016/10/11/datadog</id>
    <content type="html"><![CDATA[<p>This post summarizes what I learnt about Datadog, a third-party monitoring service.</p>

<!--more-->


<h3>Features</h3>

<ul>
<li>Presents multiple dashboards to keep an eye on how well everything&rsquo;s running</li>
<li>Parsing of logs from Heroku, JMX</li>
<li>Using analytics from Datadog to help build self-healing systems</li>
<li>Agent-based monitoring, arbitrary configuration of log sources

<ul>
<li>dogstatsd - Aggregation of metrics and stats</li>
<li>Log collector. Forwarded to Datadog&rsquo;s back-end</li>
</ul>
</li>
<li>Can execute specific commands to collect information, health checking, &hellip;</li>
<li>Events and metrics can be tagged arbitrary for organization&rsquo;s sake</li>
<li>Usage rate: Roughly 4.5m metrics collected/hour. Roughly 1250 metrics/second</li>
<li>Integrations for other products (Slack, Pagerduty, et al).</li>
<li>Monitors are built with a visual construction kit:

<ul>
<li>Dropdowns, pick-and-place.</li>
<li>Graphs, charts</li>
<li>Timeboards and Screenboards</li>
<li>Averages, time between events, events/unit of time, above/below (and/or equal to)</li>
<li>How to treat those metrics (sums, differences, averages)</li>
<li>Types of alerts</li>
</ul>
</li>
<li>Basic widgets are used to construct the dashboards. Each widget is configurable.</li>
<li>Basic health checks (OK/NOT OKAY) are possible.</li>
<li>Application tracing - Python lib that you can include in your application, and it adds native Datadog monitoring hooks.</li>
</ul>


<h3>Notable shortcomings</h3>

<ul>
<li>Only in us-east-1 region.</li>
<li>Some reliability issues (could be AWS, could be them). They&rsquo;re working on it.</li>
<li>If an app doesn&rsquo;t come up, it doesn&rsquo;t send an event, so they don&rsquo;t know that something went wrong.</li>
<li>Because all teams are generating events, it&rsquo;s hard to figure out what&rsquo;s actually going on. Sometimes the tags don&rsquo;t make sense&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS: Setting Up Multi-Factor Authentication (MFA)]]></title>
    <link href="http://tdongsi.github.io/blog/2016/01/22/aws-setup-MFA/"/>
    <updated>2016-01-22T18:37:23-08:00</updated>
    <id>http://tdongsi.github.io/blog/2016/01/22/aws-setup-MFA</id>
    <content type="html"><![CDATA[<p>This process is simple and most people should use MFA when developing a serious AWS application. Follow the following steps to enable MFA for AWS.</p>

<!--more-->


<ul>
<li>Launch the AWS Console with your AWS Account. From the AWS Console, select &ldquo;Identity &amp; Access Management&rdquo;.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step1_iam.png" width="350" height="200" title="Screenshot" ></p>

<ul>
<li>Select &ldquo;Users&rdquo; tab on the left side.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step2_users.png" width="447" height="460" title="Screenshot" ></p>

<ul>
<li>Click on your username from the list of users.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step3_you.png" width="555" height="256" title="Screenshot" ></p>

<ul>
<li>Make sure that &ldquo;Security Credentials&rdquo; tab is selected. Scrolling down to the bottom, under &ldquo;Sign-in Credentials&rdquo; section, select &ldquo;Manage MFA Device&rdquo;.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step4_signin.png" width="603" height="314" title="Screenshot" ></p>

<ul>
<li>In the pop-up window, you are allowed to choose a virtual MFA device or a physical MFA device. The most convenient option is a virtual MFA device which only requires you to have a smartphone with some AWS MFA-compatible application. The list of AWS MFA-compatible applications are listed in <a href="http://aws.amazon.com/iam/details/mfa/">here</a>.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step5_device.png" title="Screenshot" ></p>

<ul>
<li>In my case, I use <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Google Authenticator</a>. After installing the app, simply add an account and select &ldquo;Scan a barcode&rdquo;.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step6_app.png" width="300" height="258" title="Screenshot" ></p>

<ul>
<li>Follow the prompts on AWS MFA webpages to arrive at the following page with QR code. You will then enter the first 6 digit PIN from Google Authenticator into Code 1 box. Wait for it to change and then add the second code into Code 2 box.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step7_setup.png" width="495" height="444" title="Screenshot" ></p>

<ul>
<li>You are now all set for MFA. All future accesss will require you to enter the MFA code from the Google Authenticator on your Android/iPhone during login.</li>
</ul>


<p><img class="center" src="/images/aws/mfa/step8_mfa.png" width="300" height="185" title="Screenshot" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curl Cookbook]]></title>
    <link href="http://tdongsi.github.io/blog/2015/08/04/curl-cookbook/"/>
    <updated>2015-08-04T10:43:42-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/08/04/curl-cookbook</id>
    <content type="html"><![CDATA[<p>This blog lists some recipes for <code>curl</code> command.</p>

<!--more-->


<h3>Alternatives to <code>curl</code></h3>

<h4>Simple connectivity test</h4>

<p><code>telnet</code>: Most of <code>curl</code> uses are to simply check if you can connect to some endpoint at some port number.</p>

<p><code>python</code>: In some Linux systems, <code>telnet</code> is not installed and cannot be installed but <code>python</code> is present. In that case, you can use the following Python snippet:</p>

<pre><code class="plain Connectivity test with Python">$ python
Python 2.7.5 (default, Nov  6 2016, 00:28:07)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import socket
&gt;&gt;&gt; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&gt;&gt;&gt; s.connect(('my.service.net',8080))
</code></pre>

<h4>Full replacement</h4>

<p><code>java</code>: <a href="https://hc.apache.org/index.html">Apache HttpClient</a>.</p>

<p><code>python</code>: <a href="http://docs.python-requests.org/en/master/">requests module</a>. An <a href="https://github.com/tdongsi/bart-parking">example project</a>.</p>

<p><code>groovy</code>: String&rsquo;s <code>toURL().getText()</code> together with JsonSlurper.</p>

<pre><code class="groovy Example Groovy">import groovy.json.JsonSlurper

def getPrBody(String githubUsername, String githubToken, String repo, String id) {
  String GITHUB_API = 'https://git.enterprise.com/api/v3/repos'

  String url = "${GITHUB_API}/${githubUsername}/${repo}/pulls/${id}"
  println "Querying ${url}"
  def text = url.toURL().getText(requestProperties: ['Authorization': "token ${githubToken}"])
  def json = new JsonSlurper().parseText(text)
  def bodyText = json.body

  return bodyText
}
</code></pre>

<h3>Standard options by functionality</h3>

<h4>General usage</h4>

<pre><code class="plain Options">-X: HTTP method. For example: -X PUT.
-O: binary download.

-s: silent. It will only output the data you ask for.
</code></pre>

<h4>Secure connections</h4>

<pre><code class="plain Options">-k, --insecure: curl to proceed and operate even for server connections otherwise considered insecure.
</code></pre>

<h3>Cookbook</h3>

<h4>Standard usage</h4>

<pre><code class="plain etcd examples">TODO
</code></pre>

<p>Some examples with <a href="/blog/2017/08/06/github-rest-api/">Github API</a>.</p>

<pre><code class="plain Other Github API examples"># PUT with data: Merging a PR
curl -X PUT -d '{\"commit_title\": \"Merge pull request\"}' ${GITHUB}/org-name/repo-name/pulls/${env.CHANGE_ID}/merge?access_token=${env.ACCESS_TOKEN_PASSWORD}

# GET with authentication: Get PR details
curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" ${GITHUB}/${org}/${repo}/pulls/${env.CHANGE_ID}

# With proxy
curl -L -x public0-proxy1.company.net:8080 https://api.github.com
</code></pre>

<h3>Common problems</h3>

<h4>Passing certificate and private key gives <code>OSStatus -25299</code> error</h4>

<p>You might encounter the following problem with the default <code>curl</code> on MacOS.</p>

<pre><code class="plain Error message">tdongsi-ltm4:download tdongsi$ curl --cert hostcert.crt --key hostcert.key "https://myurl:9093/namespaces/something"
curl: (58) SSL: Can't load the certificate "hostcert.crt" and its private key: OSStatus -25299
</code></pre>

<p>As explained in <a href="https://github.com/curl/curl/issues/283">this Github bug</a>, the certificate must be in PKCS#12 format if using Secure Transport.</p>

<p><blockquote><p>the Secure Transport back-end to curl only supports client IDs that are in PKCS#12 (P12) format; it does not support client IDs in PEM format because Apple does not allow us to create a security identity from an identity file in PEM format without using a private API. And we can&rsquo;t use the private API, because apps that use private API are not allowed in any of Apple&rsquo;s app stores.</p></blockquote></p>

<p>You can use <code>openssl</code> to convert your private key + certificate to PKCS12 format, as follows.</p>

<pre><code class="plain Convert to PKCS12 and retry">tdongsi-ltm4:download tdongsi$ openssl pkcs12 -export -in hostcert.crt -inkey hostcert.key -out ajna.p12
Enter Export Password:
Verifying - Enter Export Password:

tdongsi-ltm4:download tdongsi$ curl -v -k -E ./ajna.p12:testing "https://myurl:9093/namespaces/something"
</code></pre>

<p>In the second command above, <code>testing</code> is the password of your choice when you create <code>ajna.p12</code> keystore with the first command.
Note that if <code>curl</code> is installed from <code>homebrew</code> on MacOS, you can use the certificate and its key without <code>openssl</code> conversion step.</p>

<h3>References</h3>

<ul>
<li><a href="https://curl.haxx.se/docs/manpage.html">curl man page</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Cookbook: Ssh-add]]></title>
    <link href="http://tdongsi.github.io/blog/2015/05/16/ssh-add-cookbook/"/>
    <updated>2015-05-16T16:38:46-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/05/16/ssh-add-cookbook</id>
    <content type="html"><![CDATA[<p>Recipes with <code>ssh-add</code> command.</p>

<!--more-->


<h3>Simple usages</h3>

<pre><code class="plain Adding identity file">ssh-add /path/to/file/id_rsa.pem
</code></pre>

<pre><code class="plain Listing identities"># Display the keys' fingerprints only
ssh-add -l
# Display same in MD5 format
ssh-add -l -E md5
# Display the entire public key
ssh-add -L
</code></pre>

<pre><code class="plain Deleting identity"># Delete a key
ssh-add -d /path/to/file
# Clear all keys
ssh-add -D
</code></pre>

<h3>OSX specific</h3>

<p>On OS X <code>ssh-add</code> is integrated with the system keychain. If you give the <code>-K</code> option, as in <code>ssh-add -K</code>, when you add a key, that key’s password will be added to the keychain. As long as your keychain is unlocked, a key that has been stored in this way doesn’t require a password to be loaded into the agent.</p>

<p>All keys with their password stored in the keychain will automatically be loaded when you run <code>ssh -A</code>. This happens automatically on login.</p>

<p>When a password has been stored in keychain, <code>ssh -K -d key-file</code> both removes the key from the agent and removes it password from the keychain. Without <code>-K</code>, <code>-d</code> does not change the keychain and the key can be reloaded without a password. <code>-D</code> silently ignores <code>-K</code>.</p>

<h3>Recipe: Connecting without a passphrase</h3>

<p><code>ssh-add</code> is commonly used to simplify <code>ssh</code> command.
In the following example, you need to specify a private key file in some location.</p>

<pre><code class="plain Before">mymac:~ tdongsi$ ssh -i ~/.ssh/private.key centos@k8s-worker-10
Enter passphrase for key '/Users/tdongsi/.ssh/private.key':
Last login: Mon May 15 20:17:13 2017 from 10.3.52.223
[centos@k8s-worker-10 ~]$ exit
logout
Connection to k8s-worker-10 closed.
</code></pre>

<p>By adding the private key to the authentication agent with <code>ssh-add</code>, you can simplify the <code>ssh</code> command as follows:</p>

<pre><code class="plain After">mymac:~ tdongsi$ ssh-add ~/.ssh/private.key
Enter passphrase for /Users/tdongsi/.ssh/private.key:
Identity added: /Users/tdongsi/.ssh/private.key (/Users/tdongsi/.ssh/private.key)
mymac:~ tdongsi$ ssh-add -l
2048 SHA256:WKysqi9jq735mRK0U2MNS5A /Users/tdongsi/.ssh/private.key (RSA)

mymac:~ tdongsi$ ssh centos@k8s-worker-10
Last login: Mon May 15 20:23:46 2017 from 10.10.74.67
[centos@k8s-worker-10 ~]$ exit
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="https://help.github.com/articles/error-permission-denied-publickey/">ssh-add</a>

<ul>
<li><a href="http://stuff-things.net/2016/02/11/stupid-ssh-add-tricks/">ssh-add tips</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Cookbook: Ssh]]></title>
    <link href="http://tdongsi.github.io/blog/2015/05/11/ssh-cookbook/"/>
    <updated>2015-05-11T13:45:35-07:00</updated>
    <id>http://tdongsi.github.io/blog/2015/05/11/ssh-cookbook</id>
    <content type="html"><![CDATA[<p>This blog lists some recipes that is related to <code>ssh</code> commands.</p>

<!--more-->


<h3>Quick recipes</h3>

<p>Recipe 1: <a href="https://askubuntu.com/questions/53553/how-do-i-retrieve-the-public-key-from-a-ssh-private-key">link</a></p>

<pre><code class="plain Recipe 1: Generate public key from private key">ssh-keygen -y -f ~/.ssh/id_rsa &gt; ~/.ssh/id_rsa.pub
</code></pre>

<p>Recipe 2: <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#verify-key-pair-fingerprints">link</a></p>

<pre><code class="plain Recipe 2: Show fingerprint of the private key in MD5 format (used by Github, AWS)">openssl rsa -in ~/.ssh/id_rsa -pubout -outform DER | openssl md5 -c
</code></pre>

<p>Recipe 3: <a href="https://serverfault.com/questions/132970/can-i-automatically-add-a-new-host-to-known-hosts">link</a>.</p>

<pre><code class="plain Recipe 3: Add new hosts to known_hosts file">ssh-keyscan -H [ip_address] &gt;&gt; ~/.ssh/known_hosts
ssh-keyscan -H [hostname] &gt;&gt; ~/.ssh/known_hosts
</code></pre>

<p>Recipe 4: <a href="https://github.com/jenkinsci/slack-plugin/issues/149">link</a></p>

<pre><code class="plain Recipe 4: Add self-signed certificates into cacerts">openssl s_client -connect nexus.company.com:443 &lt; /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; public.crt
/opt/jdk-latest/jre/bin/keytool -import -alias nexus.company.com  -keystore /opt/jdk-latest/jre/lib/security/cacerts -file public.crt

# Typical error in Java
javax.net.ssl.SSLHandshakeException: 
sun.security.validator.ValidatorException: PKIX path building failed: 
sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
</code></pre>

<p>Recipe 4: <a href="https://www.youtube.com/watch?v=fQEhA79ifnI">Java keystore</a></p>

<pre><code class="plain Recipe 4: Java keystore related commands"># Generate Root CA
keytool -genkey -v -alias rootca -keyalg RSA -keystore kstore
# Generate Intermediate CA
keytool -genkey -v -alias CA -keyalg RSA -keystore kstore
# Sign the CA with rootCA
TODO
# Export certificate
keytool -export -alias CAsigned -keystore kstore -file CAsigned.crt
# Import cert
keytool -import -alias CA -keystore kstore -file CAsigned.crt
# List keystore
keytool -list -v -keystore kstore

# Import internal root CA with default path
keytool -import -alias "sfdc root" -keystore $JAVA_HOME/jre/lib/security/cacerts -file ~/Downloads/sfdc_root.cert 
</code></pre>

<h3><code>-R</code> and <code>-L</code> of <code>ssh</code></h3>

<p>Those options stands for remote and local port forwarding.
There are blog posts explain these options better than <a href="https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot#">this</a>.
The awesome answer and sketches are reproduced here for occasional review:</p>

<p><img class="center" src="/images/bash/LocalForwarding.png" width="600" height="500"></p>

<p><img class="center" src="/images/bash/RemoteForwarding.png" width="490" height="500"></p>

<pre><code class="plain Example 1">ssh -L 80:localhost:80 SUPERSERVER
</code></pre>

<p>In Example 1, you specify that a connection made to the local port 80 is to be forwarded to port 80 on SUPERSERVER.
That means if someone connects to your computer with a webbrowser, he gets the response of the webserver running on SUPERSERVER.
You, on your local machine, have no webserver running.</p>

<pre><code class="plain Example 2">ssh -R 80:localhost:80 tinyserver
</code></pre>

<p>In Example 2, you specify, that a connection made to the port 80 of tinyserver is to be forwarded to port 80 on your local machine.
That means if someone connects to the small and slow server with a webbrowser, he gets the response of the webserver running on your local machine.
The tinyserver, which has not enough diskspace for the big website, has no webserver running.
But people connecting to tinyserver think so.</p>

<p>Other things could be: The powerful machine has five webservers running on five different ports.
If a user connects to one of the five tinyservers at port 80 with his webbrowser, the request is redirected to the corresponding webserver running on the powerful machine.
That would be</p>

<pre><code class="plain Example 3 (before)">ssh -R 80:localhost:30180 tinyserver1
ssh -R 80:localhost:30280 tinyserver2
etc.
</code></pre>

<p>Or maybe your machine is only the connection between the powerful and the small servers.
Then it would be (for one of the tinyservers that play to have their own webservers):</p>

<pre><code class="plain Example 3 (after)">ssh -R 80:SUPERSERVER:30180 tinyserver1
ssh -R 80:SUPERSERVER:30280 tinyserver2
etc
</code></pre>
]]></content>
  </entry>
  
</feed>
