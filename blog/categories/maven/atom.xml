<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | Personal Programming Notes]]></title>
  <link href="http://tdongsi.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/"/>
  <updated>2021-03-13T03:04:31-08:00</updated>
  <id>http://tdongsi.github.io/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jacoco in Maven Projects]]></title>
    <link href="http://tdongsi.github.io/blog/2017/09/23/jacoco-in-maven-project/"/>
    <updated>2017-09-23T21:39:13-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/09/23/jacoco-in-maven-project</id>
    <content type="html"><![CDATA[<p>This blog post goes over some recipes for adding code coverage report to Maven-based projects with Jacoco.</p>

<!--more-->


<h3>Standard usage</h3>

<p>Based on <a href="http://www.eclemma.org/jacoco/trunk/doc/maven.html">offical instruction</a> and <a href="https://stackoverflow.com/questions/36199422/maven-unit-test-code-coverage">this</a>, you need to add the following code snippet in to your Maven <code>pom.xml</code>.</p>

<pre><code class="xml Jacoco usage (typical Maven project)">&lt;project&gt;
...

    &lt;dependencies&gt;
        ...
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            ...
            &lt;!-- Code Coverage report generation --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.7.9&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;prepare-agent&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;generate-code-coverage-report&lt;/id&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;report&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>At least, you need &ldquo;prepare-agent&rdquo; before test phase for Jacoco instrumentation and &ldquo;report&rdquo; after test phase for generating the report.
You could subject the project to code coverage and generate the same report without making any changes to the pom file.
To do this, run the following command:</p>

<pre><code class="plain Jacoco from Maven command-line">mvn jacoco:prepare-agent test jacoco:report
</code></pre>

<p>You may get the following error:</p>

<pre><code class="plain">[ERROR] No plugin found for prefix 'jacoco' in the current project ...
</code></pre>

<p>There are two options to fix that error.
The easiest way is to specify the <code>groupId</code> and <code>artifactId</code> parameters of the plugin explicitly.
You can also add <code>version</code> to ensure the stability of your build pipeline.</p>

<pre><code class="plain">mvn clean org.jacoco:jacoco-maven-plugin:0.7.9:prepare-agent install org.jacoco:jacoco-maven-plugin:0.7.9:report
</code></pre>

<p>The more long-term solution is to add the following in to your Maven &ldquo;settings.xml&rdquo;.</p>

<pre><code class="xml Maven settings">&lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.jacoco&lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;
</code></pre>

<h3>Tests with Mock</h3>

<p>If mocking is involved in unit tests, you need to use “instrument” and “restore-instrumented” steps.</p>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/powermock/powermock/wiki/Code-coverage-with-JaCoCo">PowerMock instruction</a></li>
<li><a href="https://github.com/powermock/powermock-examples-maven/blob/master/jacoco-offline/pom.xml">PowerMock example pom.xml</a></li>
</ul>


<h3>Multi-module Maven projects</h3>

<p>Officially, multi-module Maven projects are supported differently by Jacoco as documented <a href="https://github.com/jacoco/jacoco/wiki/MavenMultiModule">here</a>.
Instrumentation will be similar but the challenge of multi-module Maven projects lies in how to collect and report code coverage of all modules correctly.
Jacoco Maven standard goals, as shown in sections above, work on single modules only: Tests are executed within the module and contributed coverage only to code within the same module.
Coverage reports were created for each module separately.</p>

<p>In the past, there are some ad-hoc solutions such as <a href="https://dzone.com/articles/jacoco-maven-multi-module">this</a> (for Jacoco 0.5.x) to work around that limit.
However, those patterns are also error-prone and hard to customize, especially when Jacoco is used with Surefire plugin.
Fortunately, Jacoco recently introduced a new Maven goal &ldquo;report-aggregate&rdquo; in its release 0.7.7 which will aggregate code coverage data across Maven modules.
Its usage is also present in the same <a href="https://github.com/jacoco/jacoco/wiki/MavenMultiModule">link</a> (quoted below) but it is too succint and not very helpful for new users.</p>

<p><blockquote><p>Create a dedicated module in your project for generation of the report. This module should depend on all or some other modules in the project.</p></blockquote></p>

<p>Let' say you have a multi-module Maven project with this structure:</p>

<pre><code class="plain Multi-module Maven project">root pom
  |- module a
  |- module b
  |- module c
</code></pre>

<p>To use Jacoco &ldquo;report-aggregate&rdquo; goal for these modules, you first need to add a dedicated &ldquo;coverage&rdquo; module.
This &ldquo;coverage&rdquo; module should be added into the root POM.
The multi-module Maven project should now look like this:</p>

<pre><code class="plain Multi-module Maven project with aggregate coverage module">root pom
  |- module a
  |- module b
  |- module c
  |- module "coverage"
</code></pre>

<p>The POMs for each module does not need to change at all.
The POM for the &ldquo;coverage&rdquo; module will look like this:</p>

<pre><code class="xml Maven pom.xml for coverage module">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;parent&gt;
        &lt;groupId&gt;com.company&lt;/groupId&gt;
        &lt;artifactId&gt;company-pom&lt;/artifactId&gt;
        &lt;version&gt;3.0&lt;/version&gt;
    &lt;/parent&gt;

    &lt;artifactId&gt;report&lt;/artifactId&gt;
    &lt;name&gt;Jacoco Report&lt;/name&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;my.example&lt;/groupId&gt;
            &lt;artifactId&gt;module-a&lt;/artifactId&gt;
            &lt;version&gt;210.0.00-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;my.example&lt;/groupId&gt;
            &lt;artifactId&gt;module-b&lt;/artifactId&gt;
            &lt;version&gt;210.0.00-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;my.example&lt;/groupId&gt;
            &lt;artifactId&gt;module-c&lt;/artifactId&gt;
            &lt;version&gt;210.0.00-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.7.9&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;excludes&gt;
                        &lt;!-- Example of excluding classes 
                        &lt;exclude&gt;**/com/company/config/AutoConfiguration.class&lt;/exclude&gt;
                        --&gt;
                    &lt;/excludes&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;report-aggregate&lt;/id&gt;
                        &lt;phase&gt;verify&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;report-aggregate&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;

            &lt;!-- This coverage module should never be deployed --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;skip&gt;true&lt;/skip&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>Note that we still require &ldquo;prepare-agent&rdquo; step to run before the first test suite.
Depending on what plugins are being used and how the modules are organized within the project, we might have different setup for that particular step.
One option is to run from the command-line:</p>

<pre><code>tdongsi$ ls
Dockerfile              README.md               module1       pom.xml
Jenkinsfile             coverage                module2       scripts

tdongsi$ mvn -B clean org.jacoco:jacoco-maven-plugin:0.7.9:prepare-agent install
</code></pre>

<p>Links:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/13031219/how-to-configure-multi-module-maven-sonar-jacoco-to-give-merged-coverage-rep/37871210#37871210">Example of report-aggregate</a></li>
<li><a href="https://github.com/jacoco/jacoco/tree/master/jacoco-maven-plugin.test/it/it-report-aggregate">Example Maven project</a></li>
</ul>


<h4>Customizations</h4>

<p>In theory, a global threshold can be defined in <code>coverage/pom.xml</code> to enforce code coverage standard across teams.
However, in practice, different teams are at different stages of module/service maturity and blindly having a global threshold will hamper teams working on newer services/modules.
In addition, it does not make sense to enforce code coverage on some Maven modules such as those generated in GRPC.</p>

<p>In Jacoco, you can set different coverage limits for individual modules instead of a global threshold for all modules.
In the following example, you can specify a coverage threshold for module A by modifying module A&rsquo;s pom.xml file:</p>

<pre><code class="xml Module A's pom.xml">...

&lt;/plugins&gt;
...
    &lt;plugin&gt;
        &lt;groupId&gt;com.atlassian.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-clover2-plugin&lt;/artifactId&gt;
    &lt;/plugin&gt;

    &lt;plugin&gt;
        &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
        &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;0.7.9&lt;/version&gt;

        &lt;executions&gt;
            &lt;execution&gt;
                &lt;id&gt;check&lt;/id&gt;
                &lt;goals&gt;
                &lt;goal&gt;check&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;configuration&gt;
                    &lt;!-- NOTE: Set haltOnFailureto true when code coverage is enforced --&gt;
                    &lt;haltOnFailure&gt;false&lt;/haltOnFailure&gt;

                    &lt;rules&gt;
                        &lt;rule &gt;
                            &lt;element&gt;CLASS&lt;/element&gt;
                            &lt;limits&gt;
                                &lt;limit &gt;
                                    &lt;counter&gt;LINE&lt;/counter&gt;
                                    &lt;value&gt;COVEREDRATIO&lt;/value&gt;
                                    &lt;minimum&gt;0.80&lt;/minimum&gt;
                                &lt;/limit&gt;
                                &lt;limit &gt;
                                    &lt;counter&gt;BRANCH&lt;/counter&gt;
                                    &lt;value&gt;COVEREDRATIO&lt;/value&gt;
                                    &lt;minimum&gt;0.80&lt;/minimum&gt;
                                &lt;/limit&gt;
                            &lt;/limits&gt;
                            &lt;excludes&gt;
                                &lt;!-- 
                                &lt;exclude&gt;com.test.ExampleExclusion&lt;/exclude&gt;
                                --&gt;
                            &lt;/excludes&gt;
                        &lt;/rule&gt;
                    &lt;/rules&gt;
                &lt;/configuration&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>As you can see, you can also specify files being excluded from coverage calculation.</p>

<h3>References</h3>

<ul>
<li><a href="http://www.jacoco.org/jacoco/trunk/doc/maven.html">Jacoco Maven plugin</a>: there are example POMs.</li>
</ul>


<!--
* [Cross-module reporting](https://stackoverflow.com/questions/41885772/jacoco-simple-integration-test-solution/41901853#41901853)
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven and Gradle Builds in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/"/>
    <updated>2017-05-20T23:27:08-07:00</updated>
    <id>http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>In this post, we will look into how to securely authenticate with Nexus for Maven and Gradle builds in Jenkins pipelines.
Nexus username and password should NOT be stored in plain text on Jenkins slaves or Docker images.
Instead, those credentials should be passed into Jenkins pipeline using <code>withCredentials</code> step.</p>

<!--more-->


<h3>Maven</h3>

<p>Maven builds in corporates usually use private repositories on Nexus, instead of public ones in Maven Central Repository.
To do that, we usually configure Maven to check Nexus instead of the default, built-in connection to Maven Central.
These configurations is stored in <em>~/.m2/settings.xml</em> file.</p>

<p>For authentication with Nexus and for deployment, we must <a href="https://books.sonatype.com/nexus-book/reference/_adding_credentials_to_your_maven_settings.html">provide credentials accordingly</a>.
We usually add the credentials into our Maven Settings in <em>settings.xml</em> file.</p>

<pre><code class="xml Example Credentials in settings.xml">&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;username&gt;deployment&lt;/username&gt;
      &lt;password&gt;deployment123&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;
</code></pre>

<p>However, for automated build and deployment in Jenkins pipelines, it is not safe to store credentials in plain text files.
Instead, one should store Nexus credentials as <a href="https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin">secrets in Jenkins</a> and pass them into Jenkinsfile using their IDs (<code>credentialsId</code>).
See <a href="https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs">this article</a> for the full picture of related plugins used for storing and passing secrets in Jenkins.</p>

<pre><code class="groovy Nexus authentication for Maven in Jenkinsfile.">  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
  ]) {
    withEnv([
      'nexusPublic=https://nexus.example.com/nexus/content/groups/public/'
    ]) {
      def xmlTemplate = readFile templateFile
      String xmlFile = transformXml(xmlTemplate, env.nexusUsername, env.nexusPassword)

      String tempFile = 'temp.xml'
      writeFile file: tempFile, text: xmlFile

      sh "mvn -B clean build -s ${tempFile}"
    }
  }
</code></pre>

<p>The <a href="https://jenkins.io/doc/pipeline/steps/credentials-binding/">step <code>withCredentials</code></a> will not only provide a secure way of injecting secrets (e.g., Nexus credentials) into Jenkins pipeline, but also scrub away such sensitive information if we happen to print them out in log files.
<code>transformXml</code> is my Groovy function that generates the <code>settings.xml</code> from the redacted Maven settings.xml template (no credentials) and the provided Nexus credentials.</p>

<h4>Maven 3.0</h4>

<p>Since <strong>Maven 3.0</strong>, the above problem is made much easier since environment variables can be referred inside <code>settings.xml</code> file by using special expression <code>${env.VAR_NAME}</code>, based on <a href="https://maven.apache.org/settings.html">this doc</a>.
Nexus authentication for Maven 3.0 in Jenkins pipeline can be done as follows:</p>

<pre><code class="xml settings.xml in Maven 3.0">&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;username&gt;${env.MVN_SETTINGS_nexusUsername}&lt;/username&gt;
      &lt;password&gt;${env.MVN_SETTINGS_nexusPassword}&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;
</code></pre>

<pre><code class="groovy Passing Nexus credentials for Maven 3.0 in Jenkinsfile">  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'MVN_SETTINGS_nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'MVN_SETTINGS_nexusPassword']
  ]) {
    withEnv([
      'nexusPublic=https://nexus.example.com/nexus/content/groups/public/'
    ]) {
      sh 'mvn -s settings.xml clean build'
    }
  }
</code></pre>

<p>However, note that it is still tricky even in Maven 3.0 since this is not always applicable, as noted in <a href="https://maven.apache.org/settings.html">the same doc</a>.</p>

<p><blockquote><p>Note that properties defined in profiles within the settings.xml cannot be used for interpolation.</p></blockquote></p>

<h3>Gradle</h3>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<pre><code class="groovy Example build.gradle">    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }
</code></pre>

<pre><code class="properties Example gradle.properties">nexusUsername=myUsername
nexusPassword=password123
nexusPublic=https://nexus.example.com/nexus/content/groups/public/
</code></pre>

<p>The default location of the <code>gradle.properties</code> file is <code>~/.gradle</code>.
This is due to the environment variable <code>GRADLE_USER_HOME</code> usually set to <code>~/.gradle</code>.
For custom location of <code>gradle.properties</code> (i.e., other than <code>~/.gradle</code>), ensure that the variable <code>GRADLE_USER_HOME</code> is set accordingly.</p>

<p>However, similar to Maven, for Jenkins pipeline automation, it is not safe to store credentials in plain text file <code>gradle.properties</code>, no matter how &ldquo;hidden&rdquo; its location is.
For that purpose, you should use the following Groovy code:</p>

<pre><code class="groovy Nexus authentication for Gradle in Jenkinsfile.">  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'ORG_GRADLE_PROJECT_nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'ORG_GRADLE_PROJECT_nexusPassword']
  ]) {
    withEnv([
      'ORG_GRADLE_PROJECT_nexusPublic=https://nexus.example.com/nexus/content/groups/public/',
      'ORG_GRADLE_PROJECT_nexusReleases=https://nexus.example.com/nexus/content/repositories/releases',
      'ORG_GRADLE_PROJECT_nexusSnapshots=https://nexus.example.com/nexus/content/repositories/snapshots'
    ]) {
      sh './gradlew jenkinsBuild'
    }
  }
</code></pre>

<p>Note that, in Gradle, the solution is much simpler because Gradle respects properies set through environment variales.
Based on <a href="https://docs.gradle.org/current/userguide/build_environment.html">its doc</a>, if the environment variable name looks like <strong><em>ORG_GRADLE_PROJECT_prop=somevalue</em></strong>, then Gradle will set a <code>prop</code> property on your project object, with the value of <code>somevalue</code>.
Therefore, in <code>withCredentials</code> step, we specifically bind the secrets <code>nexusUsername</code> and <code>nexusPassword</code> to the environment variables <em>ORG_GRADLE_PROJECT_nexusUsername</em> and <em>ORG_GRADLE_PROJECT_nexusPassword</em> and not some arbitrary variable names.
These environment variables should match the ones used in <code>builde.gradle</code> and, in the following Closure, we simply call the standard Gradle wrapper command <code>./gradlew &lt;target&gt;</code>.
Compared with Maven solution in the last section, there is no intermediate step to generate <code>settings.xml</code> based on the provided secrets.</p>

<h3>More Tips</h3>

<p>If Maven/Gradle build is used in multiple repositories across organization, it is recommended to move the above Groovy code into shared Jenkins library, as shown in <a href="/blog/2017/03/17/jenkins-pipeline-shared-libraries/">last post</a>.
For example, the Gradle builds can be simplified by defining <code>useNexus</code> step (see <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/#defining-steps">here</a>) and adding it into the <a href="/blog/2017/03/17/jenkins-pipeline-shared-libraries/">shared library <em>workflow-lib</em></a>.</p>

<pre><code class="groovy vars/useNexus.groovy">def call(Closure body) {
  withCredentials([
    [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'ORG_GRADLE_PROJECT_nexusUsername'],
    [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'ORG_GRADLE_PROJECT_nexusPassword']
  ]) {
    withEnv([
      'ORG_GRADLE_PROJECT_nexusPublic=https://nexus.example.com/nexus/content/groups/public/',
      'ORG_GRADLE_PROJECT_nexusReleases=https://nexus.example.com/nexus/content/repositories/releases',
      'ORG_GRADLE_PROJECT_nexusSnapshots=https://nexus.example.com/nexus/content/repositories/snapshots'
    ]) {
      body()
    }
  }
}
</code></pre>

<p>After that, all the Gradle builds with Nexus authentication in Jenkinsfile will now be reduced to simply this:</p>

<pre><code class="groovy Simplified Nexus authentication for Gradle in Jenkinsfile.">useNexus {
  sh './gradlew jenkinsBuild'
}
</code></pre>

<p>As shown above, it will reduce lots of redundant codes for Gradle builds, repeated again and again in Jenkinsfiles across multiple repositories in an organizaiton.</p>

<h3>References</h3>

<ul>
<li><a href="https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs">Secrets in Jenkins build jobs</a></li>
<li><a href="https://docs.gradle.org/current/userguide/build_environment.html">Gradle build environment</a></li>
<li><a href="https://stackoverflow.com/questions/12749225/where-to-put-gradle-configuration-i-e-credentials-that-should-not-be-committe">Stackoverflow dicussion</a>: for older versions of Gradle.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pushing Local Jar File Into Your Local Maven (M2) Repository]]></title>
    <link href="http://tdongsi.github.io/blog/2015/11/17/pushing-local-jar-file-into-your-local-maven-m2-repository/"/>
    <updated>2015-11-17T16:46:49-08:00</updated>
    <id>http://tdongsi.github.io/blog/2015/11/17/pushing-local-jar-file-into-your-local-maven-m2-repository</id>
    <content type="html"><![CDATA[<h4>Problem:</h4>

<p>I want to use Vertica JDBC driver in my Eclipse Maven project. I have the jar file from the vendor (i.e., downloaded from HP-Vertica support website) but, obviously, that file is not in Maven central repository. My Maven build will not work without that dependency.</p>

<p>This post will also apply if you are behind a firewall and/or do not have external access for some reason.</p>

<!--more-->


<h4>Solution:</h4>

<ul>
<li>Download the jar file (e.g., the Vertica JDBC jar file).</li>
<li>At the same directory as the jar file, run the following command to install the jar to the local Maven repository (running in a different directory seems not work).</li>
</ul>


<pre><code class="bash General Maven command">$ mvn install:install-file -DgroupId=&lt;GROUP_ID&gt; -DartifactId=&lt;ARTIFACT_ID&gt; -Dversion=&lt;VERSION&gt; -Dpackaging=jar -Dfile=&lt;LOCAL_PATH_FOR_JAR&gt; -DgeneratePom=true
</code></pre>

<p>Example:</p>

<pre><code class="bash Example Maven command for Vertica JDBC">$ mvn install:install-file -DgroupId=com.vertica -DartifactId=vertica-jdbc -Dversion=7.0.1 -Dpackaging=jar -Dfile=~/Downloads/vertica/vertica-jdbc-7.0.1.jar -DgeneratePom=true
</code></pre>

<ul>
<li>Now when you run your maven goals, it will not look for this particular jar file in any external repository such as Maven Central Repository since Maven checks and perceives that it is already in your local repository (your ~/.m2 directory).</li>
</ul>


<p>If you want your Eclipse to start using this jar from your local repository:</p>

<ul>
<li>In Eclipse Luna on a Mac/Windows, go to Window > Show View > Other > Maven > Maven Repository.</li>
<li>Open Local Repositories > Local Repository.</li>
<li>Right click for the context menu > Rebuild Index.</li>
</ul>


<p>Now it should show up in “Add…” dialog in pom.xml edit.</p>
]]></content>
  </entry>
  
</feed>
